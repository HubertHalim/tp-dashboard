[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "mainClassName \u003d \u0027cardibuddy.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    archiveName \u003d \u0027cardibuddy.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 153,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 4,
      "-": 61
    }
  },
  {
    "path": "src/main/java/cardibuddy/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *     Error: JavaFX runtime components are missing,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *     and are required to run this application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 23
    }
  },
  {
    "path": "src/main/java/cardibuddy/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.CardiBuddyStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.JsonCardiBuddyStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CardiBuddy ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddyStorage cardiBuddyStorage \u003d new JsonCardiBuddyStorage(userPrefs.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        storage \u003d new StorageManager(cardiBuddyStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s cardibuddy book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The data from the sample cardibuddy book will be used instead if {@code storage}\u0027s cardibuddy book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * or an empty cardibuddy book will be used instead if errors occur when reading {@code storage}\u0027s cardibuddy book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Optional\u003cReadOnlyCardiBuddy\u003e cardiBuddyOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ReadOnlyCardiBuddy initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            cardiBuddyOptional \u003d storage.readCardiBuddy();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (!cardiBuddyOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample CardiBuddy\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            initialData \u003d cardiBuddyOptional.orElseGet(SampleDataUtil::getSampleCardiBuddy);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CardiBuddy\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            initialData \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CardiBuddy\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            initialData \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CardiBuddy\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.info(\"Starting CardiBuddy \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Cardi Buddy ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 43,
      "-": 140
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK \u003d \"A deck should not have a question and/or an answer.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The deck index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD \u003d \"A flashcard should have a question and an answer.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_INVALID_FLASHCARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_DECKS_LISTED_OVERVIEW \u003d \"%1$d decks listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_FLASHCARDS_LISTED_OVERVIEW \u003d \"%1$d cards listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_DECK_CANNOT_BE_FLASHCARD \u003d \"Operation would result in the object created \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"being both a deck and a card!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 10,
      "phaebaez": 8
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/cardibuddy/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @see cardibuddy.model.Model#getCardiBuddy()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ReadOnlyCardiBuddy getCardiBuddy();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of decks */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Path getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 13,
      "-": 38
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.CardiBuddyParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.storage.Storage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final CardiBuddyParser addressBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        addressBookParser \u003d new CardiBuddyParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            storage.saveCardiBuddy(model.getCardiBuddy());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ReadOnlyCardiBuddy getCardiBuddy() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return model.getCardiBuddy();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return model.getFilteredDeckList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return model.getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 22,
      "-": 57
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_DECK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Adds a deck to the cardibuddy."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deck/flashcard to the cardibuddy book. \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_DECK + \"DECK_TITLE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"|| \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_FLASHCARD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Example (adding a deck): \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_DECK + \"cs2103t \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_TAG + \"Hard \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_TAG + \"Software Engineering \\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Example (adding a flashcard): \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_FLASHCARD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_QUESTION + \"A queue cannot be implemented using an array \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_ANSWER + \"False \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_TAG + \"Programming\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_ADD_DECK \u003d \"To add a deck to the cardibuddy book. \\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_DECK + \"DECK_TITLE \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            // + PREFIX_TITLE + \"Title \\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + PREFIX_DECK + \"cs2103t \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_TAG + \"Hard \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_TAG + \"Software Engineering\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_ADD_FLASHCARD \u003d \"To add a flashcard to the cardibuddy book. \\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_FLASHCARD + \"CARD_TITLE \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_QUESTION + \"QUESTION \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_ANSWER + \"ANSWER\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_FLASHCARD + \" \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_QUESTION + \"A queue cannot be implemented using an array \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_ANSWER + \"False \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + PREFIX_TAG + \"Programming\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New object added: %1$s\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in the cardibuddy library\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARD \u003d \"This flashcard already exists in the deck\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AddCommand.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final Object toAdd;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final Boolean isDeck;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Deck}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public AddCommand(Deck deck) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        toAdd \u003d deck;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        isDeck \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public AddCommand(Flashcard flashcard) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        toAdd \u003d flashcard;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        isDeck \u003d false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (isDeck) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            if (model.hasDeck((Deck) toAdd)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            model.addDeck((Deck) toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            logger.info(\"Deck has been added\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            if (model.hasFlashcard((Flashcard) toAdd)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_FLASHCARD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            model.addFlashcard((Flashcard) toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            logger.info(\"Flashcard has been added\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 17,
      "airshhlay": 1,
      "phaebaez": 99
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Clears all decks and cards from the cardibuddy."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 17
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Represents a command with hidden internal cardibuddy.logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "phaebaez": 4
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Deletes the Deck that corresponds with the index and the subsequent Flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \": Deletes a deck/flashcard identified by the index number used in the displayed cardibuddy book.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Object Type INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_DELETE_DECK_SUCCESS \u003d \"Deleted Deck: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Deck deckToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DECK_SUCCESS, deckToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 15,
      "phaebaez": 39
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Edits Deck Title or its Tags."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 17
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Cardibuddy as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "phaebaez": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Lists all decks/flashcards in the directory to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all decks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        model.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 16,
      "phaebaez": 7
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/SearchCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.DeckContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Finds and lists all decks in cardi buddy whose title contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \": Finds all decks whose titles contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" java\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final DeckContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public SearchCommand(DeckContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        model.updateFilteredDeckList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                String.format(Messages.MESSAGE_DECKS_LISTED_OVERVIEW, model.getFilteredDeckList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof SearchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 46
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/TestCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A class for the test command, used to initiate a test session."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"test\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \": Starts a test session with the deck indicated by the index\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MESSAGE_TEST_SESSION_SUCCESS \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        Deck deckToTest \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        model.testDeck(deckToTest);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return new CommandResult(MESSAGE_TEST_SESSION_SUCCESS, false, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                || (other instanceof TestCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((TestCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 53
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_DECK_CANNOT_BE_FLASHCARD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_DECK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_FLASHCARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_FLASHCARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.exceptions.DeckCannotBeCardException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.exceptions.InvalidDeckException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.exceptions.InvalidFlashcardException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private static Object toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DECK, PREFIX_FLASHCARD, PREFIX_TAG,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                        PREFIX_QUESTION, PREFIX_ANSWER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_FLASHCARD)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            // both PREFIX_DECK and PREFIX_FLASHCARD are present"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new DeckCannotBeCardException(String.format(MESSAGE_DECK_CANNOT_BE_FLASHCARD"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                    + \"\\n\" + AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_QUESTION, PREFIX_ANSWER)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                | arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_QUESTION)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                | arePrefixesPresent(argMultimap, PREFIX_DECK, PREFIX_ANSWER)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            //trying to add a deck with a question and/or an answer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new InvalidDeckException(String.format(MESSAGE_INVALID_DECK + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                    + AddCommand.MESSAGE_ADD_DECK));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap, PREFIX_FLASHCARD)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_FLASHCARD, PREFIX_QUESTION, PREFIX_ANSWER)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                throw new InvalidFlashcardException(String.format(MESSAGE_INVALID_FLASHCARD + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                        + AddCommand.MESSAGE_ADD_FLASHCARD));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (argMultimap.containsKey(PREFIX_DECK)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_DECK).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            toAdd \u003d new Deck(title, tagList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return new AddCommand((Deck) toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        } else if (argMultimap.containsKey(PREFIX_FLASHCARD)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Title title \u003d new Title(\"\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d Collections.\u003cTag\u003eemptySet();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Deck deck \u003d new Deck(title, tagList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Question question \u003d ParserUtil.parseQuestion(argMultimap.getValue(PREFIX_QUESTION).get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Answer answer \u003d ParserUtil.parseAnswer(argMultimap.getValue(PREFIX_ANSWER).get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            toAdd \u003d new Flashcard(deck, question, answer);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            return new AddCommand((Flashcard) toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 39,
      "phaebaez": 55
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Checks for the presence of {@code key}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public Boolean containsKey(Prefix key) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return argMultimap.containsKey(key);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 59,
      "phaebaez": 7
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/CardiBuddyParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.TestCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class CardiBuddyParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        case TestCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return new TestCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 16,
      "airshhlay": 4,
      "-": 60
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final Prefix PREFIX_DECK \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final Prefix PREFIX_FLASHCARD \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 14
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 5,
      "-": 24
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 41
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.ShortAnswer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String trimmedName \u003d title.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!Title.isValidTitle(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new Title(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Parses a {@code String question} into a {@code Question}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @throws ParseException if the given {@code question} is invalid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static Question parseQuestion(String question) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        String trimmedQuestion \u003d question.trim();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!Question.isValidQuestion(trimmedQuestion)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new ParseException(Question.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new Question(trimmedQuestion);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Parses a {@code String answer} into a {@code Answer}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     * @throws ParseException if the given {@code answer} is invalid."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static Answer parseAnswer(String answer) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(answer);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        String trimmedAnswer \u003d answer.trim();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        if (!Answer.isValidAnswer(trimmedAnswer)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            throw new ParseException(Answer.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new ShortAnswer(trimmedAnswer);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 75,
      "phaebaez": 34
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/SearchCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.DeckContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new SearchCommand(new DeckContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 13,
      "-": 21
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/TestCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import static cardibuddy.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.commands.TestCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * A parser for the test command, used to initiate a test session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestCommandParser implements Parser\u003cTestCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TestCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * and returns a TestCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        try { // TODO: figure out how to parse additional test settings along with the index"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return new TestCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TestCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 30
    }
  },
  {
    "path": "src/main/java/cardibuddy/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/CardiBuddy.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.UniqueFlashcardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Duplicates are not allowed (by .isSameFlashcard comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class CardiBuddy implements ReadOnlyCardiBuddy {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final UniqueDeckList decks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final UniqueFlashcardList flashcards;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        decks \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards \u003d new UniqueFlashcardList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddy() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Creates a CardiBuddy using the Decks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddy(ReadOnlyCardiBuddy toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the contents of the decks list with {@code decks}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.decks.setDecks(decks);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the contents of the flashcard list with {@code flashcards}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.flashcards.setFlashcards(flashcards);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Resets the existing data of this {@code CardiBuddy} with {@code newData}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void resetData(ReadOnlyCardiBuddy newData) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        setDecks(newData.getDeckList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        setFlashcards(newData.getFlashcardList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //// deck-level operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in cardibuddy."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return decks.contains(deck);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a deck to the cardibuddy."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck must not already exist in the cardibuddy."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void addDeck(Deck d) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        decks.add(d);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the given deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the cardi buddy."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck identity of {@code editedFlashcard} must not be the same as another existing deck in the cardi buddy."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(editedDeck);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        decks.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Removes {@code key} from this {@code CardiBuddy}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code key} must exist in the cardi buddy."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void removeDeck(Deck key) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        decks.remove(key);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //// flashcard-level operations"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if a deck with the same identity as {@code card} exists in cardibuddy."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean hasFlashcard(Flashcard card) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return flashcards.contains(card);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a flashcard to the cardi buddy."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The flashcard must not already exist in the cardi buddy."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void addFlashcard(Flashcard p) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards.add(p);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the given flashcard {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the cardi buddy."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not be the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * same as another existing flashcard in the cardi buddy."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(editedFlashcard);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Removes {@code key} from this {@code CardiBuddy}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code key} must exist in the cardi buddy."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void removeFlashcard(Flashcard key) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards.remove(key);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return flashcards.asUnmodifiableObservableList().size() + \" flashcards\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return decks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFlashcardList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return flashcards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof cardibuddy.model.CardiBuddy // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 flashcards.equals(((cardibuddy.model.CardiBuddy) other).flashcards));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return flashcards.hashCode();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 175
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Predicate\u003cFlashcard\u003e PREDICATE_SHOW_ALL_FLASHCARDS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the user prefs\u0027 cardibuddy file path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Path getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Sets the user prefs\u0027 cardibuddy file path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void setCardiBuddyFilePath(Path cardiBuddyFilePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces cardibuddy data with the data in {@code cardiBuddy}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void setCardiBuddy(ReadOnlyCardiBuddy cardiBuddy);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /** Returns the CardiBuddy */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ReadOnlyCardiBuddy getCardiBuddy();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the cardibuddy."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    boolean hasDeck(Deck deck);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Deletes the given deck."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck must exist in the cardibuddy."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    void deleteDeck(Deck target);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds the given deck."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code deck} must not already exist in the cardibuddy."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void addDeck(Deck deck);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the given deck {@code target} with {@code editedDeck}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the cardibuddy."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the cardibuddy."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void setDeck(Deck target, Deck editedDeck);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if a flashcard with the same identity as {@code flashcard} exists in the cardibuddy."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    boolean hasFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Deletes the given flashcard."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The flashcard must exist in the cardibuddy."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    void deleteFlashcard(Flashcard target);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds the given flashcard."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code flashcard} must not already exist in the cardibuddy."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    void addFlashcard(Flashcard flashcard);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the given flashcard {@code target} with {@code editedFlashcard}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the cardibuddy."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The flashcard identity of {@code editedFlashcard} must not"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * be the same as another existing flashcard in the cardibuddy."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    void setFlashcard(Flashcard target, Flashcard editedFlashcard);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Starts the test session with {@code deck}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param deck the deck to be tested"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    void testDeck(Deck deck);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deck list */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /** Returns an unmodifiable view of the filtered flashcard list */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFilteredFlashcardList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Updates the filter of the filtered deck list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Updates the filter of the filtered flashcard list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 106,
      "airshhlay": 5,
      "phaebaez": 22
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents the in-memory model of the cardibuddy data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(cardibuddy.model.ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final CardiBuddy cardiBuddy;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final FilteredList\u003cFlashcard\u003e filteredFlashcards;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final FilteredList\u003cDeck\u003e filteredDecks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Initializes a ModelManager with the given cardiBuddy and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ModelManager(ReadOnlyCardiBuddy cardiBuddy, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(cardiBuddy, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.fine(\"Initializing with CardiBuddy: \" + cardiBuddy + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardiBuddy \u003d new CardiBuddy(cardiBuddy);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        filteredFlashcards \u003d new FilteredList\u003c\u003e(this.cardiBuddy.getFlashcardList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        filteredDecks \u003d new FilteredList\u003c\u003e(this.cardiBuddy.getDeckList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this(new CardiBuddy(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return userPrefs.getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setCardiBuddyFilePath(Path cardiBuddyFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(cardiBuddyFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userPrefs.setCardiBuddyFilePath(cardiBuddyFilePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CardiBuddy \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setCardiBuddy(ReadOnlyCardiBuddy cardiBuddy) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardiBuddy.resetData(cardiBuddy);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ReadOnlyCardiBuddy getCardiBuddy() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return cardiBuddy;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return cardiBuddy.hasDeck(deck);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddy.removeDeck(target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void addDeck(Deck deck) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddy.addDeck(deck);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddy.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public boolean hasFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(flashcard);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return cardiBuddy.hasFlashcard(flashcard);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void deleteFlashcard(Flashcard target) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddy.removeFlashcard(target);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds Flashcard to a Deck."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param flashcard new card."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void addFlashcard(Flashcard flashcard) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddy.addFlashcard(flashcard);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        updateFilteredFlashcardList(PREDICATE_SHOW_ALL_FLASHCARDS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddy.setFlashcard(target, editedFlashcard);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Starts a test session // TODO see how to update the list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param deck the deck to be tested"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void testDeck(Deck deck) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Flashcard List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Deck} backed by the internal list of"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code versionedCardiBuddy}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return filteredDecks;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Flashcard} backed by the internal list of"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code versionedCardiBuddy}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e getFilteredFlashcardList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return filteredFlashcards;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void updateFilteredFlashcardList(Predicate\u003cFlashcard\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        filteredFlashcards.setPredicate(predicate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!(obj instanceof cardibuddy.model.ModelManager)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardibuddy.model.ModelManager other \u003d (cardibuddy.model.ModelManager) obj;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return cardiBuddy.equals(other.cardiBuddy)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 filteredDecks.equals(other.filteredDecks)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 filteredFlashcards.equals(other.filteredFlashcards);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 187,
      "airshhlay": 8,
      "phaebaez": 10
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/ReadOnlyCardiBuddy.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Unmodifiable view of a CardiBuddy object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public interface ReadOnlyCardiBuddy {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an unmodifiable view of the decks list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * This list will not contain any duplicate decks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cDeck\u003e getDeckList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an unmodifiable view of the flashcards list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * This list will not contain any duplicate flashcards."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    ObservableList\u003cFlashcard\u003e getFlashcardList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 24
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Path getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Path cardibuddyFilePath \u003d Paths.get(\"data\" , \"cardibuddy.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        setCardiBuddyFilePath(newUserPrefs.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return cardibuddyFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setCardiBuddyFilePath(Path cardibuddyFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(cardibuddyFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardibuddyFilePath \u003d cardibuddyFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!(other instanceof cardibuddy.model.UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardibuddy.model.UserPrefs o \u003d (cardibuddy.model.UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 cardibuddyFilePath.equals(o.cardibuddyFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Objects.hash(guiSettings, cardibuddyFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cardibuddyFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 14,
      "-": 73
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/Deck.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents a Deck in the cardibuddy application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Deck {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private List\u003cFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Deck(Title title, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(title, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public Deck() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        title \u003d new Title(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public List\u003cFlashcard\u003e getFlashcards() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.flashcards;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a Flashcard to a Deck."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param card"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return the set of Flashcards from the Deck."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public List\u003cFlashcard\u003e addFlashcard(Flashcard card) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        flashcards.add(card);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return Collections.unmodifiableList(flashcards);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if the Title of the Deck exists."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param otherDeck the deck being compared to."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if the Deck already exists and false otherwise."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean isSameDeck(Deck otherDeck) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (otherDeck \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return otherDeck !\u003d null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 otherDeck.getTitle().equals(getTitle());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Objects.hash(title, flashcards, tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 80,
      "phaebaez": 17
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/DeckContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Tests that a {@code Deck}\u0027s {@code Keyword} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeckContainsKeywordsPredicate implements Predicate\u003cDeck\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean test(Deck deck) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (checkAnd(keywords)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            anyMatch \u003d testAnd(deck, keywords);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            anyMatch \u003d testOr(deck, keywords);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if deck contains either of the keywords."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from SearchCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if deck\u0027s title or tag contains any of the keywords."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean testOr(Deck deck, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        anyMatch \u003d new ArrayList\u003c\u003e(keywords).stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(deck.getTitle().toString(), keyword));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (anyMatch) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return anyMatch;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            for (Tag t : deck.getTags()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                if (!anyMatch) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    anyMatch \u003d new ArrayList\u003c\u003e(keywords).stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(t.toString(), \"[\" + keyword + \"]\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return anyMatch;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if deck contains all of the keywords with \u0026."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from SearchCommand."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if deck\u0027s title or tag contains all of the keywords with \u0026."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean testAnd(Deck deck, List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        boolean anyMatch \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e filteredKeywords \u003d filterKeywords(keywords);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (List\u003cString\u003e keywordList : filteredKeywords) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            boolean prevMatch \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            for (String keyword : keywordList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                if (!anyMatch \u0026\u0026 prevMatch) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    prevMatch \u003d new ArrayList\u003c\u003e(deck.getTags()).stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                            .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.toString(), \"[\" + keyword + \"]\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (prevMatch) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                anyMatch \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return anyMatch;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Filters keywords to remove \u0026 symbol and to group keywords together as List objects."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords from SearchCommand."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return a List of Lists of keywords that are grouped accordingly."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private List\u003cList\u003cString\u003e\u003e filterKeywords(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        List\u003cList\u003cString\u003e\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (keywords.get(i).equals(\"\u0026\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                List\u003cString\u003e prev \u003d newList.get(i - 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                prev.add(keywords.get(i + 1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                List\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                temp.add(keywords.get(i));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                newList.add(temp);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if the symbol \u0026 is present in the SearchCommand keywords."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param keywords list of keywords to be searched"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if \u0026 is present"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean checkAnd(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (String keyword : keywords) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (keyword.equals(\"\u0026\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof DeckContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 keywords.equals(((DeckContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 125
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/Title.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.model.tag.Tag.VALIDATION_REGEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Deck Title class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String titleString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Title(String titleString) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.titleString \u003d titleString;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return titleString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return (other instanceof Title) \u0026\u0026 titleString.equals(other.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 39
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/UniqueDeckList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A list of decks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A deck is considered unique by comparing using {@code Deck#isSameDeck(Deck)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * decks uses Deck#isSameDeck(Deck) for equality so as to ensure that the deck being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * unique in terms of identity in the UniqueDeckList. However, the removal of a deck uses Deck#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * as to ensure that the deck with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @see Deck#isSameDeck(Deck)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class UniqueDeckList implements Iterable\u003cDeck\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if the list contains an equivalent deck as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean contains(Deck toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a deck to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void add(Deck toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.set(index, editedDeck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Removes the equivalent deck from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The deck must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void remove(Deck toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks(UniqueDeckList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the contents of this list with {@code decks}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(decks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!decksAreUnique(decks)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.setAll(decks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Iterator\u003cDeck\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof UniqueDeckList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if {@code decks} contains only unique decks."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean decksAreUnique(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            for (int j \u003d i + 1; j \u003c decks.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                if (decks.get(i).isSameDeck(decks.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 137
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/exceptions/DeckCannotBeCardException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Signals that the operation will result in the creation of an object that functions as a deck and card"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " *     simultanerously."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class DeckCannotBeCardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public DeckCannotBeCardException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public DeckCannotBeCardException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 15
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/exceptions/DeckNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Signals that the operation is unable to find the specified deck."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeckNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 6
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/exceptions/DuplicateDeckException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Signals that the operation will result in duplicate Decks (Decks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DuplicateDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DuplicateDeckException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(\"Operation would result in duplicate decks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 11
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/deck/exceptions/InvalidDeckException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Signals that the operation will result in the creation of a deck with a question and/or an answer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class InvalidDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public InvalidDeckException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "phaebaez": 13
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/Answer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.model.tag.Tag.VALIDATION_REGEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * API of Answer Component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public interface Answer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    String MESSAGE_CONSTRAINTS \u003d \"A question should have an answer.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    static boolean isValidAnswer(String test) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    boolean isValid(String test);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    boolean checkAnswer(String toCheck);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    String getCorrectAnswer();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 10,
      "haveaqiupill": 3,
      "phaebaez": 8
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/CardContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Tests that a {@code Flashcards}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class CardContainsKeywordsPredicate implements Predicate\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean test(Flashcard card) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(card.getQuestion().toString(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof CardContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 keywords.equals(((CardContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 8,
      "-": 22,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/Flashcard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " * Represents a Flashcard in CardiBuddy."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class Flashcard {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Question question;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private final Answer answer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Deck deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    //private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(); tags integration"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Flashcard(Deck deck, Question question, Answer answer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Deck getDeck() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.deck;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Question getQuestion() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Answer getAnswer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean checkAnswer(String toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return answer.checkAnswer(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if the flashcards are of the same identity."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param otherCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if they are the same and false otherwise."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean isSameFlashcard(Flashcard otherCard) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (otherCard \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return otherCard !\u003d null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 otherCard.getAnswer().equals(getAnswer());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!(other instanceof Flashcard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return ((Flashcard) other).getQuestion().equals(getQuestion());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return Objects.hash(question, answer);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        builder.append(\"Q:\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(getQuestion())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(\"\\nA:\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "                .append(getAnswer());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        //getTags().forEach(builder::append); tags integration"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 57,
      "haveaqiupill": 26
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/McqAnswer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * McqAnswer class."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class McqAnswer implements Answer {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"MCQ answers should be a single letter corresponding to answer.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private String correctAnswer; // should be \"a\" or \"b\" or \"c\" or ...."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private List\u003cString\u003e answers;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public McqAnswer(int correctIndex, List\u003cString\u003e answers) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.answers \u003d answers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!isValid(correctAnswer)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.correctAnswer \u003d correctAnswer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if test length is valid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if ..."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean isValid(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (test.length() !\u003d 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return getNumberForChar(test.charAt(0)) \u003c\u003d answers.size(); // makes sure test is within number of given answers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Javadocs to pass checkstyle."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param toCheck"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if answer is valid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean checkAnswer(String toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!isValid(toCheck)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return toCheck.equals(correctAnswer);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String getCorrectAnswer() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return correctAnswer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * Shows the list of possible answers"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     * @return a string of all possible answers"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        StringBuilder ans \u003d new StringBuilder(\"Answer one of the following:\\n\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        for (int i \u003d 0; i \u003c answers.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            ans.append(getCharForNumber(i) + \". \" + answers.get(i) + \"\\n\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return ans.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private int getNumberForChar(char c) { // a -\u003e 1; b -\u003e 2; c -\u003e 3; ..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return ((int) c) - 64;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private char getCharForNumber(int i) { // 1 -\u003e a; 2 -\u003e b; 3 -\u003e c, ..."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return i \u003e 0 \u0026\u0026 i \u003c 27 ? (char) (i + 64) : null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!(other instanceof McqAnswer)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        McqAnswer o \u003d (McqAnswer) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return answers.equals(o.answers) \u0026\u0026 correctAnswer.equals(o.correctAnswer);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 71,
      "haveaqiupill": 13
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/Question.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static cardibuddy.model.tag.Tag.VALIDATION_REGEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Question class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class Question {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Question should not be left blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private String questionString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public Question(String question) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        requireNonNull(question);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        checkArgument(isValidQuestion(question), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.questionString \u003d question;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static boolean isValidQuestion(String test) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return questionString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return (other instanceof Question) \u0026\u0026 questionString.equals(other.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return questionString.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 22,
      "haveaqiupill": 9,
      "phaebaez": 14
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/ShortAnswer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Short Answer class for Flashcard."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class ShortAnswer implements Answer {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Short answers should be strings.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private String correctAnswer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public ShortAnswer(String correctAnswer) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!isValid(correctAnswer)) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.correctAnswer \u003d correctAnswer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if given answer is a string and is valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if it is a string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean isValid(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return true; // as long as its a string its true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if answer matches stored answer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param toCheck"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if the string is equal."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean checkAnswer(String toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!isValid(toCheck)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return toCheck.equals(correctAnswer);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String getCorrectAnswer() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return correctAnswer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return correctAnswer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return (other instanceof Answer) \u0026\u0026 correctAnswer.equals(other.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 40,
      "haveaqiupill": 16,
      "phaebaez": 1
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/TfAnswer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * True False answer class."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "public class TfAnswer implements Answer {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"True / False answers should either be \\\"T\\\" or \\\"F\\\"\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    private String correctAnswer; // should be \"T\" or \"F\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public TfAnswer(String correctAnswer) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!isValid(correctAnswer)) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        this.correctAnswer \u003d correctAnswer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean isValid(String test) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return test.equals(\"T\") || test.equals(\"F\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Checks if answer is equals to stored answer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param toCheck"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return true if answer is equals."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean checkAnswer(String toCheck) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (!isValid(toCheck)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return toCheck.equals(correctAnswer);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String getCorrectAnswer() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return correctAnswer;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        return \"Answer \\\"T\\\" for True or \\\"F\\\" for False.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return (other instanceof Answer) \u0026\u0026 correctAnswer.equals(other.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "sigmund-c"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "sigmund-c": 42,
      "haveaqiupill": 11
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/UniqueFlashcardList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.exceptions.DuplicateFlashcardException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.exceptions.FlashcardNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A list of flashcards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A flashcard is considered unique by comparing using {@code Flashcard#isSameFlashcard(Flashcard)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * As such, adding and updating of flashcards uses Flashcard#isSameFlashcard(Flashcard)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * for equality so as to ensure that the flashcard being added or updated is unique in terms of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * identity in the UniqueFlashcardList. However, the removal of a flashcard uses Flashcard#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * as to ensure that the flashcard with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * @see Flashcard#isSameFlashcard(Flashcard) (Flashcard)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class UniqueFlashcardList implements Iterable\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final ObservableList\u003cFlashcard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean contains(Flashcard toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFlashcard);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void add(Flashcard toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedFlashcard}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The person identity of {@code editedFlashcard} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcard(Flashcard target, Flashcard editedFlashcard) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(target, editedFlashcard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!target.isSameFlashcard(editedFlashcard) \u0026\u0026 contains(editedFlashcard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.set(index, editedFlashcard);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void remove(Flashcard toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new FlashcardNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcards(UniqueFlashcardList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Replaces the contents of this list with {@code flashcards}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * {@code flashcards} must not contain duplicate flashcards."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void setFlashcards(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireAllNonNull(flashcards);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!flashcardsAreUnique(flashcards)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DuplicateFlashcardException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        internalList.setAll(flashcards);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public ObservableList\u003cFlashcard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Iterator\u003cFlashcard\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                || (other instanceof UniqueFlashcardList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueFlashcardList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns true if {@code flashcards} contains only unique flashcards."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private boolean flashcardsAreUnique(List\u003cFlashcard\u003e flashcards) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (int i \u003d 0; i \u003c flashcards.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            for (int j \u003d i + 1; j \u003c flashcards.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                if (flashcards.get(i).isSameFlashcard(flashcards.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 139
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/exceptions/DuplicateFlashcardException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Signals that the operation will result in duplicate Flashcards (Flashcards are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * the same question and type). Flashcards with the same question may not be duplicates if there types are different."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DuplicateFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DuplicateFlashcardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(\"Operation would result in duplicate flashcards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 9,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/exceptions/FlashcardNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Signals that the operation is unable to find the specified card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class FlashcardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 6
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/flashcard/exceptions/InvalidFlashcardException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "package cardibuddy.model.flashcard.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "phaebaez"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Signals that the operation will result in the creation of a flashcard with missing/wrong fields."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "public class InvalidFlashcardException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public InvalidFlashcardException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "phaebaez": 10
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Tags for Decks and Cards."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 50
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/Result.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Enumeration for Results for testing feature."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public enum Result {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    CORRECT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    WRONG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 6,
      "haveaqiupill": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/TestResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Test Result class. Stores the user\u0027s answer,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * number of tries user has made for that particular test and the Result (CORRECT or WRONG)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // test response strings"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String CORRECT_STRING \u003d \"Correct! The answer is %s.\\nType /n to go to the next question.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String WRONG_STRING \u003d \"Wrong! The answer is %s.\\nType /n to go to the next question.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String END_STRING \u003d \"Test complete!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Answer flashcardAnswer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //TODO: may remove this as the flashcard is already stored as"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //the key in the hashmap, so there is no need to store it again"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Answer userAnswer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Result result;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private int numTries;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for TestResult."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Automatically computes the result based on the given flashcardAnswer and the given userAnswer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param flashcardAnswer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param userAnswer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestResult(Answer flashcardAnswer, Answer userAnswer) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.flashcardAnswer \u003d flashcardAnswer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.userAnswer \u003d userAnswer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.numTries \u003d 1; // when first created, numTries \u003d 1 by default"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        result \u003d this.computeResult();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Result of test session."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @return Result object (idk what to write here :( )."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Result computeResult() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (flashcardAnswer.equals(userAnswer)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return Result.CORRECT;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return Result.WRONG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * A getter method for numTries"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the number of tries for this particular question"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public int getNumTries() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return numTries;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void setNumTries(int numTries) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.numTries \u003d numTries;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Result getResult() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Answer getUserAnswer() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return userAnswer;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public void setUserAnswer(Answer userAnswer) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.userAnswer \u003d userAnswer;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 60,
      "haveaqiupill": 15
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/TestSession.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Answer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Test Session class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * The test session works as follows:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 1. User initiates a test session by the command \"test [DECK INDEX]\"\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 2. TestParser parsers this command, and"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * TestSession object testSession is created with the given deck\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * (in future implementations, user can also set test settings,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * which can mean this class will be a parent class for different kinds of tests)\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 3. testSession calls nextFlashcard(), which returns the next flashcard in the queue.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 4. User inputs their answer to the question, and the parser parses it into an Answer object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * testSession calls test() and creates a new TestResult object that stores the user\u0027s Answer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * and the calculated Result by comparing the user\u0027s answer with the Flashcard\u0027s.\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 5. testSession returns a {@code TestResult} object.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 6. User presses next."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * (Note in future implementations, user can use force correct"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * to first mark the flashcard as correct, before going to the next question)\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * 7. testSession calls nextFlashcard(), and displays the next flashcard to the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestSession {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Deck deck;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Flashcard current;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // public Statistic statistics; // for recording statistics"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // space to set deck settings"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // hashmap to store the user\u0027s answer history"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private HashMap\u003cFlashcard, TestResult\u003e testResults;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // test queue"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private LinkedList\u003cFlashcard\u003e testQueue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructor for test session. Initiates the test session."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param deck the deck that is being tested"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestSession(Deck deck) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // initialise variables"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testQueue \u003d new LinkedList\u003c\u003e(deck.getFlashcards());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testResults \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.nextFlashcard(); // show the first flashcard in the deck"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testQueue.isEmpty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Moves on to the next flashcard in the queue, called when the user inputs the command for \u0027next\u0027.\u003cbr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Sets the @var current variable to this next flashcard.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Checks to see if the card should be added to the back of the queue again. (Prioritising)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the next flashcard"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Flashcard nextFlashcard() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        assert !testQueue.isEmpty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        /* check if the user got the current flashcard wrong,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        and add it to the back of the testQueue again */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (testResults.get(current).getResult() \u003d\u003d Result.WRONG) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            testQueue.addLast(current);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        current \u003d testQueue.removeFirst();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return current;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public LinkedList\u003cFlashcard\u003e getTestQueue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return testQueue;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Takes the user\u0027s answer for the current flashcard, and tests it against the current flashcard."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @param userAnswer Answer object provided by the user."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @return the TestResult of the test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public TestResult test(Answer userAnswer) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        TestResult result \u003d new TestResult(current.getAnswer(), userAnswer); // get the result of the test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (testResults.containsKey(current)) { // if already tested before, update numTries"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            TestResult prevResult \u003d testResults.get(current);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            int numTries \u003d prevResult.getNumTries();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            result.setNumTries(numTries + 1); // increase numTries by 1"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        testResults.put(current, result); // store the current flashcard and the result in the testResults hashmap"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return this \u003d\u003d other"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                || (other instanceof TestSession)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 this.deck.equals(((TestSession) other).deck)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 this.testResults.equals(((TestSession) other).testResults);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 94,
      "haveaqiupill": 11
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/TestSetting.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Enumeration for Test Session feature."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public enum TestSetting {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    SHUFFLE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    FORCE_CORRECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 6,
      "haveaqiupill": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/testsession/exceptions/TestException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.model.testsession.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Test Exception (add more details)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class TestException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 5,
      "haveaqiupill": 3
    }
  },
  {
    "path": "src/main/java/cardibuddy/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Deck[] getSampleDecks() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        tags.add(new Tag(\"Y2S1\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return new Deck[] {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            new Deck(new Title(\"CS2105\"), tags)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static ReadOnlyCardiBuddy getSampleCardiBuddy() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        CardiBuddy sampleCb \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (Deck sampleDeck : getSampleDecks()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            sampleCb.addDeck(sampleDeck);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return sampleCb;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 44
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/CardiBuddyStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents a storage for {@link cardibuddy.model.CardiBuddy}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public interface CardiBuddyStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Path getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Returns CardiBuddy data as a {@link ReadOnlyCardiBuddy}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @see #getCardiBuddyFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Saves the given {@link ReadOnlyCardiBuddy} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param cardiBuddy cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @see #saveCardiBuddy(ReadOnlyCardiBuddy)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 45
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonAdaptedDeck.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Jackson-friendly version of {@link Deck}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class JsonAdaptedDeck extends JsonAdaptedView {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Jackson-friendly version of {@link Deck}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deck\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public JsonAdaptedDeck(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                           @JsonProperty(\"flashcards\") List\u003cJsonAdaptedFlashcard\u003e flashcards,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003ccardibuddy.storage.JsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.flashcards.addAll(flashcards);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Converts a given {@code Deck} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public JsonAdaptedDeck(Deck source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.title \u003d source.getTitle().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcards.addAll(source.getFlashcards().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .map(cardibuddy.storage.JsonAdaptedFlashcard::new)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .map(cardibuddy.storage.JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public Deck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        final List\u003cTag\u003e deckTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        for (cardibuddy.storage.JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            deckTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        final List\u003cFlashcard\u003e deckFlashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        for (JsonAdaptedFlashcard flashcard : flashcards) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            deckFlashcards.add(flashcard.toModelType());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // TODO: add if conditions here to check formatting"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(deckTags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new Deck(modelTitle, modelTags); // TODO: to replace params with actual values"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 78,
      "haveaqiupill": 1,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonAdaptedFlashcard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.Question;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.ShortAnswer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Jackson-friendly version of {@link Flashcard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "class JsonAdaptedFlashcard extends JsonAdaptedView {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Flashcard\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final String deck;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final List\u003ccardibuddy.storage.JsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Constructs a {@code JsonAdaptedFlashcard} with the given flashcard details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public JsonAdaptedFlashcard(@JsonProperty(\"deck\") String deck, @JsonProperty(\"question\") String question,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                                @JsonProperty(\"answer\") String answer,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                                @JsonProperty(\"tagged\") List\u003ccardibuddy.storage.JsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Converts a given {@code Flashcard} into this class for Jackson use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public JsonAdaptedFlashcard(Flashcard source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        deck \u003d source.getDeck().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        question \u003d source.getQuestion().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        answer \u003d source.getAnswer().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        //tagged.addAll(source.getDeck().getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        //        .map(cardibuddy.storage.JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        //        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    // TODO: add tags for individual flashcards. Right now, flashcards use deck\u0027s tags."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Converts this Jackson-friendly adapted flashcard object into the model\u0027s {@code Flashcard} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted flashcard."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Flashcard toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        final List\u003cTag\u003e flashcardTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        for (cardibuddy.storage.JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            flashcardTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(flashcardTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Deck modelDeck \u003d new Deck();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        Question modelQuestion \u003d new Question(question);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        ShortAnswer modelAnswer \u003d new ShortAnswer(answer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        return new Flashcard(modelDeck, modelQuestion, modelAnswer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 51,
      "airshhlay": 7,
      "phaebaez": 16
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonAdaptedView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * A parent class for JsonAdaptedFlashcard and JsonAdaptedDeck, such that CardiBuddy can display either a list of"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "phaebaez"
        },
        "content": " * Flashcards or a list of Decks at any time, depending on the user request."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "// TODO: this method might not be implemented, and may be removed in future revisions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class JsonAdaptedView {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 9,
      "phaebaez": 2
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonCardiBuddyStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * A class to access CardiBuddy data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class JsonCardiBuddyStorage implements CardiBuddyStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCardiBuddyStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public JsonCardiBuddyStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return readCardiBuddy(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Similar to {@link #readCardiBuddy()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        Optional\u003ccardibuddy.storage.JsonSerializableCardiBuddy\u003e jsonCardiBuddy \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                filePath, cardibuddy.storage.JsonSerializableCardiBuddy.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!jsonCardiBuddy.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            return Optional.of(jsonCardiBuddy.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        saveCardiBuddy(cardiBuddy, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Similar to {@link #saveCardiBuddy(ReadOnlyCardiBuddy)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(cardiBuddy);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        JsonUtil.saveJsonFile(new cardibuddy.storage.JsonSerializableCardiBuddy(cardiBuddy), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 80
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonSerializableCardiBuddy.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.CardiBuddy;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * An Immutable CardiBuddy that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "@JsonRootName(value \u003d \"cardibuddy\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "class JsonSerializableCardiBuddy {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"Decks list contains duplicate deck(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FLASHCARDS \u003d \"Flashcards list contains duplicate flashcard(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final List\u003cJsonAdaptedDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    private final List\u003cJsonAdaptedFlashcard\u003e flashcards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Constructs a {@code JsonSerializableCardiBuddy} with the given flashcards."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "    public JsonSerializableCardiBuddy(@JsonProperty(\"decks\") List\u003cJsonAdaptedDeck\u003e decks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        this.decks.addAll(decks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Converts a given {@code ReadOnlyCardiBuddy} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCardiBuddy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public JsonSerializableCardiBuddy(ReadOnlyCardiBuddy source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        decks.addAll(source.getDeckList().stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            .map(JsonAdaptedDeck::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    * Converts this address book into the model\u0027s {@code CardiBuddy} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    * */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public CardiBuddy toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        CardiBuddy cardibuddy \u003d new CardiBuddy();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        for (JsonAdaptedDeck jsonAdaptedDeck : decks) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            Deck deck \u003d jsonAdaptedDeck.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            if (cardibuddy.hasDeck(deck)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "            cardibuddy.addDeck(deck);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return cardibuddy;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 46,
      "airshhlay": 5,
      "phaebaez": 11
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public interface Storage extends CardiBuddyStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Path getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 32
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyCardiBuddy;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Manages storage of CardiBuddy data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(cardibuddy.storage.StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private CardiBuddyStorage cardiBuddyStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public StorageManager(CardiBuddyStorage cardiBuddyStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.cardiBuddyStorage \u003d cardiBuddyStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CardiBuddy methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Path getCardiBuddyFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return cardiBuddyStorage.getCardiBuddyFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return readCardiBuddy(cardiBuddyStorage.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public Optional\u003cReadOnlyCardiBuddy\u003e readCardiBuddy(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return cardiBuddyStorage.readCardiBuddy(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        saveCardiBuddy(cardiBuddy, cardiBuddyStorage.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void saveCardiBuddy(ReadOnlyCardiBuddy cardiBuddy, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        cardiBuddyStorage.saveCardiBuddy(cardiBuddy, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 77
    }
  },
  {
    "path": "src/main/java/cardibuddy/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Represents a storage for {@link cardibuddy.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Saves the given {@link cardibuddy.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         * @see cardibuddy.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 6,
      "-": 72
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/DeckCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * An UI component that displays information of a {@code deck}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeckCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final String FXML \u003d \"DeckListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public final Deck deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckCard(Deck deck, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        title.setText(deck.getTitle().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deck.getTags().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!(other instanceof DeckCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        DeckCard card \u003d (DeckCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                \u0026\u0026 deck.equals(card.deck);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 13,
      "airshhlay": 1,
      "-": 51
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/DeckListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.deck.Deck;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " * Panel containing the list of decks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class DeckListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final String FXML \u003d \"DeckListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeckListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private ListView\u003cDeck\u003e deckListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckListPanel(ObservableList\u003cDeck\u003e deckList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckListView.setItems(deckList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckListView.setCellFactory(listView -\u003e new DeckListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code deck} using a {@code deckCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    class DeckListViewCell extends ListCell\u003cDeck\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        protected void updateItem(Deck deck, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            super.updateItem(deck, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            if (empty || deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "                setGraphic(new DeckCard(deck, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 47
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/FlashcardCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * An UI component that displays information of a {@code Flashcard}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class FlashcardCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public final Flashcard flashcard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label question;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label answer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public FlashcardCard(Flashcard flashcard, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        this.flashcard \u003d flashcard;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        question.setText(flashcard.getQuestion().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // TODO tags for flashcards"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        /* flashcard.getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName))); */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        if (!(other instanceof FlashcardCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        FlashcardCard card \u003d (FlashcardCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u0026\u0026 flashcard.equals(card.flashcard);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 66
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/FlashcardListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import cardibuddy.model.flashcard.Flashcard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " * Panel containing the list of flashcards."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "public class FlashcardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private static final String FXML \u003d \"FlashcardListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FlashcardListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    private ListView\u003cFlashcard\u003e flashcardListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    public FlashcardListPanel(ObservableList\u003cFlashcard\u003e flashcardList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcardListView.setItems(flashcardList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        flashcardListView.setCellFactory(listView -\u003e new FlashcardListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Flashcard} using a {@code FlashcardCard}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    class FlashcardListViewCell extends ListCell\u003cFlashcard\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        protected void updateItem(Flashcard flashcard, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            super.updateItem(flashcard, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            if (empty || flashcard \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                setGraphic(new FlashcardCard(flashcard, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 45
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 100
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.exceptions.DeckCannotBeCardException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.deck.exceptions.InvalidDeckException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "import cardibuddy.model.flashcard.exceptions.InvalidFlashcardException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private DeckListPanel deckListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private StackPane deckListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckListPanel \u003d new DeckListPanel(logic.getFilteredDeckList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        deckListPanelPlaceholder.getChildren().add(deckListPanel.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getCardiBuddyFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * Opens the test window."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public void handleTest() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    public DeckListPanel getdeckListPanel() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        return deckListPanel;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * @see cardibuddy.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "        } catch (CommandException | ParseException | DeckCannotBeCardException | InvalidDeckException"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "phaebaez"
        },
        "content": "                | InvalidFlashcardException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 28,
      "-": 177,
      "phaebaez": 5
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/cb_logo_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 9,
      "-": 78
    }
  },
  {
    "path": "src/main/java/cardibuddy/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/DeckListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cLabel fx:id\u003d\"title\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/DeckListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "  \u003cListView fx:id\u003d\"deckListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003cLabel fx:id\u003d\"question\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "                \u003cLabel fx:id\u003d\"answer\" text\u003d\"\\$first\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "           \u003c!-- \u003cFlowPane fx:id\u003d\"tags\" /\u003e --\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "airshhlay": 35
    }
  },
  {
    "path": "src/main/resources/view/FlashcardListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "airshhlay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "    \u003cListView fx:id\u003d\"flashcardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "airshhlay": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "         title\u003d\"CardiBuddy\" minWidth\u003d\"450\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    \u003cImage url\u003d\"@/images/cb_logo_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Test\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"testMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleTest\" text\u003d\"Start\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        \u003cVBox fx:id\u003d\"deckList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "          \u003cStackPane fx:id\u003d\"deckListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "        \u003cVBox fx:id\u003d\"flashcardList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "airshhlay"
        },
        "content": "          \u003cStackPane fx:id\u003d\"flashcardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 7,
      "airshhlay": 2,
      "-": 61
    }
  },
  {
    "path": "src/test/java/cardibuddy/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 57
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 134
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/cb_logo_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/cardibuddy/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/cardibuddy/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.ModelManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "//Empty test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 12
    }
  },
  {
    "path": "src/test/java/cardibuddy/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCardiBuddyFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/person/FlashcardTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "public class FlashcardTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 6
    }
  },
  {
    "path": "src/test/java/cardibuddy/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/cardibuddy/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    assertEquals(expected, actual);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "        userPrefs.setCardiBuddyFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 18,
      "-": 104
    }
  },
  {
    "path": "src/test/java/cardibuddy/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/cardibuddy/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/cardibuddy/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "package cardibuddy.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import static cardibuddy.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "import cardibuddy.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //    assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "haveaqiupill"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at link."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "haveaqiupill": 15,
      "-": 100
    }
  }
]
