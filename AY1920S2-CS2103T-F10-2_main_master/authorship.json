[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        \u0027site-name\u0027: \u0027My Internship Diary\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F10-2/main\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "gerhean": 11,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.storage.InternshipDiaryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.storage.JsonInternshipDiaryStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing InternshipDiary ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiaryStorage internshipDiaryStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                new JsonInternshipDiaryStorage(userPrefs.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        storage \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s internship diary and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * The data from the sample internship diary will be used instead if {@code storage}\u0027s internship diary is not"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * found, or an empty internship diary will be used instead if errors occur when reading {@code storage}\u0027s"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * internship diary."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Optional\u003cReadOnlyInternshipDiary\u003e internshipDiaryOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ReadOnlyInternshipDiary initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            internshipDiaryOptional \u003d storage.readInternshipDiary();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (!internshipDiaryOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample InternshipDiary\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            initialData \u003d internshipDiaryOptional.orElseGet(SampleDataUtil::getSampleInternshipDiary);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty InternshipDiary\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            initialData \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty InternshipDiary\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            initialData \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty InternshipDiary\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        logger.info(\"Starting InternshipDiary \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping InternshipDiary ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 7,
      "wxwxwxwx9": 1,
      "gerhean": 18,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \"The internship application index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_INTERNSHIP_LISTED_OVERVIEW \u003d \"%1$d internship application listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \"The interview index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String IS_ARCHIVED \u003d \"isArchived\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 5,
      "wxwxwxwx9": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/interviewcode/InterviewCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.commons.core.interviewcode;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an enumeration of interview command code. This code should be either \"add\", \"edit\", or \"delete\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * which will be used in interview command to manipulate interviews in an {@code Internship Application}."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": " *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * InterviewCode should come right after {@code Index} when inputting interview command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public enum InterviewCode {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    LIST, ADD, EDIT, DELETE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Interview should have an add, edit or delete after index.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true is the given {@code code} is a valid {@code InterviewCode}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static boolean isValidCode(String code) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String upperCaseCode \u003d code.toUpperCase();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return upperCaseCode.equals(\"ADD\") || upperCaseCode.equals(\"EDIT\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                || upperCaseCode.equals(\"DELETE\") || upperCaseCode.equals(\"LIST\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/BooleanUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Helper functions for handling boolean(s)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class BooleanUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String INVALID_BOOLEAN \u003d \"Please use a valid boolean!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns true if the {@code str} is a valid boolean."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param str"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static boolean isValidBoolean(String str) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        str \u003d str.toLowerCase();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return str.equals(\"true\") || str.equals(\"false\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the InternshipDiary."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @see seedu.address.model.Model#getInternshipDiary()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    ReadOnlyInternshipDiary getInternshipDiary();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of internship applications */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the user prefs\u0027 internship diary file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    Path getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 9,
      "wxwxwxwx9": 4,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.parser.InternshipDiaryParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final InternshipDiaryParser internshipDiaryParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipDiaryParser \u003d new InternshipDiaryParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Command command \u003d internshipDiaryParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            storage.saveInternshipDiary(model.getInternshipDiary());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ReadOnlyInternshipDiary getInternshipDiary() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return model.getInternshipDiary();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return model.getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return model.getStatistics();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 12,
      "wxwxwxwx9": 7,
      "gerhean": 1,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Adds an internship application to the internship diary."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \": Adds an internship application to the internship diary.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_COMPANY + \"COMPANY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_ROLE + \"ROLE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_DATE + \"APPLICATION DATE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_STATUS + \"STATUS \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_COMPANY + \"Google \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_ROLE + \"Software Engineer \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_ADDRESS + \"123 Kent Ridge Road \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_PHONE + \"67654321 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_EMAIL + \"example@google.com \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            + PREFIX_DATE + \"10 01 2020 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_PRIORITY + \"5 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            + PREFIX_STATUS + \"APPLIED\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New internship application added: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \"This internship application already exists in the internship diary\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final InternshipApplication toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates an AddCommand to add the specified {@code internshipApplication}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public AddCommand(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        toAdd \u003d internshipApplication;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (model.hasInternshipApplication(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.addInternshipApplication(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 28,
      "FeliciaTay": 3,
      "gerhean": 6,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchivalCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ARCHIVED_INTERNSHIPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Lists all internship applications from the archival to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ArchivalCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archival\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all archived internship applications\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.updateFilteredInternshipApplicationList(PREDICATE_SHOW_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ArchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Archives an internship application identified using its displayed index from the internship diary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ArchiveCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"archive\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            + \": Archives the internship application \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            + \"identified by the index number used in the displayed internship list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_ARCHIVE_INTERNSHIP_SUCCESS \u003d \"Archived Internship Application: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_ALREADY_ARCHIVED \u003d \"Internship Application already archived\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public ArchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipToArchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (internshipToArchive.isArchived()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_ARCHIVED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.archiveInternshipApplication(internshipToArchive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ARCHIVE_INTERNSHIP_SUCCESS, internshipToArchive));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                || (other instanceof ArchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ArchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Clears the internship diary."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Internship diary has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.setInternshipDiary(new InternshipDiary());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 4,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /** Statistics should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final boolean showStatistics;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean showStatistics, boolean exit) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.showStatistics \u003d showStatistics;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean isShowStatistics() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return showStatistics;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u0026\u0026 showStatistics \u003d\u003d otherCommandResult.showStatistics"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, showStatistics, exit);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 12,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Deletes an internship application identified using it\u0027s displayed index from the internship diary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \": Deletes the internship application \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"identified by the index number used in the displayed internship list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DELETE_INTERNSHIP_SUCCESS \u003d \"Deleted Internship Application: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.deleteInternshipApplication(internshipToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_INTERNSHIP_SUCCESS, internshipToDelete));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 10,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Edits the details of an existing internship application in the internship diary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \": Edits the details of the internship application identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"by the index number used in the displayed internship application list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_COMPANY + \"COMPANY] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_ROLE + \"ROLE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"APPLICATION DATE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_STATUS + \"STATUS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"\\nExample: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_EDIT_INTERNSHIP_SUCCESS \u003d \"Edited Internship Application: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \"This internship application already exists in the internship diary.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final EditInternshipDescriptor editInternshipDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param index of the internship application in the filtered internship application list to edit"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param editInternshipDescriptor details to edit the internship application with"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditCommand(Index index, EditInternshipDescriptor editInternshipDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(editInternshipDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.editInternshipDescriptor \u003d new EditInternshipDescriptor(editInternshipDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication editedInternship \u003d createEditedInternship(internshipToEdit, editInternshipDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!internshipToEdit.isSameInternshipApplication(editedInternship)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 model.hasInternshipApplication(editedInternship)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.setInternshipApplication(internshipToEdit, editedInternship);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_INTERNSHIP_SUCCESS, editedInternship));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates and returns a {@code InternshipApplication} with the details of {@code internshipToEdit}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * edited with {@code editInternshipDescriptor}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static InternshipApplication createEditedInternship(InternshipApplication internshipToEdit,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                                                EditInternshipDescriptor editInternshipDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assert internshipToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Company updatedCompany \u003d editInternshipDescriptor.getCompany().orElse(internshipToEdit.getCompany());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Role updatedRole \u003d editInternshipDescriptor.getRole().orElse(internshipToEdit.getRole());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Address updatedAddress \u003d editInternshipDescriptor.getAddress().orElse(internshipToEdit.getAddress());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Phone updatedPhone \u003d editInternshipDescriptor.getPhone().orElse(internshipToEdit.getPhone());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Email updatedEmail \u003d editInternshipDescriptor.getEmail().orElse(internshipToEdit.getEmail());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDate updatedDate \u003d editInternshipDescriptor.getDate().orElse(internshipToEdit.getApplicationDate());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Priority updatedPriority \u003d editInternshipDescriptor.getPriority().orElse(internshipToEdit.getPriority());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Status updatedStatus \u003d editInternshipDescriptor.getStatus().orElse(internshipToEdit.getStatus());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Boolean isArchived \u003d internshipToEdit.isArchived();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new InternshipApplication(updatedCompany, updatedRole, updatedAddress, updatedPhone,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                updatedEmail, updatedDate, updatedPriority, updatedStatus, isArchived);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 editInternshipDescriptor.equals(e.editInternshipDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Stores the details to edit the internship application with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * corresponding field value of the internship application."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static class EditInternshipDescriptor {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Company company;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Role role;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        private ApplicationDate date;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Status status;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public EditInternshipDescriptor() {}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public EditInternshipDescriptor(EditInternshipDescriptor toCopy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setCompany(toCopy.company);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setRole(toCopy.role);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setStatus(toCopy.status);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return CollectionUtil.isAnyNonNull("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    company, role, address, phone, email, date, priority, status"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            );"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setCompany(Company company) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.company \u003d company;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cCompany\u003e getCompany() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(company);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setRole(Role role) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.role \u003d role;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cRole\u003e getRole() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(role);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        public void setDate(ApplicationDate date) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        public Optional\u003cApplicationDate\u003e getDate() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setStatus(Status status) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.status \u003d status;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cStatus\u003e getStatus() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(status);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (!(other instanceof EditInternshipDescriptor)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            EditInternshipDescriptor e \u003d (EditInternshipDescriptor) other;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return getCompany().equals(e.getCompany())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u0026\u0026 getRole().equals(e.getRole())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u0026\u0026 getStatus().equals(e.getStatus());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 111,
      "wxwxwxwx9": 6,
      "gerhean": 1,
      "-": 143,
      "ongch00": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Internship Diary as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 1,
      "wxwxwxwx9": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Finds and lists all internship applications in internship diary"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * whose fields contains any of the field\u0027s argument keywords."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Email and Phone matching is based on whether there is a substring that matches."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \": Finds all internship applications whose fields contain all of \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"the specified field keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"[KEYWORDS] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"[\" + PREFIX_COMPANY + \"COMPANY] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"[\" + PREFIX_ROLE + \"ROLE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"[\" + PREFIX_STATUS + \"STATUS] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" c/Google r/Engineer\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final boolean isPreamble;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public FindCommand(List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates, boolean isPreamble) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.predicates \u003d predicates;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.isPreamble \u003d isPreamble;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e predicate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (isPreamble) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicate \u003d predicates.stream().reduce(x -\u003e false, Predicate::or);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicate \u003d predicates.stream().reduce(x -\u003e true, Predicate::and);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.updateFilteredInternshipApplicationList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        model.getFilteredInternshipApplicationList().size()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 predicates.equals(((FindCommand) other).predicates)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 isPreamble \u003d\u003d ((FindCommand) other).isPreamble); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 5,
      "-": 30,
      "ongch00": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/InterviewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an abstract interview command that modifies interviews in an Internship Application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public abstract class InterviewCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"interview\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \": Modifies Interviews in an Internship Application by using an index to specify application followed\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"by a command word to specify action to be taken.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"COMMAND_CODE (must be either add, edit, delete, or list) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"other parameters as defined by the command code. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"type help or interview INDEX COMMAND_CODE to find out the respective required parameters.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    protected InternshipApplication getInternshipApplication(Model model, Index index) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_NOT_ARCHIVED_INTERNSHIPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Lists all internship applications in the internship diary to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all internship applications\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.updateFilteredInternshipApplicationList(PREDICATE_SHOW_NOT_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 2,
      "wxwxwxwx9": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReminderCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.logic.comparator.ApplicationDateThenInterviewDateComparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.ApplicationDateDuePredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.InterviewDateDuePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Lists all internship applications in the internship diary that are due or have interview dates in 7 days."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reminder\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows applications that have are due or have interview\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            + \"dates in 7 days.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed applications are due or have interviews in 7 days.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final ApplicationDateDuePredicate appDatePredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final InterviewDateDuePredicate interviewDatePredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public ReminderCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.appDatePredicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.interviewDatePredicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        predicates.add(appDatePredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        predicates.add(interviewDatePredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e predicate \u003d predicates.stream().reduce(x -\u003e true, Predicate::or);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        model.updateFilteredInternshipApplicationList(appDatePredicate); //todo: to update after interviews can be added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        model.updateFilteredInternshipApplicationList(new ApplicationDateThenInterviewDateComparator());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                || (other instanceof ReminderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u0026\u0026 appDatePredicate.equals(((ReminderCommand) other).appDatePredicate)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u0026\u0026 interviewDatePredicate.equals(((ReminderCommand) other).interviewDatePredicate)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 53,
      "ongch00": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Finds and lists all internship applications in internship diary"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * whose company name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \": Sorts current list by given parameter.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"Available sorts: Company: \" + PREFIX_COMPANY + \", \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"Date: \" + PREFIX_DATE + \", \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"Priority: \" + PREFIX_PRIORITY + \", \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"Status: \" + PREFIX_STATUS + \".\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_COMPANY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final Comparator\u003cInternshipApplication\u003e comparator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public SortCommand(Comparator\u003cInternshipApplication\u003e comparator) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.comparator \u003d comparator;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        model.updateFilteredInternshipApplicationList(comparator);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                String.format(Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        model.getFilteredInternshipApplicationList().size()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                \u0026\u0026 comparator.equals(((SortCommand) other).comparator)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatisticsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Displays statistics window UI to users."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows internship application statistics.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String SHOWING_STATISTICS_MESSAGE \u003d \"Opened statistics window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(SHOWING_STATISTICS_MESSAGE, false, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UnarchiveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Unarchives an internship application identified using its displayed index from the internship diary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class UnarchiveCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"unarchive\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            + \": Unarchives the internship application \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            + \"identified by the index number used in the displayed internship list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_UNARCHIVE_INTERNSHIP_SUCCESS \u003d \"Unarchived Internship Application: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String MESSAGE_ALREADY_UNARCHIVED \u003d \"Internship Application already unarchived\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public UnarchiveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e lastShownList \u003d model.getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipToUnarchive \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (!internshipToUnarchive.isArchived()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_UNARCHIVED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.unarchiveInternshipApplication(internshipToUnarchive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UNARCHIVE_INTERNSHIP_SUCCESS, internshipToUnarchive));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                || (other instanceof UnarchiveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((UnarchiveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/interviewsubcommands/InterviewAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Adds an interview into an Internship Application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewAddCommand extends InterviewCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Interview added: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEW \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \"This interview already exists in the internship application: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Adds an interview into an Internship Application.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) add \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_IS_ONLINE + \"is it an online interview (true/false)] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS (optional if online interview] \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 add \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_IS_ONLINE + \"false \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_ADDRESS + \"123 road \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_DATE + \"01 02 2020 \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final Interview toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewAddCommand(Index index, Interview interview) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(interview);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        toAdd \u003d interview;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToModify \u003d super.getInternshipApplication(model, index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (internshipToModify.hasInterview(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_INTERVIEW, internshipToModify));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipToModify.addInterview(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                || (other instanceof InterviewAddCommand"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 toAdd.equals(((InterviewAddCommand) other).toAdd)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 index.equals(((InterviewAddCommand) other).index));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/interviewsubcommands/InterviewDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Deletes an interview from an Internship Application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewDeleteCommand extends InterviewCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted Interview: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Deletes an Interview from an Internship Application \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"by using an index of the internship application, followed by an index of interview to be deleted.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"Parameters: INDEX(index of internship application) delete INDEX (index of interview to be deleted). \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 delete 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Index internshipIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Index interviewIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewDeleteCommand(Index internshipIndex, Index interviewIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(interviewIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.internshipIndex \u003d internshipIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewIndex \u003d interviewIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToModify \u003d super.getInternshipApplication(model, internshipIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ArrayList\u003cInterview\u003e interviews \u003d internshipToModify.getInterviews();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviewIndex.getZeroBased() \u003e\u003d interviews.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interviewToDelete \u003d interviews.get(interviewIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews.remove(interviewIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, interviewToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                || (other instanceof InterviewDeleteCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 interviewIndex.equals(((InterviewDeleteCommand) other).interviewIndex)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 internshipIndex.equals(((InterviewDeleteCommand) other).internshipIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/interviewsubcommands/InterviewEditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Edits the details of an existing interview in an Internship Application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewEditCommand extends InterviewCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"Edits an Interview from an Internship Application \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"by using an index of the internship application, followed by an index of interview to be edited.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"Parameters: INDEX(index of internship application) edit INDEX (index of interview to be edited) \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_IS_ONLINE + \"is it an online interview (true/false)] \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS (optional if online interview] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 edit \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_IS_ONLINE + \"false \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_ADDRESS + \"123 road \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            + PREFIX_DATE + \"01 02 2020 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_EDIT_INTERVIEW_SUCCESS \u003d \"Edited Interview: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEW \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \"This interview already exists in the following internship application: %1$s.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final Index internshipIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final Index interviewIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final EditInterviewDescriptor editInterviewDescriptor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param internshipIndex index of the internship application to modify the interviews in."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param interviewIndex index of the interview under the internship application above."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param editInterviewDescriptor details to edit the interview with."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewEditCommand(Index internshipIndex,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                Index interviewIndex, EditInterviewDescriptor editInterviewDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(interviewIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(editInterviewDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.internshipIndex \u003d internshipIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewIndex \u003d interviewIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.editInterviewDescriptor \u003d editInterviewDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToEdit \u003d super.getInternshipApplication(model, internshipIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInterview\u003e lastShownList \u003d internshipToEdit.getInterviews();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviewIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interviewToEdit \u003d lastShownList.get(interviewIndex.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview editedInterview \u003d createEditedInterview(interviewToEdit, editInterviewDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (internshipToEdit.hasInterview(editedInterview)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_INTERVIEW, internshipToEdit));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        lastShownList.set(interviewIndex.getZeroBased(), editedInterview);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // todo: update display"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_INTERVIEW_SUCCESS, editedInterview));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates and returns a {@code InternshipApplication} with the details of {@code internshipToEdit}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * edited with {@code editInternshipDescriptor}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static Interview createEditedInterview(Interview interviewToEdit,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                                   EditInterviewDescriptor editInterviewDescriptor) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assert interviewToEdit !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Address updatedAddress \u003d editInterviewDescriptor.getAddress().orElse(interviewToEdit.getInterviewAddress());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ApplicationDate updatedDate \u003d editInterviewDescriptor.getInterviewDate()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .orElse(interviewToEdit.getDate());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        boolean updatedIsOnline \u003d editInterviewDescriptor.getIsOnline().orElse(interviewToEdit.isOnline);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Interview(updatedIsOnline, updatedDate, updatedAddress);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!(other instanceof InterviewEditCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand e \u003d (InterviewEditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviewIndex.equals(e.interviewIndex)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 internshipIndex.equals(e.internshipIndex)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 editInterviewDescriptor.equals(e.editInterviewDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Stores the details to edit the interview with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * corresponding field value of the interview."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static class EditInterviewDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Boolean isOnline;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private ApplicationDate date;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public EditInterviewDescriptor() {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public EditInterviewDescriptor(EditInterviewDescriptor toCopy) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setOnline(toCopy.isOnline);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return CollectionUtil.isAnyNonNull(address, date, isOnline);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setDate(ApplicationDate date) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cApplicationDate\u003e getInterviewDate() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setOnline(boolean isOnline) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.isOnline \u003d isOnline;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Optional\u003cBoolean\u003e getIsOnline() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.ofNullable(isOnline);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (!(other instanceof EditInterviewDescriptor)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            EditInterviewDescriptor e \u003d (EditInterviewDescriptor) other;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u0026\u0026 getInterviewDate().equals(e.getInterviewDate())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u0026\u0026 getIsOnline().equals(e.getIsOnline());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 191
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/interviewsubcommands/InterviewListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Lists all interviews inside an Internship Application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewListCommand extends InterviewCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"listed all interviews in %1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewListCommand(Index index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipToList \u003d super.getInternshipApplication(model, index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // Todo: change interviews into observable list and make it show here."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, internshipToList));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                || (other instanceof InterviewListCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 index.equals(((InterviewListCommand) other).index));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparator/ApplicationDateComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class ApplicationDateComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internship1.getApplicationDate().compareTo(internship2.getApplicationDate());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // equal only if todayDate is same"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other instanceof ApplicationDateComparator;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparator/ApplicationDateThenInterviewDateComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Comparator for sorting InternshipApplication by date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class ApplicationDateThenInterviewDateComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final LocalDate todayDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public ApplicationDateThenInterviewDateComparator() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        todayDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate dateOfInternship1 \u003d internship1.getApplicationDate().fullApplicationDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate dateOfInternship2 \u003d internship2.getApplicationDate().fullApplicationDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (dateOfInternship1.compareTo(dateOfInternship2) \u003d\u003d 0) { // two applications have same application date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            Optional\u003cInterview\u003e earliestInterviewForInternship1 \u003d internship1.getEarliestInterview(todayDate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            Optional\u003cInterview\u003e earliestInterviewForInternship2 \u003d internship2.getEarliestInterview(todayDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            if (earliestInterviewForInternship1.isPresent() \u0026\u0026 earliestInterviewForInternship2.isPresent()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                LocalDate earliestInterviewDtForInternship1 \u003d earliestInterviewForInternship1.get().getInterviewDate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                LocalDate earliestInterviewDtForInternship2 \u003d earliestInterviewForInternship2.get().getInterviewDate();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                return earliestInterviewDtForInternship1.compareTo(earliestInterviewDtForInternship2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return dateOfInternship1.compareTo(dateOfInternship2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return dateOfInternship1.compareTo(dateOfInternship2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other instanceof ApplicationDateThenInterviewDateComparator;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparator/CompanyComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by companies in lexicographical order."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class CompanyComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internship1.getCompany().compareTo(internship2.getCompany());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other instanceof CompanyComparator; // All CompanyComparator are the same."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparator/PriorityComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by Priority."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class PriorityComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internship1.getPriority().compareTo(internship2.getPriority());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other instanceof PriorityComparator; // All PriorityComparator are the same."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/comparator/StatusComparator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by Status."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class StatusComparator implements Comparator\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compare(InternshipApplication internship1, InternshipApplication internship2) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internship1.getStatus().compareTo(internship2.getStatus());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other instanceof StatusComparator; // All StatusComparator are the same."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_STATUS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_DATE, PREFIX_STATUS)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Company company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Role role \u003d ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).orElse(\"\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).orElse(\"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).orElse(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDate date \u003d ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).orElse(\"5\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Status status \u003d ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InternshipApplication(company, role, address, phone, email, date, priority, status);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new AddCommand(internshipApplication);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 21,
      "wxwxwxwx9": 1,
      "gerhean": 5,
      "-": 41,
      "ongch00": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArchiveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Parses input arguments and creates a new ArchiveCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ArchiveCommandParser implements Parser\u003cArchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ArchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * and returns a ArchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public ArchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new ArchiveCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ArchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_COMPANY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_IS_ONLINE \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 9,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_STATUS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor editInternshipDescriptor \u003d new EditCommand.EditInternshipDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setCompany(ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setRole(ParserUtil.parseRole(argMultimap.getValue(PREFIX_ROLE).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            editInternshipDescriptor.setDate(ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInternshipDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!editInternshipDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new EditCommand(index, editInternshipDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 26,
      "-": 48,
      "ongch00": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.ApplicationDateIsDatePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.PhoneContainsNumbersPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.PriorityContainsNumbersPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.RoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_STATUS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!areAnyPrefixesPresent(argMultimap, PREFIX_COMPANY, PREFIX_ROLE, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE, PREFIX_PRIORITY, PREFIX_STATUS)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cPredicate\u003cInternshipApplication\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String[] preamble \u003d argMultimap.getPreamble().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new CompanyContainsKeywordsPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new RoleContainsKeywordsPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new AddressContainsKeywordsPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new PhoneContainsNumbersPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new EmailContainsKeywordsPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new PriorityContainsNumbersPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new StatusContainsKeywordsPredicate(Arrays.asList(preamble)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return new FindCommand(predicates, true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String[] companyKeywords \u003d argMultimap.getValue(PREFIX_COMPANY).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new CompanyContainsKeywordsPredicate(Arrays.asList(companyKeywords)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ROLE).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String[] roleKeywords \u003d argMultimap.getValue(PREFIX_ROLE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new RoleContainsKeywordsPredicate(Arrays.asList(roleKeywords)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String[] addressKeywords \u003d argMultimap.getValue(PREFIX_ADDRESS).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new AddressContainsKeywordsPredicate(Arrays.asList(addressKeywords)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String[] phoneNumbers \u003d argMultimap.getValue(PREFIX_PHONE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new PhoneContainsNumbersPredicate(Arrays.asList(phoneNumbers)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String[] emailKeywords \u003d argMultimap.getValue(PREFIX_EMAIL).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new EmailContainsKeywordsPredicate(Arrays.asList(emailKeywords)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String date \u003d argMultimap.getValue(PREFIX_DATE).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new ApplicationDateIsDatePredicate(ParserUtil.parseApplicationDate(date)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                    .fullApplicationDate));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String[] priorityNumbers \u003d argMultimap.getValue(PREFIX_PRIORITY).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new PriorityContainsNumbersPredicate(Arrays.asList(priorityNumbers)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            String[] statusKeywords \u003d argMultimap.getValue(PREFIX_STATUS).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            predicates.add(new StatusContainsKeywordsPredicate(Arrays.asList(statusKeywords)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return new FindCommand(predicates, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if not all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "ongch00": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InternshipDiaryParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.ArchivalCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InternshipDiaryParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case InterviewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new InterviewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new StatisticsCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case ArchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new ArchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case UnarchiveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new UnarchiveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        case ArchivalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new ArchivalCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        case ReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return new ReminderCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 5,
      "FeliciaTay": 5,
      "wxwxwxwx9": 16,
      "gerhean": 4,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InterviewCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.interviewcode.InterviewCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewDeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Parses input arguments and creates a new Interview Command object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewCommandParser implements Parser\u003cInterviewCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ArgumentMultimap argumentMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_ADDRESS, PREFIX_IS_ONLINE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewCode interviewCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] indexAndCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            indexAndCode \u003d ParserUtil.parseInterviewPreamble(argumentMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            index \u003d ParserUtil.parseIndex(indexAndCode[0]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            interviewCode \u003d ParserUtil.parseInterviewCode(indexAndCode[1]);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        switch (interviewCode) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case ADD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return parseAdd(index, argumentMultimap);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (indexAndCode.length !\u003d 3) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return parseDelete(index, indexAndCode[2]);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (indexAndCode.length !\u003d 3) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return parseEdit(index, indexAndCode[2], argumentMultimap);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new InterviewListCommand(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(\"invalid\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses the add version of interview command. Returns an InterviewAddCommand object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewCommand parseAdd(Index index, ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_IS_ONLINE, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        boolean isOnline \u003d Boolean.parseBoolean(argMultimap.getValue(PREFIX_IS_ONLINE).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!isOnline \u0026\u0026 !argMultimap.getValue(PREFIX_IS_ONLINE).get().toUpperCase().equals(\"FALSE\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ApplicationDate date \u003d ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new Interview(isOnline, date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // if not an online interview but address prefix is missing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!isOnline \u0026\u0026 !arePrefixesPresent(argMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!isOnline) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            interview \u003d new Interview(false, date, address);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new InterviewAddCommand(index, interview);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses the delete version of interview command. Returns an InterviewDeleteCommand object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewCommand parseDelete(Index internshipIndex, String interviewIndex) throws ParseException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            index \u003d ParserUtil.parseIndex(interviewIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new InterviewDeleteCommand(internshipIndex, index);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses the edit version of interview command. Returns an InterviewEditCommand object."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewCommand parseEdit(Index internshipIndex,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                       String interviewIndex, ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            index \u003d ParserUtil.parseIndex(interviewIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor editInterviewDescriptor \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewEditCommand.EditInterviewDescriptor();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInterviewDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInterviewDescriptor.setDate(ParserUtil.parseApplicationDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IS_ONLINE).isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (!BooleanUtil.isValidBoolean(argMultimap.getValue(PREFIX_IS_ONLINE).get())) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new ParseException(BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            editInterviewDescriptor.setOnline(Boolean.parseBoolean(argMultimap.getValue(PREFIX_IS_ONLINE).get()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!editInterviewDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(InterviewEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new InterviewEditCommand(internshipIndex, index, editInterviewDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.interviewcode.InterviewCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_INVALID_PREAMBLE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \"Index followed by Command Code of add, edit, or delete is expected\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses a {@code String company} into an {@code Company}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code company} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static Company parseCompany(String company) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedCompany \u003d company.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!Company.isValidCompany(trimmedCompany)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Company(trimmedCompany);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses a {@code String role} into an {@code Role}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code role} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static Role parseRole(String role) throws ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedRole \u003d role.trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!Role.isValidRole(trimmedRole)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Role(trimmedRole);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses a {@code String date} into an {@code LocalDate}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return LocalDate.parse(trimmedDate, DateTimeFormatter.ofPattern(\"dd MM yyyy\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(\"Date should be in the form: DD MM YYYY\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Parses a {@code String applicationDate} into an {@code ApplicationDate}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static ApplicationDate parseApplicationDate(String applicationDate) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(applicationDate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String trimmedDate \u003d applicationDate.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!ApplicationDate.isValidApplicationDate(trimmedDate)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new ParseException(ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return new ApplicationDate(trimmedDate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses a {@code String priority} into an {@code Priority}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses a {@code String status} into an {@code Status}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code status} is invalid."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static Status parseStatus(String status) throws ParseException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(status);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedStatus \u003d status.trim();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        trimmedStatus \u003d trimmedStatus.replaceAll(\"\\\\s\", \"_\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!Status.isValidStatus(trimmedStatus)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // replaces all whitespace with _"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return Status.valueOf(trimmedStatus.toUpperCase());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses the preamble of an interview command."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The preamble should consist of either 2 or 3 strings separated by a single whitespace."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code preamble}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * has more than or less than 2/3 strings separated by a single whitespace."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String[] parseInterviewPreamble(String preamble) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(preamble);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] indexAndCode \u003d preamble.trim().split(\" \");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (indexAndCode.length !\u003d 2 \u0026\u0026 indexAndCode.length !\u003d 3) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PREAMBLE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return indexAndCode;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Parses a {@code code} into an {@code InterviewCode}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws ParseException if the given {@code code} is invalid."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static InterviewCode parseInterviewCode(String code) throws ParseException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String trimmedCode \u003d code.trim();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!InterviewCode.isValidCode(trimmedCode)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new ParseException(InterviewCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return InterviewCode.valueOf(trimmedCode.toUpperCase());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 101,
      "wxwxwxwx9": 1,
      "gerhean": 6,
      "-": 89,
      "ongch00": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.ApplicationDateComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.CompanyComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.PriorityComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.StatusComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new SortCommand(prefixToComparator(trimmedArgs));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns the comparator corresponding to the prefix given."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws ParseException if the string is not an applicable prefix."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Comparator\u003cInternshipApplication\u003e prefixToComparator(String prefix) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (prefix.equals(PREFIX_COMPANY.getPrefix())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new CompanyComparator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else if (prefix.equals(PREFIX_DATE.getPrefix())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new ApplicationDateComparator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else if (prefix.equals(PREFIX_PRIORITY.getPrefix())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new PriorityComparator();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else if (prefix.equals(PREFIX_STATUS.getPrefix())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return new StatusComparator();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UnarchiveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Parses input arguments and creates a new UnarchiveCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class UnarchiveCommandParser implements Parser\u003cUnarchiveCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UnarchiveCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * and returns a UnarchiveCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public UnarchiveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return new UnarchiveCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnarchiveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/InternshipDiary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.UniqueInternshipApplicationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Wraps all data at the internship-diary level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Duplicates are not allowed (by .isSameInternshipApplication comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class InternshipDiary implements ReadOnlyInternshipDiary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final UniqueInternshipApplicationList internships;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        internships \u003d new UniqueInternshipApplicationList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipDiary() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Creates an InternshipDiary using the InternshipApplications in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipDiary(ReadOnlyInternshipDiary toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Replaces the contents of the internship application list with {@code internshipApplications}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * {@code internshipApplications} must not contain duplicate internship applications."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void setInternships(List\u003cInternshipApplication\u003e internshipApplications) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.internships.setInternshipApplications(internshipApplications);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Resets the existing data of this {@code InternshipDiary} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void resetData(ReadOnlyInternshipDiary newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        setInternships(newData.getInternshipList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    //// internship-application-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true if an internship application with the same identity as {@code internshipApplication}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * exists in the internship diary."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean hasInternship(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internships.contains(internshipApplication);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Archives an internship application in the internship diary."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The internship application must already exist in the internship diary."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void archiveInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internships.archive(internshipApplication);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Unarchives an internship application in the internship diary."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The internship application must already exist in the internship diary."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void unarchiveInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internships.unarchive(internshipApplication);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Adds an internship application to the internship diary."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The internship application must not already exist in the internship diary."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void addInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internships.add(internshipApplication);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Replaces the given internship application {@code target} in the list with {@code editedInternship}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code target} must exist in the internship diary."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The internship application identity of {@code editedInternship}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * must not be the same as another existing internship application in the internship diary."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void setInternship(InternshipApplication target, InternshipApplication editedInternship) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(editedInternship);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        internships.setInternshipApplication(target, editedInternship);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Removes {@code key} from this {@code InternshipDiary}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code key} must exist in the internship diary."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void removeInternship(InternshipApplication key) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        internships.remove(key);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internships.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public ObservableList\u003cInternshipApplication\u003e getInternshipList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internships.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                || (other instanceof InternshipDiary // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                \u0026\u0026 internships.equals(((InternshipDiary) other).internships));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internships.hashCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 16,
      "FeliciaTay": 1,
      "wxwxwxwx9": 18,
      "gerhean": 103
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    Predicate\u003cInternshipApplication\u003e PREDICATE_SHOW_ALL_INTERNSHIPS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    Predicate\u003cInternshipApplication\u003e PREDICATE_SHOW_ARCHIVED_INTERNSHIPS \u003d ("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            InternshipApplication internshipApplication) -\u003e internshipApplication.isArchived();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    Predicate\u003cInternshipApplication\u003e PREDICATE_SHOW_NOT_ARCHIVED_INTERNSHIPS \u003d ("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            InternshipApplication internshipApplication) -\u003e !internshipApplication.isArchived();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the user prefs\u0027 internship diary file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    Path getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Sets the user prefs\u0027 internship diary file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param internshipDiaryFilePath new file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void setInternshipDiaryFilePath(Path internshipDiaryFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Replaces internship diary with the data in {@code internshipDiary}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param internshipDiary new internship diary."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void setInternshipDiary(ReadOnlyInternshipDiary internshipDiary);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /** Returns the InternshipDiary*/"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    ReadOnlyInternshipDiary getInternshipDiary();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true if an internship application with the same identity as {@code internshipApplication}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * exists in the Internship Diary."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    boolean hasInternshipApplication(InternshipApplication internshipApplication);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Archives the given internship application."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The application must exist in the internship diary."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    void archiveInternshipApplication(InternshipApplication target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Unarchives the given internship application."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The application must exist in the internship diary."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    void unarchiveInternshipApplication(InternshipApplication target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Deletes the given internship application."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The application must exist in the internship diary."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void deleteInternshipApplication(InternshipApplication target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Adds the given internship application."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code internshipApplication} must not already exist in the internship diary"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void addInternshipApplication(InternshipApplication internshipApplication);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Replaces the given internship application {@code target} with {@code editedInternship}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * {@code target} must exist in the internship application."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * The internship application identify of {@code editedInternship} must not be the same"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * as another existing internship application in the internship diary."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void setInternshipApplication(InternshipApplication target, InternshipApplication editedInternship);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns an unmodifiable view of the filtered internship applications list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Updates the filter of the filtered internship application list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    void updateFilteredInternshipApplicationList(Predicate\u003cInternshipApplication\u003e predicate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Updates the filter of the filtered internship application list to sort by the given {@code predicate}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void updateFilteredInternshipApplicationList(Comparator\u003cInternshipApplication\u003e comparator);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns a statistics object that can compute relevant internship application statistics."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 37,
      "FeliciaTay": 2,
      "wxwxwxwx9": 17,
      "gerhean": 7,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents the in-memory model of the internship diary data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private InternshipDiary internshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private FilteredList\u003cInternshipApplication\u003e filteredInternshipApplications \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new FilteredList\u003c\u003e(internshipDiary.getInternshipList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private SortedList\u003cInternshipApplication\u003e sortedFilteredInternshipApplications \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new SortedList\u003c\u003e(filteredInternshipApplications);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Initializes a ModelManager with the given internshipDiary and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ModelManager(ReadOnlyInternshipDiary internshipDiary, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireAllNonNull(internshipDiary, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        logger.fine(\"Initializing with internship diary: \" + internshipDiary + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.internshipDiary \u003d new InternshipDiary(internshipDiary);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        filteredInternshipApplications \u003d new FilteredList\u003c\u003e(this.internshipDiary.getInternshipList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Set default view to show UNARCHIVED internships"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateFilteredInternshipApplicationList(PREDICATE_SHOW_NOT_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        sortedFilteredInternshipApplications \u003d new SortedList\u003c\u003e(filteredInternshipApplications);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this(new InternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return userPrefs.getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInternshipDiaryFilePath(Path internshipDiaryFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipDiaryFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        userPrefs.setInternshipDiaryFilePath(internshipDiaryFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InternshipDiary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInternshipDiary(ReadOnlyInternshipDiary internshipDiary) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.internshipDiary.resetData(internshipDiary);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ReadOnlyInternshipDiary getInternshipDiary() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return internshipDiary;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return internshipDiary.hasInternship(internshipApplication);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void archiveInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.archiveInternshipApplication(target);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void unarchiveInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.unarchiveInternshipApplication(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void deleteInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipDiary.removeInternship(target);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void addInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipDiary.addInternshipApplication(internshipApplication);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInternshipApplication(InternshipApplication target, InternshipApplication editedInternship) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireAllNonNull(target, editedInternship);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        internshipDiary.setInternship(target, editedInternship);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Internship Application List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code InternshipApplication}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * backed by the internal list of {@code versionedInternshipDiary}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return sortedFilteredInternshipApplications;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void updateFilteredInternshipApplicationList(Predicate\u003cInternshipApplication\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        filteredInternshipApplications.setPredicate(predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void updateFilteredInternshipApplicationList(Comparator\u003cInternshipApplication\u003e comparator) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        sortedFilteredInternshipApplications.setComparator(comparator);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return internshipDiary.equals(other.internshipDiary)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 filteredInternshipApplications.equals(other.filteredInternshipApplications);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 39,
      "wxwxwxwx9": 17,
      "gerhean": 10,
      "-": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyInternshipDiary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Unmodifiable view of an internship diary"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public interface ReadOnlyInternshipDiary {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns an unmodifiable view of the internship application list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * This list will not contain any duplicate internship application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    ObservableList\u003cInternshipApplication\u003e getInternshipList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 3,
      "gerhean": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    Path getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Path internshipDiaryFilePath \u003d Paths.get(\"data\", \"internshipdiary.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    // Old AB code"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        setInternshipDiaryFilePath(newUserPrefs.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return internshipDiaryFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInternshipDiaryFilePath(Path internshipDiaryFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(internshipDiaryFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.internshipDiaryFilePath \u003d internshipDiaryFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 internshipDiaryFilePath.equals(o.internshipDiaryFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return Objects.hash(guiSettings, internshipDiaryFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + internshipDiaryFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 15,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Address.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents an InternshipApplication\u0027s address in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([^\\\\s].*)?$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 53,
      "ongch00": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/ApplicationDate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents a InternshipApplication\u0027s application date in the internship diary."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidApplicationDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class ApplicationDate implements Comparable\u003cApplicationDate\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"Date should be in the form: DD MM YYYY\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String DATE_PATTERN \u003d \"dd MM yyyy\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public final LocalDate fullApplicationDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Constructs a {@code ApplicationDate}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public ApplicationDate(String date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        checkArgument(isValidApplicationDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullApplicationDate \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(DATE_PATTERN));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Constructs a {@code ApplicationDate}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param date A valid date of type LocalDate."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public ApplicationDate(LocalDate date) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullApplicationDate \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if a given string is a valid application date."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static boolean isValidApplicationDate(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            //simple parse test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            LocalDate.parse(test, DateTimeFormatter.ofPattern(DATE_PATTERN));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return fullApplicationDate.format(DateTimeFormatter.ofPattern(DATE_PATTERN));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof ApplicationDate // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 fullApplicationDate.equals(((ApplicationDate) other).fullApplicationDate)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compareTo(ApplicationDate other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return fullApplicationDate.compareTo(other.fullApplicationDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return String.valueOf(fullApplicationDate).hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 7,
      "ongch00": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Company.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents a InternshipApplication\u0027s company in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCompany(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class Company implements Comparable\u003cCompany\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"Companies should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * The first character of the company must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public final String fullCompany;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Constructs a {@code Company}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param company A valid company."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Company(String company) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        checkArgument(isValidCompany(company), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullCompany \u003d company;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if a given string is a valid company."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static boolean isValidCompany(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return fullCompany;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof Company // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 fullCompany.equals(((Company) other).fullCompany)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return fullCompany.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Does string comparison of company name."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compareTo(Company other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return fullCompany.compareTo(other.fullCompany); // String comparison."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 9,
      "ongch00": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Email.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents a InternshipApplication\u0027s email in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String DOMAIN_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(\" + DOMAIN_REGEX + \")?$\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 4,
      "-": 61,
      "ongch00": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/InternshipApplication.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents an InternshipApplication in the internship diary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class InternshipApplication {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Company company;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Role role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final ApplicationDate applicationDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final ArrayList\u003cInterview\u003e interviews;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Boolean isArchived;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public InternshipApplication(Company company, Role role, Address address, Phone phone, Email email,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            ApplicationDate applicationDate, Priority priority, Status status) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireAllNonNull(company, phone, email, address, status);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.applicationDate \u003d applicationDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.isArchived \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        interviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Overloaded constructor to set isArchived field (probably not needed)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplication(Company company, Role role, Address address, Phone phone, Email email,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "             ApplicationDate applicationDate, Priority priority, Status status, Boolean isArchived) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireAllNonNull(company, phone, email, address, status);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.applicationDate \u003d applicationDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Company getCompany() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return company;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Role getRole() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return role;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public ApplicationDate getApplicationDate() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return applicationDate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public Boolean isArchived() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return isArchived;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the earliest interview from today in the list of interviews of the application."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param todayDate The current date today."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @return an Optional of LocalDate. Will return empty if there are no interviews after today\u0027s date."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Optional\u003cInterview\u003e getEarliestInterview(LocalDate todayDate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviews.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview earliestInterview \u003d interviews.get(0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (Interview currentInterview: interviews) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            LocalDate earliestDate \u003d earliestInterview.getInterviewDate();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            LocalDate currentDate \u003d currentInterview.getInterviewDate();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if ((currentDate.compareTo(earliestDate) \u003c\u003d 0 || earliestDate.compareTo(todayDate) \u003c 0)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    \u0026\u0026 currentDate.compareTo(todayDate) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                earliestInterview \u003d currentInterview;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return earliestInterview.getInterviewDate().compareTo(todayDate) \u003e\u003d 0"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                ? Optional.of(earliestInterview) : Optional.empty();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void addInterview(Interview interview) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews.add(interview);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Interview getInterview(int index) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviews.get(index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setInterviews(ArrayList\u003cInterview\u003e interviews) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviews.addAll(interviews);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ArrayList\u003cInterview\u003e getInterviews() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviews;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean hasInterview(Interview interview) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviews.contains(interview);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if all but priority and status fields are the same."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * This defines a weaker notion of equality between two internship applications."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isSameInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (internshipApplication \u003d\u003d this) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internshipApplication !\u003d null"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getCompany().equals(getCompany())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getRole().equals(getRole())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u0026\u0026 internshipApplication.getApplicationDate().equals(getApplicationDate())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u0026\u0026 internshipApplication.isArchived().equals(isArchived());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if both internship application have the fields."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * This defines a stronger notion of equality between two internship applications."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!(other instanceof InternshipApplication)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        InternshipApplication internshipApplication \u003d (InternshipApplication) other;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internshipApplication.getCompany().equals(getCompany())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getRole().equals(getRole())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getApplicationDate().equals(getApplicationDate())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 internshipApplication.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u0026\u0026 internshipApplication.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u0026\u0026 internshipApplication.isArchived().equals(isArchived());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Objects.hash(company, role, address, phone, email, applicationDate, priority, status, isArchived);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        builder.append(getCompany())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(\" Role: \")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(getRole())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(\" Application Date: \")"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(getApplicationDate())"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .append(\" Archived: \")"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .append(isArchived());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "foochifa": 53,
      "wxwxwxwx9": 34,
      "ongch00": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Phone.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents an InternshipApplication\u0027s phone number in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(\\\\d{3,})?$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 1,
      "-": 49,
      "ongch00": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents an InternshipApplication\u0027s priority in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class Priority implements Comparable\u003cPriority\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final int HIGHEST_PRIORITY \u003d 10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final int LOWEST_PRIORITY \u003d 0;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"Priority should only contain a number, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public final int fullPriority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param priority A valid priority in the form of an index."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Priority(int priority) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullPriority \u003d priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a {@code Priority}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @param priority a valid priority in the from of a String."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullPriority \u003d Integer.parseInt(priority);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true if a given integer is a valid priority."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static boolean isValidPriority(int test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return test \u003e\u003d LOWEST_PRIORITY \u0026\u0026 test \u003c\u003d HIGHEST_PRIORITY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true if a given string is a valid priority."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            int priority \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return isValidPriority(priority);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return String.valueOf(fullPriority);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 fullPriority \u003d\u003d ((Priority) other).fullPriority); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public int compareTo(Priority other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return fullPriority - other.fullPriority;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return String.valueOf(fullPriority).hashCode();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 22,
      "gerhean": 7,
      "ongch00": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/Role.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Represents a InternshipApplication\u0027s role in the internship diary."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class Role {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            \"Roles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * The first character of the role must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public final String fullRole;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Constructs a {@code Role}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * @param role A valid role."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Role(String role) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(role);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        checkArgument(isValidRole(role), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        fullRole \u003d role;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if a given string is a valid role."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public static boolean isValidRole(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return fullRole;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof Role // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 fullRole.equals(((Role) other).fullRole)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return fullRole.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/UniqueInternshipApplicationList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.exceptions.DuplicateInternshipApplicationException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.exceptions.InternshipApplicationNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * A list of internship applications that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * A internship application is considered unique by comparing"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * using {@code InternshipApplication#InternshipApplication(InternshipApplication)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * As such, adding and updating of internship applications"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * uses InternshipApplication#InternshipApplication(InternshipApplication) for equality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * so as to ensure that the internship application being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * unique in terms of identity in the UniqueInternshipApplicationList."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * However, the removal of a internship application uses InternshipApplication#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * as to ensure that the internship application with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * @see InternshipApplication#isSameInternshipApplication(InternshipApplication)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class UniqueInternshipApplicationList implements Iterable\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final ObservableList\u003cInternshipApplication\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final ObservableList\u003cInternshipApplication\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if the list contains an equivalent internship application as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean contains(InternshipApplication toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameInternshipApplication);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Adds a internship application to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * The internship application must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void add(InternshipApplication toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new DuplicateInternshipApplicationException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Archives an internship application in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The internship application must already exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void archive(InternshipApplication toArchive) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(toArchive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication editedInternship \u003d new InternshipApplication("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toArchive.getCompany(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toArchive.getRole(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toArchive.getAddress(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toArchive.getPhone(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toArchive.getEmail(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toArchive.getApplicationDate(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toArchive.getPriority(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toArchive.getStatus(),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        setInternshipApplication(toArchive, editedInternship);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Unarchives an internship application in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * The internship application must already exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void unarchive(InternshipApplication toUnarchive) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        requireNonNull(toUnarchive);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication editedInternship \u003d new InternshipApplication("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toUnarchive.getCompany(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toUnarchive.getRole(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toUnarchive.getAddress(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toUnarchive.getPhone(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toUnarchive.getEmail(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toUnarchive.getApplicationDate(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toUnarchive.getPriority(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            toUnarchive.getStatus(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        setInternshipApplication(toUnarchive, editedInternship);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Replaces the internship application {@code target} in the list with {@code editedInternshipApplication}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * The internship application identity of {@code editedInternshipApplication}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * must not be the same as another existing internship application in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void setInternshipApplication(InternshipApplication target,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            InternshipApplication editedInternshipApplication) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireAllNonNull(target, editedInternshipApplication);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new InternshipApplicationNotFoundException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!target.isSameInternshipApplication(editedInternshipApplication) \u0026\u0026 contains(editedInternshipApplication)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new DuplicateInternshipApplicationException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        internalList.set(index, editedInternshipApplication);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Removes the equivalent internship application from the list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * The internship application must exist in the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void remove(InternshipApplication toRemove) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new InternshipApplicationNotFoundException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void setInternshipApplications(UniqueInternshipApplicationList replacement) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Replaces the contents of this list with {@code internship applications}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * {@code internship applications} must not contain duplicate internship applications."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void setInternshipApplications(List\u003cInternshipApplication\u003e internshipApplications) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        requireAllNonNull(internshipApplications);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (!internshipApplicationsAreUnique(internshipApplications)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new DuplicateInternshipApplicationException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        internalList.setAll(internshipApplications);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public ObservableList\u003cInternshipApplication\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public Iterator\u003cInternshipApplication\u003e iterator() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof UniqueInternshipApplicationList // instanceof handles nulls"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueInternshipApplicationList) other).internalList));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Returns true if {@code internship applications} contains only unique internship applications."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private boolean internshipApplicationsAreUnique(List\u003cInternshipApplication\u003e internshipApplications) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        for (int i \u003d 0; i \u003c internshipApplications.size() - 1; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            for (int j \u003d i + 1; j \u003c internshipApplications.size(); j++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                if (internshipApplications.get(i).isSameInternshipApplication(internshipApplications.get(j))) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 41,
      "ongch00": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/exceptions/DuplicateInternshipApplicationException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Signals that the operation will result in duplicate Internship Application (Internship Application are considered"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * duplicates if they have the same value in all but priority and status fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class DuplicateInternshipApplicationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public DuplicateInternshipApplicationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        super(\"Operation would result in duplicate internship application\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/exceptions/InternshipApplicationNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Signals that the operation is unable to find the specified internship application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class InternshipApplicationNotFoundException extends RuntimeException {}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ongch00": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/interview/Interview.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.model.internship.interview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Represents an Interview in the Internship Diary."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Interviews are always tagged to an internship application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class Interview {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ADDRESS_NOT_APPLICABLE \u003d \"NA\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public final boolean isOnline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final ApplicationDate interviewDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final Address interviewAddress;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Interview(boolean isOnline, ApplicationDate interviewDate, Address interviewAddress) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isOnline \u003d isOnline;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d interviewDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d interviewAddress;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Interview(boolean isOnline, ApplicationDate interviewDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isOnline \u003d isOnline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d interviewDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d new Address(ADDRESS_NOT_APPLICABLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the interview date in local date format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public LocalDate getInterviewDate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviewDate.fullApplicationDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public ApplicationDate getDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviewDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Address getInterviewAddress() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interviewAddress;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Checks if the interview is valid. If it is an online interview, it should not have an address."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Otherwise, any valid address is fine."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (isOnline) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return interviewAddress.equals(new Address(ADDRESS_NOT_APPLICABLE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!(other instanceof Interview)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d (Interview) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return interview.getInterviewDate().equals(getInterviewDate())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 interview.getInterviewAddress().equals(getInterviewAddress())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \u0026\u0026 interview.isOnline \u003d\u003d isOnline;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (isOnline) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            builder.append(\"Online Interview on: \")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    .append(getInterviewDate().format(DateTimeFormatter.ofPattern(ApplicationDate.DATE_PATTERN)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            builder.append(\"Interview on: \")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    .append(getInterviewDate().format(DateTimeFormatter.ofPattern(ApplicationDate.DATE_PATTERN)))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    .append(\" at: \")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    .append(getInterviewAddress());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/predicate/AddressContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Address} contains any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class AddressContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .anyMatch(keyword -\u003e internshipApplication.getAddress().value.toLowerCase()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        .contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords \u003d\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/predicate/ApplicationDateDuePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Application Date} is within 7 days from current date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class ApplicationDateDuePredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final LocalDate currentDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public ApplicationDateDuePredicate() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate applicationDate \u003d internshipApplication.getApplicationDate().fullApplicationDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // count days between current internship application date and current date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Period period \u003d Period.between(currentDate, applicationDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return (applicationDate.compareTo(currentDate) \u003e\u003d 0) \u0026\u0026 (period.getDays() \u003c\u003d 7);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                || (other instanceof ApplicationDateDuePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u0026\u0026 currentDate.equals(((ApplicationDateDuePredicate) other).currentDate)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 31,
      "ongch00": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/predicate/ApplicationDateIsDatePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code ApplicationDate} matches the date given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class ApplicationDateIsDatePredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public ApplicationDateIsDatePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return internshipApplication.getApplicationDate().fullApplicationDate.isEqual(date);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof ApplicationDateIsDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 date.isEqual(((ApplicationDateIsDatePredicate) other).date)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return date \u003d\u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/predicate/CompanyContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Company} contains any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class CompanyContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public CompanyContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .anyMatch(keyword -\u003e internshipApplication.getCompany().fullCompany.toLowerCase()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        .contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof CompanyContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 keywords.equals(((CompanyContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords \u003d\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/predicate/EmailContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Email} contains any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class EmailContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .anyMatch(keyword -\u003e internshipApplication.getEmail().value.toLowerCase()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        .contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords \u003d\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/predicate/InterviewDateDuePredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Application Date} is within 7 days from current date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class InterviewDateDuePredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final LocalDate currentDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InterviewDateDuePredicate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        boolean hasAtLeastOneInterviewDue \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ArrayList\u003cInterview\u003e interviews \u003d internshipApplication.getInterviews();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        for (Interview interview: interviews) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            LocalDate interviewDate \u003d interview.getInterviewDate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            // count days between every interview in the internship application and current date"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            Period duration \u003d Period.between(currentDate, interviewDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            if ((interviewDate.compareTo(currentDate) \u003e\u003d 0) \u0026\u0026 (duration.getDays() \u003c\u003d 7)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                hasAtLeastOneInterviewDue \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return hasAtLeastOneInterviewDue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                || (other instanceof InterviewDateDuePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u0026\u0026 currentDate.equals(((InterviewDateDuePredicate) other).currentDate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 41,
      "ongch00": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/predicate/PhoneContainsNumbersPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Phone} contains any of the numbers given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class PhoneContainsNumbersPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e numbers;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public PhoneContainsNumbersPredicate(List\u003cString\u003e numbers) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.numbers \u003d numbers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (numbers \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return numbers.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .anyMatch(number -\u003e internshipApplication.getPhone().value.toLowerCase().contains(number));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof PhoneContainsNumbersPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 numbers.equals(((PhoneContainsNumbersPredicate) other).numbers)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return numbers \u003d\u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/predicate/PriorityContainsNumbersPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Priority} matches any of the numbers given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class PriorityContainsNumbersPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e numbers;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public PriorityContainsNumbersPredicate(List\u003cString\u003e numbers) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.numbers \u003d numbers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (numbers \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return numbers.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .anyMatch(number -\u003e Integer.toString(internshipApplication.getPriority().fullPriority)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        .toLowerCase().equals(number));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof PriorityContainsNumbersPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 numbers.equals(((PriorityContainsNumbersPredicate) other).numbers)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return numbers \u003d\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/predicate/RoleContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Role} contains any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class RoleContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public RoleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .anyMatch(keyword -\u003e internshipApplication.getRole().fullRole.toLowerCase()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        .contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof RoleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 keywords.equals(((RoleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords \u003d\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/internship/predicate/StatusContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Tests that a {@code InternshipApplication}\u0027s {@code Status} contains any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class StatusContainsKeywordsPredicate implements Predicate\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public StatusContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean test(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        if (keywords \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .anyMatch(keyword -\u003e internshipApplication.getStatus().name().toLowerCase()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        .contains(keyword.toLowerCase()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                || (other instanceof StatusContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \u0026\u0026 keywords.equals(((StatusContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public boolean isNull() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return keywords \u003d\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/statistics/Statistics.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Represents a statistics generator model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Generates relevant statistics for internship applications."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String TOTAL \u003d \"TOTAL\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Status[] statuses \u003d Status.class.getEnumConstants();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private HashMap\u003cStatus, Integer\u003e statusCount \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Computes and updates the overall statistics based on the list of internship applications given."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void computeAndUpdateStatistics(ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        resetStatistics();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        computeCount(internshipApplicationList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Computes and updates the count for each internship application status."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void computeCount(ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cStatus\u003e newStatuses \u003d internshipApplicationList.stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .map(ia -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    return ia.getStatus();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                })"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        newStatuses.forEach((status) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            int count \u003d statusCount.get(status);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            statusCount.put(status, ++count);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Resets the current statistics."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void resetStatistics() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (Status status : statuses) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            statusCount.put(status, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public int getCount(Status status) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return statusCount.get(status);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public int getTotalCount() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Iterator statusCountIterator \u003d statusCount.entrySet().iterator();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int totalCount \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        while (statusCountIterator.hasNext()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            Map.Entry element \u003d (Map.Entry) statusCountIterator.next();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            int count \u003d (int) element.getValue();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            totalCount +\u003d count;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return totalCount;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public double getPercentage(Status status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return ((double) statusCount.get(status) / getTotalCount()) * 100;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/status/Status.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.status;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": " * Enum for the possible statuses an internship application can have."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    WISHLIST, APPLIED, INTERVIEW, OFFERED, REJECTED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            \"Status should only be one of the following strings: \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    + \"wishlist, applied, interview, offered, rejected\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String[] validStatuses \u003d new String[] {\"wishlist\", \"applied\", \"interview\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        \"offered\", \"rejected\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns true is given string is a valid status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static boolean isValidStatus(String test) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String status \u003d test.toLowerCase();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        boolean output \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (String s: validStatuses) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            output \u003d output || status.equals(s);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 20,
      "wxwxwxwx9": 1,
      "ongch00": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Contains utility methods for populating {@code InternshipDiary} with sample data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static InternshipApplication[] getSampleInternshipApplications() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return new InternshipApplication[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"Google\"), new Role(\"Software Developer\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new Email(\"google.recruit@example.com\"), new ApplicationDate(LocalDate.now()),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    new Priority(8), Status.APPLIED, false),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"Facebook\"), new Role(\"Software Engineer\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Phone(\"99272758\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new Email(\"facebook.recruit@example.com\"), new ApplicationDate(LocalDate.now()),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    new Priority(8), Status.APPLIED, false),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"DSO\"), new Role(\"Data Analyst\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Phone(\"93210283\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new Email(\"dso.recruit@example.com\"), new ApplicationDate(LocalDate.now()),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    new Priority(8), Status.INTERVIEW, false),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"Shopee\"), new Role(\"Data Science\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Phone(\"91031282\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new Email(\"shopee.recruit@example.com\"), new ApplicationDate(LocalDate.now()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    new Priority(10), Status.WISHLIST, false),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"DSTA\"), new Role(\"Software Engineer\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Phone(\"92492021\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new Email(\"dsta.recruit@example.com\"), new ApplicationDate(LocalDate.now()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    new Priority(2), Status.REJECTED, false),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            new InternshipApplication(new Company(\"Singtel\"), new Role(\"Software Engineer\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Phone(\"92624417\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new Email(\"singtel.recruit@example.com\"), new ApplicationDate(LocalDate.now()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    new Priority(2), Status.OFFERED, false)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static ReadOnlyInternshipDiary getSampleInternshipDiary() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary sampleDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication sampleApplication : getSampleInternshipApplications()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            sampleDiary.addInternshipApplication(sampleApplication);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return sampleDiary;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    // old code"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //                .map(Tag::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 16,
      "wxwxwxwx9": 32,
      "gerhean": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InternshipDiaryStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Represents a storage for {@link seedu.address.model.InternshipDiary}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public interface InternshipDiaryStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    Path getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns InternshipDiary data as a {@link ReadOnlyInternshipDiary}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @see #getInternshipDiaryFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Saves the given {@link ReadOnlyInternshipDiary} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param internshipDiary cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @see #saveInternshipDiary(ReadOnlyInternshipDiary)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedInternship.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Jackson-friendly version of {@link InternshipApplication}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "class JsonAdaptedInternship {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Internship\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERVIEW \u003d \"Interviews list contains duplicate interview!\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String company;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String role;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String applicationDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final List\u003cJsonAdaptedInterview\u003e interviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final String isArchived;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Constructs a {@code JsonAdaptedInternship} with the given internship application details."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public JsonAdaptedInternship(@JsonProperty(\"company\") String company, @JsonProperty(\"role\") String role,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @JsonProperty(\"address\") String address, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"applicationDate\") String applicationDate,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            @JsonProperty(\"priority\") String priority, @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            @JsonProperty(\"interviews\") List\u003cJsonAdaptedInterview\u003e interviews,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            @JsonProperty(\"isArchived\") String isArchived) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.role \u003d role;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.applicationDate \u003d applicationDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviews.addAll(interviews);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.isArchived \u003d isArchived;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Converts a given {@code InternshipApplication} into this class for Jackson use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public JsonAdaptedInternship(InternshipApplication source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        company \u003d source.getCompany().fullCompany;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        role \u003d source.getRole().fullRole;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        applicationDate \u003d source.getApplicationDate().toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        priority \u003d Integer.toString(source.getPriority().fullPriority);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        status \u003d source.getStatus().name();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews.addAll(source.getInterviews()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .stream().map(JsonAdaptedInterview::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        isArchived \u003d source.isArchived().toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Converts this Jackson-friendly adapted internship application object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * into the model\u0027s {@code InternshipApplication} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipApplication toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (company \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Company.isValidCompany(company)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Company modelCompany \u003d new Company(company);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (role \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Role.isValidRole(role)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Role modelRole \u003d new Role(role);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDate modelDate;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (applicationDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                    ApplicationDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!ApplicationDate.isValidApplicationDate(applicationDate)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            throw new IllegalValueException(ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        modelDate \u003d new ApplicationDate(applicationDate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (!Status.isValidStatus(status)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        final Status modelStatus \u003d Status.valueOf(status);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (isArchived \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Messages.IS_ARCHIVED));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (!BooleanUtil.isValidBoolean(isArchived)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new IllegalValueException(BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        final Boolean modelIsArchived \u003d Boolean.valueOf(isArchived);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplication(modelCompany, modelRole, modelAddress,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                modelPhone, modelEmail, modelDate, modelPriority, modelStatus, modelIsArchived);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (JsonAdaptedInterview jsonAdaptedInterview: interviews) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Interview interview \u003d jsonAdaptedInterview.toModelType();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            if (internshipApplication.hasInterview(interview)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERVIEW);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            internshipApplication.addInterview(interview);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return internshipApplication;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 23,
      "wxwxwxwx9": 18,
      "gerhean": 134,
      "ongch00": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedInterview.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Jackson-friendly version of {@code Interview}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class JsonAdaptedInterview {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Interview\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final String isOnline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final String interviewAddress;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final String interviewDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Constructs a {@code JsonAdaptedInterview} with the given person details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public JsonAdaptedInterview(@JsonProperty(\"interviewAddress\") String interviewAddress,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                @JsonProperty(\"isOnline\") String isOnline,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                                @JsonProperty(\"interviewDate\") String interviewDate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isOnline \u003d isOnline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d interviewAddress;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d interviewDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Converts a given {@code Interview} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public JsonAdaptedInterview(Interview source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewAddress \u003d source.getInterviewAddress().value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviewDate \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        isOnline \u003d Boolean.toString(source.isOnline);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Converts this Jackson-friendly adapted interview object into the model\u0027s {@code Interview} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted interview."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Interview toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviewAddress \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!Address.isValidAddress(interviewAddress)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        final Address modelAddress \u003d new Address(interviewAddress);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ApplicationDate modelDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (interviewDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                    ApplicationDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!ApplicationDate.isValidApplicationDate(interviewDate)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        modelDate \u003d new ApplicationDate(interviewDate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (isOnline \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Boolean.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        if (!BooleanUtil.isValidBoolean(isOnline)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new IllegalValueException(BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Boolean modelIsOnline \u003d Boolean.parseBoolean(isOnline);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Interview(modelIsOnline, modelDate, modelAddress);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInternshipDiaryStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * A class to access InternshipDiary data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class JsonInternshipDiaryStorage implements InternshipDiaryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInternshipDiaryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public JsonInternshipDiaryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return readInternshipDiary(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Similar to {@link #readInternshipDiary()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Optional\u003cJsonSerializableInternshipDiary\u003e jsonInternshipDiary \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                filePath, JsonSerializableInternshipDiary.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        if (jsonInternshipDiary.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            return Optional.of(jsonInternshipDiary.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        saveInternshipDiary(internshipDiary, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Similar to {@link #saveInternshipDiary(ReadOnlyInternshipDiary)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(internshipDiary);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInternshipDiary(internshipDiary), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableInternshipDiary.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * An Immutable InternshipDiary that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "@JsonRootName(value \u003d \"internshipDiary\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "class JsonSerializableInternshipDiary {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INTERNSHIP \u003d \"Internship list contains duplicate internship(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private final List\u003cJsonAdaptedInternship\u003e internships \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Constructs a {@code JsonSerializableInternshipDiary} with the given internship applications."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public JsonSerializableInternshipDiary(@JsonProperty(\"internships\") List\u003cJsonAdaptedInternship\u003e internships) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.internships.addAll(internships);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Converts a given {@code ReadOnlyInternshipDiary} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInternshipDiary}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public JsonSerializableInternshipDiary(ReadOnlyInternshipDiary source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        internships.addAll(source.getInternshipList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .map(JsonAdaptedInternship::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Converts this address book into the model\u0027s {@code InternshipDiary} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public InternshipDiary toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary internshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        for (JsonAdaptedInternship jsonAdaptedInternship : internships) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            InternshipApplication internship \u003d jsonAdaptedInternship.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            if (internshipDiary.hasInternship(internship)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            internshipDiary.addInternshipApplication(internship);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internshipDiary;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public interface Storage extends InternshipDiaryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    Path getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    void saveInternshipDiary(ReadOnlyInternshipDiary addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Manages storage of InternshipDiary data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private InternshipDiaryStorage internshipDiaryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public StorageManager(InternshipDiaryStorage internshipDiaryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        this.internshipDiaryStorage \u003d internshipDiaryStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d InternshipDiary methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internshipDiaryStorage.getInternshipDiaryFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return readInternshipDiary(internshipDiaryStorage.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(Path filePath)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return internshipDiaryStorage.readInternshipDiary(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        saveInternshipDiary(internshipDiary, internshipDiaryStorage.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipDiaryStorage.saveInternshipDiary(internshipDiary, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 4,
      "gerhean": 13,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.media.MediaException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f10-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private WebView guideView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            String uri \u003d HelpWindow.class.getResource(\"/html/userGuide.html\").toURI().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            guideView.getEngine().load(uri);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (URISyntaxException | MediaException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 11,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InternshipApplicationCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * An UI component that displays information of a {@code InternshipApplication}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class InternshipApplicationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private static final String FXML \u003d \"InternshipApplicationListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public final InternshipApplication internshipApplication;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label company;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label role;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label applicationDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InternshipApplicationCard(InternshipApplication internshipApplication, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        this.internshipApplication \u003d internshipApplication;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        company.setText(internshipApplication.getCompany().fullCompany);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        phone.setText(internshipApplication.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        address.setText(internshipApplication.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        email.setText(internshipApplication.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        role.setText(internshipApplication.getRole().fullRole);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        priority.setText(Integer.toString(internshipApplication.getPriority().fullPriority));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        applicationDate.setText(internshipApplication.getApplicationDate().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        status.setText(internshipApplication.getStatus().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (!(other instanceof InternshipApplicationCard)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationCard card \u003d (InternshipApplicationCard) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u0026\u0026 internshipApplication.equals(card.internshipApplication);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InternshipApplicationListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " * Panel containing the list of internship applications."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "public class InternshipApplicationListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private static final String FXML \u003d \"InternshipApplicationListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(InternshipApplicationListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private ListView\u003cInternshipApplication\u003e internshipApplicationListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public InternshipApplicationListPanel(ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationListView.setItems(internshipApplicationList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationListView.setCellFactory(listView -\u003e new InternshipApplicationListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code InternshipApplication} using a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * {@code InternshipApplicationCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    class InternshipApplicationListViewCell extends ListCell\u003cInternshipApplication\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        protected void updateItem(InternshipApplication internshipApplication, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            super.updateItem(internshipApplication, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            if (empty || internshipApplication \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                setGraphic(new InternshipApplicationCard(internshipApplication, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private InternshipApplicationListPanel internshipApplicationListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private StatisticsWindow statisticsWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private StackPane internshipApplicationListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private StackPane statisticsPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statisticsWindow \u003d new StatisticsWindow(logic.getStatistics(), logic.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationListPanel \u003d new InternshipApplicationListPanel("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                logic.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationListPanelPlaceholder.getChildren().add(internshipApplicationListPanel.getRoot());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        StatisticsBarFooter statisticsBarFooter \u003d new StatisticsBarFooter(logic.getStatistics(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                logic.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statisticsPlaceholder.getChildren().add(statisticsBarFooter.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Opens the statistics window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void handleStatistics() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        if (!statisticsWindow.isShowing()) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            statisticsWindow.show();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            statisticsWindow.focus();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statisticsWindow.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationListPanel getInternshipApplicationListPanel() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return internshipApplicationListPanel;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            if (commandResult.isShowStatistics()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                handleStatistics();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 2,
      "wxwxwxwx9": 32,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticsBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A ui for the statistics that is displayed at the footer of the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class StatisticsBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String FXML \u003d \"StatisticsBarFooter.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label wishlist;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label applied;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label interview;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label offered;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label rejected;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Label total;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public StatisticsBarFooter(Statistics statistics, ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        computeAndBindStatistics(statistics, internshipApplicationList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateStatisticsOnChange(statistics, internshipApplicationList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Adds an event listener to update the statistics upon any changes in the given list of internship application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param statistics"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void updateStatisticsOnChange(Statistics statistics,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                                         ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationList.addListener((ListChangeListener\u003cInternshipApplication\u003e) c -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            while (c.next()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                if (c.wasAdded() || c.wasRemoved() || c.wasUpdated() || c.wasReplaced()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    computeAndBindStatistics(statistics, internshipApplicationList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates statistics for statistics bar footer."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param statistics"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void computeAndBindStatistics(Statistics statistics,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                                         ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.computeAndUpdateStatistics(internshipApplicationList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int wishlistCount \u003d statistics.getCount(Status.WISHLIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int appliedCount \u003d statistics.getCount(Status.APPLIED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int interviewCount \u003d statistics.getCount(Status.INTERVIEW);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int offeredCount \u003d statistics.getCount(Status.OFFERED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int rejectedCount \u003d statistics.getCount(Status.REJECTED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int totalCount \u003d statistics.getTotalCount();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        bindStatistics(wishlistCount, appliedCount, interviewCount, offeredCount, rejectedCount, totalCount);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Binds the statistics to the user interface."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param wishlistCount"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param appliedCount"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param interviewCount"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param offeredCount"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param rejectedCount"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param totalCount"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void bindStatistics(int wishlistCount, int appliedCount, int interviewCount,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                               int offeredCount, int rejectedCount, int totalCount) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        wishlist.setText(String.format(\"%s: %d\", Status.WISHLIST, wishlistCount));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        applied.setText(String.format(\"%s: %d\", Status.APPLIED, appliedCount));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        interview.setText(String.format(\"%s: %d\", Status.INTERVIEW, interviewCount));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        offered.setText(String.format(\"%s: %d\", Status.OFFERED, offeredCount));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        rejected.setText(String.format(\"%s: %d\", Status.REJECTED, rejectedCount));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        total.setText(String.format(\"%s: %d\", Statistics.TOTAL, totalCount));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticsWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A ui for the statistics window page."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class StatisticsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatisticsWindow.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static final String FXML \u003d \"StatisticsWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private BarChart\u003cString, Integer\u003e internshipApplicationChart;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private CategoryAxis status;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private NumberAxis count;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private PieChart internshipApplicationPie;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Creates a new StatisticsWindow."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param root Stage to use as the root of the StatisticsWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public StatisticsWindow(Stage root, Statistics statistics,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                            ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        bindStatistics(statistics, internshipApplicationList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        updateStatisticsOnChange(statistics, internshipApplicationList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Creates a new StatisticsWindow."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param statistics"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public StatisticsWindow(Statistics statistics, ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this(new Stage(), statistics, internshipApplicationList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Adds an event listener to update the statistics upon any changes in the given list of internship application."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param statistics"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void updateStatisticsOnChange(Statistics statistics,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                                         ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationList.addListener((ListChangeListener\u003cInternshipApplication\u003e) c -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            while (c.next()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                if (c.wasAdded() || c.wasRemoved() || c.wasUpdated() || c.wasReplaced()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    bindStatistics(statistics, internshipApplicationList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Computes and binds the statistics to the user interface."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param statistics"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param internshipApplicationList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void bindStatistics(Statistics statistics, ObservableList\u003cInternshipApplication\u003e internshipApplicationList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.computeAndUpdateStatistics(internshipApplicationList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        loadBarChart(statistics);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        loadPieChart(statistics);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Loads bar chart with the generated statistics."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param statistics"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void loadBarChart(Statistics statistics) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationChart.getData().clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cXYChart.Data\u003e xyChartData \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new XYChart.Data(Status.WISHLIST.toString(), statistics.getCount(Status.WISHLIST)),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new XYChart.Data(Status.APPLIED.toString(), statistics.getCount(Status.APPLIED)),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new XYChart.Data(Status.INTERVIEW.toString(), statistics.getCount(Status.INTERVIEW)),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new XYChart.Data(Status.OFFERED.toString(), statistics.getCount(Status.OFFERED)),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new XYChart.Data(Status.REJECTED.toString(), statistics.getCount(Status.REJECTED))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cXYChart.Series\u003cString, Integer\u003e\u003e series \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new XYChart.Series(xyChartData)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationChart.getData().addAll(series);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Loads pie chart with the generated statistics."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @param statistics"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void loadPieChart(Statistics statistics) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationPie.getData().clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new PieChart.Data(Status.WISHLIST.toString(), statistics.getPercentage(Status.WISHLIST)),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new PieChart.Data(Status.APPLIED.toString(), statistics.getPercentage(Status.APPLIED)),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new PieChart.Data(Status.INTERVIEW.toString(), statistics.getPercentage(Status.INTERVIEW)),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new PieChart.Data(Status.OFFERED.toString(), statistics.getPercentage(Status.OFFERED)),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new PieChart.Data(Status.REJECTED.toString(), statistics.getPercentage(Status.REJECTED))"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipApplicationPie.getData().addAll(pieChartData);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        pieChartData.forEach(data -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                // tooltip not working for some reason"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                // Tooltip tip \u003d new Tooltip(String.format(\"%.2f\", data.getPieValue()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                // Tooltip.install(data.getNode(), tip);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                data.nameProperty().bind("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    Bindings.concat(String.format(\"%s (%.2f%%)\", data.getName(), data.getPieValue()))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                );"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Shows the statistics window."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        logger.fine(\"Generating statistics about your internship applications.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns true if the statistics window is currently being shown."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Hides the statistics window."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Focuses on the statistics window."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/internship_app.jpg\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "\u003cfx:root title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        \u003cAnchorPane\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            \u003cWebView fx:id\u003d\"guideView\" prefHeight\u003d\"450.0\" prefWidth\u003d\"700.0\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gerhean": 8,
      "-": 14
    }
  },
  {
    "path": "src/main/resources/view/InternshipApplicationListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                \u003cLabel fx:id\u003d\"company\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003cLabel fx:id\u003d\"role\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$role\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cLabel fx:id\u003d\"applicationDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$applicationDate\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 36,
      "wxwxwxwx9": 2
    }
  },
  {
    "path": "src/main/resources/view/InternshipApplicationListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    \u003cListView fx:id\u003d\"internshipApplicationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    \u003cImage url\u003d\"@/images/internship_app.jpg\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"statisticsMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleStatistics\" text\u003d\"Statistics\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        \u003cVBox fx:id\u003d\"internshipApplicationList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "          \u003cStackPane fx:id\u003d\"internshipApplicationListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statisticsPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "wxwxwxwx9": 7,
      "-": 56
    }
  },
  {
    "path": "src/main/resources/view/StatisticsBarFooter.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003cGridPane styleClass\u003d\"statistics-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003cHBox spacing\u003d\"30\" alignment\u003d\"bottom_left\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"wishlist\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"applied\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"interview\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"offered\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"rejected\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cLabel fx:id\u003d\"total\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 20
    }
  },
  {
    "path": "src/main/resources/view/StatisticsWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Internship Diary Statistics\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003cURL value\u003d\"@Statistics.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003cBarChart fx:id\u003d\"internshipApplicationChart\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                            \u003cCategoryAxis fx:id\u003d\"status\" side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                            \u003cNumberAxis fx:id\u003d\"count\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003cPieChart fx:id\u003d\"internshipApplicationPie\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.storage.JsonInternshipDiaryStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonInternshipDiaryStorage internshipDiaryStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                new JsonInternshipDiaryStorage(temporaryFolder.resolve(\"internshipDiary.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StorageManager storage \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Setup LogicManager with JsonInternshipDiaryIoExceptionThrowingStub"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonInternshipDiaryStorage internshipDiaryStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new JsonInternshipDiaryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInternshipDiary.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StorageManager storage \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + COMPANY_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_AMY + ROLE_DESC_AMY + DATE_DESC_AMY + PRIORITY_DESC_AMY + STATUS_DESC_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication expectedInternshipApplication \u003d new InternshipApplicationBuilder(AMY).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.addInternshipApplication(expectedInternshipApplication);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void getFilteredInternshipApplicationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredInternshipApplicationList().remove(0));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static class JsonInternshipDiaryIoExceptionThrowingStub extends JsonInternshipDiaryStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        private JsonInternshipDiaryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        public void saveInternshipDiary(ReadOnlyInternshipDiary internshipDiary, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 6,
      "wxwxwxwx9": 11,
      "gerhean": 13,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication validInternshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.addInternshipApplication(validInternshipApplication);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandSuccess(new AddCommand(validInternshipApplication), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validInternshipApplication), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipInList \u003d model.getInternshipDiary().getInternshipList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(new AddCommand(internshipInList), model, AddCommand.MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 11,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.statistics.Statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void constructor_nullInternshipApplication_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_internshipApplicationAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ModelStubAcceptingInternshipAdded modelStub \u003d new ModelStubAcceptingInternshipAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication validInternshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validInternshipApplication).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validInternshipApplication),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(Arrays.asList(validInternshipApplication), modelStub.internshipsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_duplicateInternshipApplication_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication validInternshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validInternshipApplication);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithInternshipApplication(validInternshipApplication);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_INTERNSHIP, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication nus \u003d new InternshipApplicationBuilder().withCompany(\"NUS\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication ntu \u003d new InternshipApplicationBuilder().withCompany(\"NTU\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        AddCommand addNusCommand \u003d new AddCommand(nus);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        AddCommand addNtuCommand \u003d new AddCommand(ntu);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(addNusCommand.equals(addNusCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        AddCommand addNUsCommandCopy \u003d new AddCommand(nus);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(addNusCommand.equals(addNUsCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(addNusCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(addNusCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(addNusCommand.equals(addNtuCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public Path getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setInternshipDiaryFilePath(Path internshipDiaryFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setInternshipDiary(ReadOnlyInternshipDiary internshipDiary) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public ReadOnlyInternshipDiary getInternshipDiary() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public void archiveInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public void unarchiveInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void deleteInternshipApplication(InternshipApplication target) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void addInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void setInternshipApplication(InternshipApplication target, InternshipApplication editedInternship) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public ObservableList\u003cInternshipApplication\u003e getFilteredInternshipApplicationList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void updateFilteredInternshipApplicationList(Predicate\u003cInternshipApplication\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        public void updateFilteredInternshipApplicationList(Comparator\u003cInternshipApplication\u003e comparator) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private class ModelStubWithInternshipApplication extends ModelStub {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        private final InternshipApplication internshipApplication;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ModelStubWithInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            this.internshipApplication \u003d internshipApplication;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this.internshipApplication.isSameInternshipApplication(internshipApplication);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private class ModelStubAcceptingInternshipAdded extends ModelStub {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        final ArrayList\u003cInternshipApplication\u003e internshipsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public boolean hasInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return internshipsAdded.stream().anyMatch(internshipApplication::isSameInternshipApplication);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public void addInternshipApplication(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            requireNonNull(internshipApplication);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            internshipsAdded.add(internshipApplication);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        public ReadOnlyInternshipDiary getInternshipDiary() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return new InternshipDiary();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 62,
      "FeliciaTay": 1,
      "wxwxwxwx9": 11,
      "gerhean": 6,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ArchivalCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code ArchivalCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ArchivalCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_noArchivedInternshipApplication_archivalShowsEmptyList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(new ArchivalCommand(), model, ArchivalCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_archiveOneInternshipApplication_archivalShowsOneArchivedInternshipApplication() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.archiveInternshipApplication(internshipApplication);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.archiveInternshipApplication(internshipApplication);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(new ArchivalCommand(), model, ArchivalCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ArchiveCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.InternshipApplicationUtil.createArchivedInternshipApplication;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * {@code ArchiveCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class ArchiveCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private ModelManager expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_archiveOneInternshipApplication_archivalViewCorrect() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication archivedInternship \u003d createArchivedInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.setInternshipDiary(new InternshipDiary());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.addInternshipApplication(archivedInternship);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.setInternshipDiary(new InternshipDiary());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            archiveCommand.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_archiveOneInternshipApplication_listViewCorrect() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                String.format(ArchiveCommand.MESSAGE_ARCHIVE_INTERNSHIP_SUCCESS, GOOGLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.archiveInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(archiveCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInternshipDiary().getInternshipList().size());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveCommand \u003d new ArchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandFailure(archiveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveFirstCommand \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveSecondCommand \u003d new ArchiveCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand archiveFirstCommandCopy \u003d new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(archiveFirstCommand.equals(archiveFirstCommandCopy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different internship application index -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(archiveFirstCommand.equals(archiveSecondCommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_emptyInternshipDiary_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_nonEmptyInternshipDiary_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.setInternshipDiary(new InternshipDiary());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different showStatistics value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, true)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different showStatistics value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 13,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.EditInternshipDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.EditInterviewDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_COMPANY_AMY \u003d \"Amy\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_COMPANY_BOB \u003d \"Bob\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_ROLE_AMY \u003d \"Software Engineer\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_ROLE_BOB \u003d \"Designer\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_DATE_AMY \u003d \"03 04 2016\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_DATE_BOB \u003d \"01 02 2020\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_PRIORITY_AMY \u003d \"2\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_PRIORITY_BOB \u003d \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_STATUS_AMY \u003d \"WISHLIST\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_STATUS_BOB \u003d \"APPLIED\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_ADDRESS_NUS \u003d \"123 Kent Ridge Road\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_ADDRESS_ONLINE \u003d Interview.ADDRESS_NOT_APPLICABLE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_DATE_NUS \u003d \"10 10 2010\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_DATE_ONLINE \u003d \"20 02 2020\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_IS_ONLINE_NUS \u003d \"false\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String VALID_IS_ONLINE_ONLINE \u003d \"true\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String COMPANY_DESC_AMY \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String COMPANY_DESC_BOB \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ROLE_DESC_AMY \u003d \" \" + PREFIX_ROLE + VALID_ROLE_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ROLE_DESC_BOB \u003d \" \" + PREFIX_ROLE + VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String PRIORITY_DESC_AMY \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_AMY;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String PRIORITY_DESC_BOB \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String STATUS_DESC_AMY \u003d \" \" + PREFIX_STATUS + VALID_STATUS_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String STATUS_DESC_BOB \u003d \" \" + PREFIX_STATUS + VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ADDRESS_DESC_NUS \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_NUS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ADDRESS_DESC_ONLINE \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_ONLINE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DATE_DESC_NUS \u003d \" \" + PREFIX_DATE + VALID_DATE_NUS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DATE_DESC_ONLINE \u003d \" \" + PREFIX_DATE + VALID_DATE_ONLINE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ONLINE_DESC_NUS \u003d \" \" + PREFIX_IS_ONLINE + VALID_IS_ONLINE_NUS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String ONLINE_DESC_ONLINE \u003d \" \" + PREFIX_IS_ONLINE + VALID_IS_ONLINE_ONLINE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_COMPANY_DESC \u003d \" \" + PREFIX_COMPANY + \"Google\u0026\"; // \u0027\u0026\u0027 not allowed in company"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_ROLE_DESC \u003d \" \" + PREFIX_ROLE + \"So\u0026\"; // \u0027\u0026\u0027 not allowed in company"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS + \" \"; // no invalid addresses"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"010420\"; // date format is DD MM YYYY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"a\"; // only numbers allowed in priority"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_STATUS + \"Not\"; // \u0027Not\u0027 is not a status"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String INVALID_BOOLEAN_DESC \u003d \" \" + PREFIX_IS_ONLINE + \"n\"; // \u0027n\u0027 is not a boolean"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final EditCommand.EditInternshipDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final EditCommand.EditInternshipDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InterviewEditCommand.EditInterviewDescriptor DESC_NUS;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InterviewEditCommand.EditInterviewDescriptor DESC_ONLINE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DESC_AMY \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_AMY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withRole(VALID_ROLE_AMY).withApplicationDate(VALID_DATE_AMY).withPriority(VALID_PRIORITY_AMY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withStatus(VALID_STATUS_AMY).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DESC_BOB \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withRole(VALID_ROLE_BOB).withApplicationDate(VALID_DATE_BOB).withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withStatus(VALID_STATUS_BOB).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DESC_NUS \u003d new EditInterviewDescriptorBuilder().withAddress(VALID_ADDRESS_NUS)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withInterviewDate(VALID_DATE_NUS).withIsOnline(VALID_IS_ONLINE_NUS).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DESC_ONLINE \u003d new EditInterviewDescriptorBuilder().withAddress(VALID_ADDRESS_ONLINE)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withInterviewDate(VALID_DATE_ONLINE).withIsOnline(VALID_IS_ONLINE_ONLINE).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * - the internship diary, filtered internship application list and selected internship application in"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     *   {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipDiary expectedInternshipDiary \u003d new InternshipDiary(actualModel.getInternshipDiary());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        List\u003cInternshipApplication\u003e expectedFilteredList \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new ArrayList\u003c\u003e(actualModel.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedInternshipDiary, actualModel.getInternshipDiary());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the internship application at the given"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code targetIndex} in the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * {@code model}\u0027s internship diary."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static void showInternshipApplicationAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredInternshipApplicationList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                model.getFilteredInternshipApplicationList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        final String[] splitName \u003d internshipApplication.getCompany().fullCompany.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.updateFilteredInternshipApplicationList("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new CompanyContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(1, model.getFilteredInternshipApplicationList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 82,
      "wxwxwxwx9": 5,
      "-": 90,
      "ongch00": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplicationToDelete \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(DeleteCommand.MESSAGE_DELETE_INTERNSHIP_SUCCESS, internshipApplicationToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.deleteInternshipApplication(internshipApplicationToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplicationToDelete \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_INTERNSHIP_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                internshipApplicationToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.deleteInternshipApplication(internshipApplicationToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showNoInternshipApplication(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInternshipDiary().getInternshipList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different internship application index -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no applications."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private void showNoInternshipApplication(Model model) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model.updateFilteredInternshipApplicationList(p -\u003e false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(model.getFilteredInternshipApplicationList().isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 20,
      "FeliciaTay": 1,
      "wxwxwxwx9": 15,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditInternshipDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.EditInternshipDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication editedInternshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInternshipDescriptorBuilder(editedInternshipApplication).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                editedInternshipApplication);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.setInternshipApplication(model.getFilteredInternshipApplicationList().get(0),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                editedInternshipApplication);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index indexLastInternship \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication lastInternshipApplication \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                model.getFilteredInternshipApplicationList().get(indexLastInternship.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplicationBuilder internshipApplicationInList \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InternshipApplicationBuilder(lastInternshipApplication);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication editedInternshipApplication \u003d internshipApplicationInList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withCompany(VALID_COMPANY_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastInternship, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                editedInternshipApplication);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.setInternshipApplication(lastInternshipApplication, editedInternshipApplication);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, new EditInternshipDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication editedInternshipApplication \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS, editedInternshipApplication);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_NOT_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplicationInFilteredList \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication editedInternshipApplication \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InternshipApplicationBuilder(internshipApplicationInFilteredList)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        .withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB).build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_INTERNSHIP_SUCCESS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                editedInternshipApplication);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new InternshipDiary(model.getInternshipDiary()), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.setInternshipApplication(model.getFilteredInternshipApplicationList().get(0),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                editedInternshipApplication);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication firstInternshipApplication \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                model.getFilteredInternshipApplicationList().get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder(firstInternshipApplication).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplicationInList \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                model.getInternshipDiary().getInternshipList().get(INDEX_SECOND_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInternshipDescriptorBuilder(internshipApplicationInList).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_INTERNSHIP);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInternshipDiary().getInternshipList().size());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_BOB).build());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, DESC_AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor copyDescriptor \u003d new EditInternshipDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, copyDescriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, DESC_AMY)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, DESC_BOB)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 60,
      "wxwxwxwx9": 20,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditInternshipDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.EditInternshipDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class EditInternshipDescriptorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditCommand.EditInternshipDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInternshipDescriptorBuilder(DESC_AMY).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different date -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withApplicationDate(VALID_DATE_BOB).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different role -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withRole(VALID_ROLE_BOB).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different priority -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withPriority(VALID_PRIORITY_BOB).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different status -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedAmy \u003d new EditInternshipDescriptorBuilder(DESC_AMY).withStatus(VALID_STATUS_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 31,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 3,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.ApplicationDateIsDatePredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.PhoneContainsNumbersPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.PriorityContainsNumbersPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.RoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate cFirstPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new CompanyContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate cSecondPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new CompanyContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate rFirstPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new RoleContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate rSecondPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new RoleContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate aFirstPredicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new AddressContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate aSecondPredicate \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new AddressContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate pFirstPredicate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PhoneContainsNumbersPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate pSecondPredicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PhoneContainsNumbersPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate eFirstPredicate \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EmailContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate eSecondPredicate \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EmailContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate dFirstPredicate \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate dSecondPredicate \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new ApplicationDateIsDatePredicate(LocalDate.of(2021, 03, 02));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate wFirstPredicate \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PriorityContainsNumbersPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate wSecondPredicate \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PriorityContainsNumbersPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate sFirstPredicate \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new StatusContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate sSecondPredicate \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new StatusContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findThirdCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sSecondPredicate), false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findFourthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pFirstPredicate, eFirstPredicate, dFirstPredicate, wSecondPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findFifthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pFirstPredicate, eFirstPredicate, dSecondPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findSixthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pFirstPredicate, eSecondPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findSeventhCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pSecondPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findEighthCommand \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aSecondPredicate,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findNinthCommand \u003d new FindCommand(List.of(cFirstPredicate, rSecondPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findTenthCommand \u003d new FindCommand(List.of(cSecondPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(List.of(cFirstPredicate, rFirstPredicate, aFirstPredicate,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                pFirstPredicate, eFirstPredicate, dFirstPredicate, wFirstPredicate, sFirstPredicate), false);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different argument -\u003e return false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findThirdCommand));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findFourthCommand));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findFifthCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSixthCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSeventhCommand));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findEighthCommand));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findNinthCommand));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(findFirstCommand.equals(findTenthCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_zeroKeywords_noInternshipApplicationFound() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate cPredicate \u003d prepareCompanyPredicate(\" \");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate rPredicate \u003d prepareRolePredicate(\" \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate aPredicate \u003d prepareAddressPredicate(\" \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate pPredicate \u003d preparePhonePredicate(\" \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate ePredicate \u003d prepareEmailPredicate(\" \");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate dPredicate \u003d new ApplicationDateIsDatePredicate(null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate wPredicate \u003d preparePriorityPredicate(\" \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate sPredicate \u003d prepareStatusPredicate(\" \");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand command \u003d new FindCommand(List.of(cPredicate, rPredicate, aPredicate, pPredicate, ePredicate,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                dPredicate, wPredicate, sPredicate), false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(cPredicate.and(rPredicate)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .and(aPredicate)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .and(pPredicate)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .and(ePredicate));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void execute_multipleKeywords_multipleInternshipApplicationsFound() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate cPredicate \u003d prepareCompanyPredicate(\"google facebook\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand command \u003d new FindCommand(List.of(cPredicate, new RoleContainsKeywordsPredicate(null) ,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new AddressContainsKeywordsPredicate(null), new PhoneContainsNumbersPredicate(null),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EmailContainsKeywordsPredicate(null), new ApplicationDateIsDatePredicate(null),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PriorityContainsNumbersPredicate(null), new StatusContainsKeywordsPredicate(null)),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(cPredicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void execute_isPreamble_multipleInternshipApplicationsFound() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate cPredicate \u003d prepareCompanyPredicate(\"goo\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate rPredicate \u003d prepareRolePredicate(\"goo\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate aPredicate \u003d prepareAddressPredicate(\"goo\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate pPredicate \u003d preparePhonePredicate(\"goo\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate ePredicate \u003d prepareEmailPredicate(\"goo\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate wPredicate \u003d preparePriorityPredicate(\"goo\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate sPredicate \u003d prepareStatusPredicate(\"goo\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand command \u003d new FindCommand(List.of(cPredicate, rPredicate, aPredicate, pPredicate, ePredicate,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                wPredicate, sPredicate), true);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Predicate\u003cInternshipApplication\u003e predicate \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                cPredicate.or(rPredicate).or(aPredicate).or(pPredicate).or(ePredicate).or(wPredicate).or(sPredicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(predicate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void execute_isNotPreamble_multipleInternshipApplicationsFound() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate ePredicate \u003d prepareEmailPredicate(\"google\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        FindCommand command \u003d new FindCommand(List.of(ePredicate), false);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(ePredicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Parses {@code userInput} into a {@code CompanyContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private CompanyContainsKeywordsPredicate prepareCompanyPredicate(String userInput) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new CompanyContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Parses {@code userInput} into a {@code RoleContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private RoleContainsKeywordsPredicate prepareRolePredicate(String userInput) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return new RoleContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Parses {@code userInput} into a {@code AddressContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private AddressContainsKeywordsPredicate prepareAddressPredicate(String userInput) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return new AddressContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Parses {@code userInput} into a {@code PhoneContainsNumbersPredicate}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private PhoneContainsNumbersPredicate preparePhonePredicate(String userInput) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return new PhoneContainsNumbersPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Parses {@code userInput} into a {@code EmailContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private EmailContainsKeywordsPredicate prepareEmailPredicate(String userInput) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return new EmailContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Parses {@code userInput} into a {@code PriorityContainsNumbersPredicate}."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private PriorityContainsNumbersPredicate preparePriorityPredicate(String userInput) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return new PriorityContainsNumbersPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     * Parses {@code userInput} into a {@code StatusContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ongch00"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private StatusContainsKeywordsPredicate prepareStatusPredicate(String userInput) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        return new StatusContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 9,
      "wxwxwxwx9": 1,
      "-": 60,
      "ongch00": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                SHOWING_HELP_MESSAGE, true, false, false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 3,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 4,
      "wxwxwxwx9": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ReminderCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static seedu.address.logic.commands.ReminderCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.logic.comparator.ApplicationDateThenInterviewDateComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.ApplicationDateDuePredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class ReminderCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model \u003d new ModelManager(getTypicalInternshipDiary(), userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInternshipDiary(), userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void execute_afterReminder_showsFilteredList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(new ApplicationDateDuePredicate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(new ApplicationDateThenInterviewDateComparator());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        CommandResult expectedMessage \u003d new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedMessage, new ReminderCommand().execute(model));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        System.err.println(model.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        System.err.println(expectedModel.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        System.err.println(model.equals(expectedModel));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertCommandSuccess(new ReminderCommand(), model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ReminderCommand firstReminder \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(firstReminder, firstReminder);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertNotEquals(\"reminder\", firstReminder);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertNotEquals(null, firstReminder);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 8,
      "FeliciaTay": 46,
      "ongch00": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INTERNSHIP_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.ApplicationDateComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.CompanyComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.PriorityComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.StatusComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private List\u003cComparator\u003cInternshipApplication\u003e\u003e comparators \u003d Arrays.asList("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new CompanyComparator(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new ApplicationDateComparator(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new PriorityComparator(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new StatusComparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e companyComparator \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e dateComparator \u003d new ApplicationDateComparator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        SortCommand sortCompanyCommand \u003d new SortCommand(companyComparator);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        SortCommand sortDateCommand \u003d new SortCommand(dateComparator);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sortCompanyCommand, sortCompanyCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        SortCommand sortCompanyCommandCopy \u003d new SortCommand(companyComparator);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sortCompanyCommand, sortCompanyCommandCopy);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(1, sortCompanyCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(null, sortCompanyCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotEquals(sortCompanyCommand, sortDateCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void execute_anyComparator_sameNumberOfInternshipApplicationFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        int initialModelSize \u003d model.getFilteredInternshipApplicationList().size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INTERNSHIP_LISTED_OVERVIEW, initialModelSize);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        for (Comparator\u003cInternshipApplication\u003e comparator : comparators) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            SortCommand command \u003d new SortCommand(comparator);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            expectedModel.updateFilteredInternshipApplicationList(comparator);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "gerhean": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StatisticsCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.StatisticsCommand.SHOWING_STATISTICS_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains unit tests for {@code StatisticsCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class StatisticsCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_statistics_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                SHOWING_STATISTICS_MESSAGE, false, true, false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandSuccess(new StatisticsCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UnarchiveCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showInternshipApplicationAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.InternshipApplicationUtil.createArchivedInternshipApplication;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * {@code UnarchiveCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class UnarchiveCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private ModelManager expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_unarchiveOneInternshipApplication_archivalViewSuccess() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication archivedInternship \u003d createArchivedInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.setInternshipDiary(new InternshipDiary());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(archivedInternship);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            unarchiveCommand.execute(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.setInternshipDiary(new InternshipDiary());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_unarchiveOneInternshipApplication_listViewSuccess() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.setInternshipDiary(new InternshipDiary());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.archiveInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            unarchiveCommand.execute(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.updateFilteredInternshipApplicationList(Model.PREDICATE_SHOW_NOT_ARCHIVED_INTERNSHIPS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.setInternshipDiary(new InternshipDiary());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedModel.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(model, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList().size() + 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandFailure(unarchiveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        showInternshipApplicationAtIndex(model, INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInternshipDiary().getInternshipList().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveCommand \u003d new UnarchiveCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertCommandFailure(unarchiveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveFirstCommand \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveSecondCommand \u003d new UnarchiveCommand(INDEX_SECOND_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(unarchiveFirstCommand.equals(unarchiveFirstCommand));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand unarchiveFirstCommandCopy \u003d new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(unarchiveFirstCommand.equals(unarchiveFirstCommandCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(1));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different internship application index -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(unarchiveFirstCommand.equals(unarchiveSecondCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/interviewsubcommands/EditInterviewDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_NUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ONLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_ONLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_ONLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_IS_ONLINE_ONLINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.EditInterviewDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class EditInterviewDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewEditCommand.EditInterviewDescriptor(DESC_NUS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(DESC_NUS.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(DESC_NUS.equals(DESC_NUS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(DESC_ONLINE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor editedNus \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInterviewDescriptorBuilder(DESC_NUS).withAddress(VALID_ADDRESS_ONLINE).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(editedNus));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different date -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedNus \u003d new EditInterviewDescriptorBuilder(DESC_NUS).withInterviewDate(VALID_DATE_ONLINE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(editedNus));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different isOnline -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedNus \u003d new EditInterviewDescriptorBuilder(DESC_NUS).withIsOnline(VALID_IS_ONLINE_ONLINE).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(DESC_NUS.equals(editedNus));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/interviewsubcommands/InterviewAddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiaryWithInterviews;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.NUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.ONLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.ORCHARD_TOWER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Contains integration tests with model and unit test for {@code InterviewAddCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewAddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void constructor_nullInterview_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewAddCommand(null, new InterviewBuilder().build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewBuilder().build());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                command.execute(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_validArguments_addSuccess() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new InterviewBuilder(ORCHARD_TOWER).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        CommandResult result \u003d command.execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(String.format(InterviewAddCommand.MESSAGE_SUCCESS, interview), result.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(internshipApplication.hasInterview(interview));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_duplicateInterview_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d internshipApplication"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(InterviewAddCommand.MESSAGE_DUPLICATE_INTERVIEW, internshipApplication), () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        command.execute(model));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, NUS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand copy \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, NUS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different object but same variables -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(command.equals(copy));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different type -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(5));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different index -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewAddCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, NUS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different interview -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, ONLINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/interviewsubcommands/InterviewDeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERVIEW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiaryWithInterviews;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * Contains integration test with model and unit tests for {@code InterviewDeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewDeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewDeleteCommand(null, INDEX_FIRST_INTERVIEW));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                command.execute(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_validIndex_success() throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interviewToDelete \u003d internshipApplication.getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(InterviewDeleteCommand.MESSAGE_SUCCESS, interviewToDelete);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedMessage, command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(!internshipApplication.hasInterview(interviewToDelete));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()).getInterviews().size() + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                outOfBoundIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                command.execute(model));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand command \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand copy \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different object but same variables -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(command.equals(copy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different type -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(5));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different internshipIndex -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewDeleteCommand(INDEX_SECOND_INTERNSHIP_APPLICATION, INDEX_FIRST_INTERVIEW);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different interviewIndex -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_SECOND_INTERVIEW);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/interviewsubcommands/InterviewEditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERVIEW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiaryWithInterviews;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.ONLINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.ORCHARD_TOWER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.EditInterviewDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewEditCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewEditCommand.EditInterviewDescriptor editInterviewDescriptor \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            new EditInterviewDescriptorBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void constructor_nullArguments_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        null, editInterviewDescriptor));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewEditCommand(null, INDEX_FIRST_INTERVIEW, editInterviewDescriptor));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        INDEX_FIRST_INTERVIEW, null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_nullModel_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                command.execute(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_validArguments_success() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interviewToEdit \u003d internshipApplication.getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW, new EditInterviewDescriptorBuilder(ONLINE).build());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview editedInterview \u003d new InterviewBuilder(ONLINE).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(InterviewEditCommand.MESSAGE_EDIT_INTERVIEW_SUCCESS, editedInterview);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedMessage, command.execute(model).getFeedbackToUser());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(!internshipApplication.hasInterview(interviewToEdit));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_duplicateInterview_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interviewToEdit \u003d internshipApplication.getInterview(INDEX_FIRST_INTERVIEW.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW, new EditInterviewDescriptorBuilder(interviewToEdit).build());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(InterviewEditCommand.MESSAGE_DUPLICATE_INTERVIEW, internshipApplication), () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                command.execute(model));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased()).getInterviews().size() + 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                outOfBoundIndex, editInterviewDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_INTERVIEW_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                command.execute(model));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand copy \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //same object -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different object but same variables -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(command.equals(copy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different type -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(5));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different internshipIndex -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewEditCommand(INDEX_SECOND_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW, editInterviewDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different interviewIndex -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_SECOND_INTERVIEW, editInterviewDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //different editInterviewDescriptor -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        copy \u003d new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW, new EditInterviewDescriptorBuilder(ORCHARD_TOWER).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(command.equals(copy));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/interviewsubcommands/InterviewListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.commands.interviewsubcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.interviewsubcommands.InterviewListCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        model \u003d new ModelManager(TypicalInternshipApplications"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .getTypicalInternshipDiaryWithInterviews(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void constructor_nullIndex_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewListCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_validIndex_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d model.getFilteredInternshipApplicationList()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .get(INDEX_FIRST_INTERNSHIP_APPLICATION.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandSuccess(new InterviewListCommand(INDEX_FIRST_INTERNSHIP_APPLICATION), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(MESSAGE_SUCCESS, internshipApplication), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertCommandFailure(new InterviewListCommand(Index.fromZeroBased(10000)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/comparator/ApplicationDateComparatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by companies in lexicographical order."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class ApplicationDateComparatorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final ApplicationDate date1 \u003d new ApplicationDate(LocalDate.of(2019, 11, 1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final ApplicationDate date2 \u003d new ApplicationDate(LocalDate.of(2019, 11, 10));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final ApplicationDate date3 \u003d new ApplicationDate(LocalDate.of(2019, 12, 5));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final ApplicationDate date4 \u003d new ApplicationDate(LocalDate.of(2019, 12, 10));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDateComparator applicationDateComparator1 \u003d new ApplicationDateComparator();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDateComparator applicationDateComparator2 \u003d new ApplicationDateComparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(applicationDateComparator1, applicationDateComparator1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same kind of object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(applicationDateComparator1, applicationDateComparator2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_internshipApplication_correct() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDateComparator applicationDateComparator \u003d new ApplicationDateComparator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withApplicationDate(date1).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withApplicationDate(date2).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withApplicationDate(date1).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withApplicationDate(date4).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, applicationDateComparator.compare(google, google));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only same applicationDate"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, applicationDateComparator.compare(google1, facebook1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only applicationDate is different"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(applicationDateComparator.compare(google1, google2) \u003c 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(applicationDateComparator.compare(google2, google1) \u003e 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything is different"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(applicationDateComparator.compare(google1, facebook2) \u003c 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(applicationDateComparator.compare(facebook2, google2) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_unsortedList_listSorted() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ApplicationDateComparator applicationDateComparator \u003d new ApplicationDateComparator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withApplicationDate(date1).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withApplicationDate(date3).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withApplicationDate(date2).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withApplicationDate(date3).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        unsorted.sort(applicationDateComparator);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sorted, unsorted);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/comparator/ApplicationDateThenInterviewDateComparatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class ApplicationDateThenInterviewDateComparatorTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void compare() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(currentDate.compareTo(currentDate), 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internship1 \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship1.withApplicationDate(new ApplicationDate(currentDate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internship2 \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship2.withApplicationDate(new ApplicationDate(currentDate.plus(1, ChronoUnit.DAYS)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internship3 \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship3.withApplicationDate(new ApplicationDate(currentDate.plus(1, ChronoUnit.DAYS)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // an application\u0027s application date compared to itself -\u003e returns 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(internship1.getApplicationDate().compareTo(internship1.getApplicationDate()), 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // comparing two applications with different application dates -\u003e does not return 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertNotEquals(internship1.getApplicationDate().compareTo(internship2.getApplicationDate()), 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // comparing internship1(with earlier application date) and internship2 (with later application date)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // -\u003e returns negative int"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(internship1.getApplicationDate().compareTo(internship2.getApplicationDate()), -1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // with same application date, comparing internship2(with earlier \u0027earliest interview date\u0027) and"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // internship3(with later \u0027earliest interview date\u0027) --\u003e returns negative int"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview newInterviewForInternship2 \u003d new Interview(true,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new ApplicationDate(currentDate.plus(12, ChronoUnit.DAYS)),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview anotherInterviewForInternship2 \u003d new Interview(true,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new ApplicationDate(currentDate.plus(25, ChronoUnit.DAYS)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship2.withInterview(newInterviewForInternship2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship2.withInterview(anotherInterviewForInternship2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview newInterviewForInternship3 \u003d new Interview(true,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new ApplicationDate(currentDate.plus(16, ChronoUnit.DAYS)),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internship3.withInterview(newInterviewForInternship3);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Optional\u003cInterview\u003e earliestInterviewForInternship2 \u003d internship2.getEarliestInterview(currentDate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(earliestInterviewForInternship2.isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Optional\u003cInterview\u003e earliestInterviewForInternship3 \u003d internship3.getEarliestInterview(currentDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(earliestInterviewForInternship3.isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate earliestInterviewDateForInternship2 \u003d earliestInterviewForInternship2.get().getInterviewDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate earliestInterviewDateForInternship3 \u003d earliestInterviewForInternship3.get().getInterviewDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(earliestInterviewDateForInternship2.compareTo(earliestInterviewDateForInternship3), -4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Comparator\u003cInternshipApplication\u003e applicationDateThenInterviewDateComparator \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new ApplicationDateThenInterviewDateComparator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertEquals(applicationDateThenInterviewDateComparator, applicationDateThenInterviewDateComparator);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertNotEquals(1, applicationDateThenInterviewDateComparator);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertNotEquals(null, applicationDateThenInterviewDateComparator);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/comparator/CompanyComparatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by companies in lexicographical order."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class CompanyComparatorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CompanyComparator companyComparator1 \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CompanyComparator companyComparator2 \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(companyComparator1, companyComparator1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same kind of object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(companyComparator1, companyComparator2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_internshipApplication_correct() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CompanyComparator companyComparator \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google).withCompany(\"A\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google).withCompany(\"C\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"A\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"D\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, companyComparator.compare(google, google));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only same company"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, companyComparator.compare(google1, facebook1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only company is different"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(companyComparator.compare(google1, google2) \u003c 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(companyComparator.compare(google2, google1) \u003e 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only everything is different"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(companyComparator.compare(google1, facebook2) \u003c 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(companyComparator.compare(facebook2, google2) \u003e 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_unsortedList_listSorted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        CompanyComparator companyComparator \u003d new CompanyComparator();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google).withCompany(\"A\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google).withCompany(\"C\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"B\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook).withCompany(\"D\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        unsorted.sort(companyComparator);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sorted, unsorted);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/comparator/PriorityComparatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by Priority."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class PriorityComparatorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        PriorityComparator priorityComparator1 \u003d new PriorityComparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        PriorityComparator priorityComparator2 \u003d new PriorityComparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(priorityComparator1, priorityComparator1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same kind of object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(priorityComparator1, priorityComparator2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_internshipApplication_correct() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        PriorityComparator priorityComparator \u003d new PriorityComparator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withPriority(1).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withPriority(3).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withPriority(1).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withPriority(5).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, priorityComparator.compare(google, google));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only same priority"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, priorityComparator.compare(google1, facebook1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only priority is different"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(priorityComparator.compare(google1, google2) \u003c 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(priorityComparator.compare(google2, google1) \u003e 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything is different"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(priorityComparator.compare(google1, facebook2) \u003c 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(priorityComparator.compare(facebook2, google2) \u003e 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_unsortedList_listSorted() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        PriorityComparator priorityComparator \u003d new PriorityComparator();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withPriority(1).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withPriority(3).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withPriority(2).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withPriority(4).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        unsorted.sort(priorityComparator);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sorted, unsorted);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/comparator/StatusComparatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.comparator;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": " * Comparator for sorting InternshipApplication by Status."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class StatusComparatorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StatusComparator statusComparator1 \u003d new StatusComparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StatusComparator statusComparator2 \u003d new StatusComparator();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(statusComparator1, statusComparator1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same kind of object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(statusComparator1, statusComparator2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_internshipApplication_correct() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StatusComparator statusComparator \u003d new StatusComparator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withStatus(Status.WISHLIST).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withStatus(Status.APPLIED).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withStatus(Status.WISHLIST).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withStatus(Status.OFFERED).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, statusComparator.compare(google, google));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only same status"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(0, statusComparator.compare(google1, facebook1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // only status is different"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(statusComparator.compare(google1, google2) \u003c 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(statusComparator.compare(google2, google1) \u003e 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // everything is different"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(statusComparator.compare(google1, facebook2) \u003c 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(statusComparator.compare(facebook2, google2) \u003e 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void compare_unsortedList_listSorted() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        StatusComparator statusComparator \u003d new StatusComparator();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google \u003d TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook \u003d TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google1 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withStatus(Status.WISHLIST).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication google2 \u003d new InternshipApplicationBuilder(google)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withStatus(Status.INTERVIEW).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook1 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withStatus(Status.APPLIED).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication facebook2 \u003d new InternshipApplicationBuilder(facebook)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .withStatus(Status.OFFERED).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e unsorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(unsorted, google2, google1, facebook1, facebook2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        unsorted.sort(statusComparator);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ArrayList\u003cInternshipApplication\u003e sorted \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Collections.addAll(sorted, google1, facebook1, google2, facebook2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(sorted, unsorted);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //whitespace only preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // multiple companies - last company accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_AMY + COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // Add new test cases for Role, Priority, Date, Status"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipApplication expectedInternshipApplication;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // missing phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withPhone(\"\").build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // missing email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withEmail(\"\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // missing address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withAddress(\"\").build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // missing priority"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedInternshipApplication \u003d new InternshipApplicationBuilder(BOB).withPriority(\"5\").build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        + ROLE_DESC_BOB + DATE_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                new AddCommand(expectedInternshipApplication));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // missing company prefix"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, VALID_COMPANY_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // missing role prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + VALID_ROLE_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ROLE_DESC_BOB + VALID_DATE_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // missing status prefix"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + VALID_STATUS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseFailure(parser, VALID_COMPANY_BOB + VALID_ROLE_BOB + VALID_DATE_BOB + VALID_STATUS_BOB,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // invalid company"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INVALID_COMPANY_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // no invalid address"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        //         + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + INVALID_ROLE_DESC + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB, Role.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ROLE_DESC_BOB + INVALID_DATE_DESC + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \"Date should be in the form: DD MM YYYY\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ROLE_DESC_BOB + DATE_DESC_BOB + INVALID_PRIORITY_DESC + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // invalid status"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + INVALID_STATUS_DESC, Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INVALID_COMPANY_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        + VALID_ADDRESS_BOB + INVALID_ROLE_DESC + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + COMPANY_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ADDRESS_DESC_BOB + ROLE_DESC_BOB + DATE_DESC_BOB + PRIORITY_DESC_BOB + STATUS_DESC_BOB,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 78,
      "wxwxwxwx9": 5,
      "gerhean": 29,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROLE_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROLE_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditInternshipDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.EditInternshipDescriptorBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, VALID_COMPANY_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"-5\" + COMPANY_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"0\" + COMPANY_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COMPANY_DESC, Company.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        //         Address.MESSAGE_CONSTRAINTS); // no invalid address"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ROLE_DESC, Role.MESSAGE_CONSTRAINTS); // invalid role"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS); // invalid priority"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STATUS_DESC, Status.MESSAGE_CONSTRAINTS); // invalid status"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                \"Date should be in the form: DD MM YYYY\"); // invalid date"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COMPANY_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + ROLE_DESC_AMY + PRIORITY_DESC_AMY"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + COMPANY_DESC_AMY + DATE_DESC_AMY + STATUS_DESC_BOB;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_AMY)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withRole(VALID_ROLE_AMY).withPriority(VALID_PRIORITY_AMY).withStatus(VALID_STATUS_BOB)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withApplicationDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // company"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + COMPANY_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInternshipDescriptorBuilder().withCompany(VALID_COMPANY_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditInternshipDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditInternshipDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //Add new test cases for Role, Priority, Date, Status"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditInternshipDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /* Test for tags from AB3"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        EditInternshipDescriptor descriptor \u003d new EditInternshipDescriptorBuilder().build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 53,
      "wxwxwxwx9": 20,
      "gerhean": 4,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.ApplicationDateIsDatePredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.PhoneContainsNumbersPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.PriorityContainsNumbersPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.RoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // no leading and trailing whitespaces on non preamble find"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new FindCommand(List.of(new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Facebook\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new RoleContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Engineer\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new PhoneContainsNumbersPredicate(Arrays.asList(\"12345\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new EmailContainsKeywordsPredicate(Arrays.asList(\"Alice\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01)),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new PriorityContainsNumbersPredicate(Arrays.asList(\"5\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new StatusContainsKeywordsPredicate(Arrays.asList(\"Active\"))),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \" c/Google Facebook r/Software Engineer a/Main Street p/12345 e/Alice \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                + \"d/01 02 2020 w/5 s/Active\", expectedFindCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // multiple whitespaces between keywords on non preamble find"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \" c/Google Facebook \\n \\t\\n r/Software Engineer     \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        + \"a/Main Street     \\t      \\n    p/12345  \\t  e/Alice d/01 02 2020 \\t w/5 \\n s/Active\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // no leading and trailing whitespaces on preamble find"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        expectedFindCommand \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new FindCommand(List.of(new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new RoleContainsKeywordsPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new AddressContainsKeywordsPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new PhoneContainsNumbersPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new EmailContainsKeywordsPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new PriorityContainsNumbersPredicate(Arrays.asList(\"Google\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        new StatusContainsKeywordsPredicate(Arrays.asList(\"Google\"))),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \"Google c/Google Facebook r/Software Engineer a/Main Street p/12345 e/Alice \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                + \"d/01 02 2020 w/5 s/Active\", expectedFindCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \"Google\", expectedFindCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // multiple whitespaces between keywords on preamble find"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \"Google c/Google Facebook \\n \\t\\n r/Software Engineer     \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                        + \"a/Main Street     \\t      \\n    p/12345  \\t  e/Alice d/01 02 2020 \\t w/5 \\n s/Active\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertParseSuccess(parser, \"\\t  Google \\n\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                expectedFindCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "ongch00": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InternshipDiaryParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.ArchivalCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.ArchiveCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.logic.commands.UnarchiveCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewAddCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewDeleteCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.ApplicationDateIsDatePredicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.PhoneContainsNumbersPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.PriorityContainsNumbersPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.RoleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.testutil.EditInternshipDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.EditInterviewDescriptorBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.testutil.InternshipApplicationUtil;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.InterviewUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InternshipDiaryParserTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private final InternshipDiaryParser parser \u003d new InternshipDiaryParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .parseCommand(InternshipApplicationUtil.getAddCommand(internshipApplication));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(new AddCommand(internshipApplication), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EditCommand.EditInternshipDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EditInternshipDescriptorBuilder(internshipApplication).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                + InternshipApplicationUtil.getEditInternshipApplicationDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, descriptor), command);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"c/google\", \"r/engineer\", \"a/main\", \"p/12345\", \"e/alice\", \"d/01 02 2020\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \"w/5\", \"s/Active\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(new FindCommand(List.of(new CompanyContainsKeywordsPredicate(Arrays.asList(\"google\")),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new RoleContainsKeywordsPredicate(Arrays.asList(\"engineer\")),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new AddressContainsKeywordsPredicate(Arrays.asList(\"main\")),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PhoneContainsNumbersPredicate(Arrays.asList(\"12345\")),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EmailContainsKeywordsPredicate(Arrays.asList(\"alice\")),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01)),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PriorityContainsNumbersPredicate(Arrays.asList(\"5\")),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new StatusContainsKeywordsPredicate(Arrays.asList(\"Active\"))),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                false), command);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCommand_interview_list() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewListCommand command \u003d (InterviewListCommand) parser.parseCommand(InterviewCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" list\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(new InterviewListCommand(INDEX_FIRST_INTERNSHIP_APPLICATION), command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCommand_interview_add() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new InterviewBuilder().build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewAddCommand command \u003d (InterviewAddCommand)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                parser.parseCommand(InterviewUtil.getAddCommand(interview));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, interview), command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCommand_interview_delete() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewDeleteCommand command \u003d (InterviewDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                InterviewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + \" delete \" + INDEX_FIRST_INTERVIEW.getOneBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_FIRST_INTERVIEW), command);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCommand_interview_edit() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new InterviewBuilder().build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand.EditInterviewDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new EditInterviewDescriptorBuilder(interview).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewEditCommand command \u003d (InterviewEditCommand) parser.parseCommand("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                InterviewCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + INDEX_FIRST_INTERVIEW.getOneBased()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + \" \" + InterviewUtil.getEditInterviewApplicationDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(new InterviewEditCommand(INDEX_FIRST_INTERNSHIP_APPLICATION,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INDEX_FIRST_INTERVIEW, descriptor), command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parseCommand_stats() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(parser.parseCommand(StatisticsCommand.COMMAND_WORD) instanceof StatisticsCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(parser.parseCommand(StatisticsCommand.COMMAND_WORD + \" 3\") instanceof StatisticsCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parseCommand_archive() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ArchiveCommand command \u003d (ArchiveCommand) parser.parseCommand("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                ArchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(new ArchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION), command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parseCommand_unarchive() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        UnarchiveCommand command \u003d (UnarchiveCommand) parser.parseCommand("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                UnarchiveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(new UnarchiveCommand(INDEX_FIRST_INTERNSHIP_APPLICATION), command);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void parseCommand_archival() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(parser.parseCommand(ArchivalCommand.COMMAND_WORD) instanceof ArchivalCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(parser.parseCommand(ArchivalCommand.COMMAND_WORD + \" 3\") instanceof ArchivalCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 49,
      "wxwxwxwx9": 39,
      "-": 66,
      "ongch00": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InterviewCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_NUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_ONLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_NUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_ONLINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BOOLEAN_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ONLINE_DESC_NUS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ONLINE_DESC_ONLINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERVIEW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.NUS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.ONLINE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewAddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewDeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Parser parser \u003d new InterviewCommandParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_generalBadIndex_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"a list\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_generalBadPreamble_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1 list and more\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_generalBadCommandCode_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, \"1 notACode\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_listAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" list\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewListCommand(INDEX_FIRST_INTERNSHIP_APPLICATION));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_addAllFieldsPresent_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview expectedInterview \u003d new InterviewBuilder(NUS).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //with preamble white space"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + PREAMBLE_WHITESPACE + ADDRESS_DESC_NUS + ONLINE_DESC_NUS + DATE_DESC_NUS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //multiple address - last address accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ADDRESS_DESC_ONLINE + ONLINE_DESC_NUS + DATE_DESC_NUS + ADDRESS_DESC_NUS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //multiple date - last date accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ADDRESS_DESC_NUS + DATE_DESC_ONLINE + ONLINE_DESC_NUS + DATE_DESC_NUS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //multiple isOnline - last isOnline accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        + ADDRESS_DESC_NUS + ONLINE_DESC_ONLINE + DATE_DESC_NUS + ONLINE_DESC_NUS,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_addNotOnlineFieldsPresent_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview expectedInterview \u003d new InterviewBuilder(ONLINE).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_ONLINE + ONLINE_DESC_ONLINE + DATE_DESC_ONLINE,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewAddCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, expectedInterview));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_addCompulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //missing isOnline"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_NUS + DATE_DESC_NUS, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //missing date"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_NUS + ONLINE_DESC_NUS, expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //not online but missing address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ONLINE_DESC_NUS + DATE_DESC_NUS, expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_addInvalidValue_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //invalid address"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //        + INVALID_ADDRESS_DESC + DATE_DESC_NUS + ONLINE_DESC_NUS, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //invalid date"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_NUS + INVALID_DATE_DESC + ONLINE_DESC_NUS, ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //invalid boolean"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_NUS + DATE_DESC_NUS + INVALID_BOOLEAN_DESC, BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_deleteBadPreamble_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" delete \","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_deleteValidArgs_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseSuccess(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" delete \""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + INDEX_FIRST_INTERVIEW.getOneBased(),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InterviewDeleteCommand(INDEX_FIRST_INTERNSHIP_APPLICATION, INDEX_FIRST_INTERVIEW));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_deleteInvalidArgs_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" delete \""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"notValid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_editBadPreamble_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_editInvalidIndex_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + \"notValid\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, InterviewEditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_editNoEdits_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + INDEX_FIRST_INTERVIEW.getOneBased(), InterviewEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parse_editInvalidValue_failure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //invalid date"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + INDEX_FIRST_INTERVIEW.getOneBased() + \" \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_NUS + INVALID_DATE_DESC + ONLINE_DESC_NUS, ApplicationDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //invalid boolean"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertParseFailure(parser, INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" edit \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + INDEX_FIRST_INTERVIEW.getOneBased() + \" \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + ADDRESS_DESC_NUS + DATE_DESC_NUS + INVALID_BOOLEAN_DESC, BooleanUtil.INVALID_BOOLEAN);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.interviewcode.InterviewCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_COMPANY \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_ROLE \u003d \"R@chel\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_DATE \u003d \"010120\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"r\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_STATUS \u003d \"status\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_INTERVIEW_PREAMBLE_1String \u003d \"0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_INTERVIEW_PREAMBLE_4Strings \u003d \"this is four strings\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_INTERVIEW_CODE \u003d \"invalid\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_COMPANY \u003d \"Google\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_ROLE \u003d \"Software Engineer\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_DATE \u003d \"01 01 2020\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_STATUS \u003d \"Applied\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_INTERVIEW_PREAMBLE \u003d \"1 add\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_INTERVIEW_CODE \u003d \"add\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(INDEX_FIRST_INTERNSHIP_APPLICATION, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(INDEX_FIRST_INTERNSHIP_APPLICATION, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCompany_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCompany((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseCompany_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCompany(INVALID_COMPANY));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseCompany_validValueWithoutWhitespace_returnsCompany() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Company expectedCompany \u003d new Company(VALID_COMPANY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedCompany, ParserUtil.parseCompany(VALID_COMPANY));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseCompany_validValueWithWhitespace_returnsTrimmedCompany() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String companyWithWhitespace \u003d WHITESPACE + VALID_COMPANY + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Company expectedCompany \u003d new Company(VALID_COMPANY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedCompany, ParserUtil.parseCompany(companyWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseRole_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRole((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseRole_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRole(INVALID_ROLE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseRole_validValueWithoutWhitespace_returnsRole() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Role expectedRole \u003d new Role(VALID_ROLE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedRole, ParserUtil.parseRole(VALID_ROLE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseRole_validValueWithWhitespace_returnsTrimmedRole() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String roleWithWhitespace \u003d WHITESPACE + VALID_ROLE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Role expectedRole \u003d new Role(VALID_ROLE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedRole, ParserUtil.parseRole(roleWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseApplicationDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseApplicationDate((String) null));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseApplicationDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseApplicationDate(INVALID_DATE));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseApplicationDate_validValueWithoutWhitespace_returnsApplicationDate() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDate expectedApplicationDate \u003d new ApplicationDate(VALID_DATE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedApplicationDate, ParserUtil.parseApplicationDate(VALID_DATE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseApplicationDate_validValueWithWhitespace_returnsTrimmedApplicationDate() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String dateWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDate expectedApplicationDate \u003d new ApplicationDate(VALID_DATE);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedApplicationDate, ParserUtil.parseApplicationDate(dateWithWhitespace));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewPreamble_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInterviewPreamble((String) null));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewPreamble_validValueWithoutWhiteSpace_returnsStringArray() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String preamble \u003d VALID_INTERVIEW_PREAMBLE;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] expectedArray \u003d new String[] {\"1\", \"add\"};"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] resultArray \u003d ParserUtil.parseInterviewPreamble(preamble);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedArray[0], resultArray[0]);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedArray[1], resultArray[1]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewPreamble_validValueWithWhiteSpace_returnsStringArray() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String preamble \u003d WHITESPACE + VALID_INTERVIEW_PREAMBLE + WHITESPACE;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] expectedArray \u003d new String[] {\"1\", \"add\"};"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String[] resultArray \u003d ParserUtil.parseInterviewPreamble(preamble);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedArray[0], resultArray[0]);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedArray[1], resultArray[1]);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewPreamble_invalidValueWithInsufficientStrings_throwsParseException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .parseInterviewPreamble(INVALID_INTERVIEW_PREAMBLE_1String));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewPreamble_invalidValueWithExcessStrings_throwsParseException() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .parseInterviewPreamble(INVALID_INTERVIEW_PREAMBLE_4Strings));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseInterviewCode((String) null));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseInterviewCode(INVALID_INTERVIEW_CODE));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewCode_validValueWithoutWhiteSpace_returnsInterviewCode() throws ParseException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewCode interviewCode \u003d InterviewCode.ADD;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(interviewCode, ParserUtil.parseInterviewCode(VALID_INTERVIEW_CODE));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseInterviewCode_validValueWithWhiteSpace_returnsInterviewCode() throws ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String codeWithWhitespace \u003d WHITESPACE + VALID_INTERVIEW_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InterviewCode interviewCode \u003d InterviewCode.ADD;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(interviewCode, ParserUtil.parseInterviewCode(codeWithWhitespace));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseStatus_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseStatus((String) null));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseStatus_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseStatus(INVALID_STATUS));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseStatus_validValueWithoutWhiteSpace_returnsStatus() throws ParseException {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Status status \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(status, ParserUtil.parseStatus(VALID_STATUS));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parseStatus_validValueWithWhiteSpace_returnsStatus() throws ParseException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String statusWithWhitespace \u003d WHITESPACE + VALID_STATUS + WHITESPACE;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Status status \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(status, ParserUtil.parseStatus(statusWithWhitespace));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parsePriority_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void parsePriority_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseStatus_validValueWithoutWhitespace_returnsStatus() throws Exception {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Status expectedStatus \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedStatus, ParserUtil.parseStatus(VALID_STATUS));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void parseStatus_validValueWithWhitespace_returnsTrimmedStatus() throws Exception {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String statusWithWhitespace \u003d WHITESPACE + VALID_STATUS + WHITESPACE;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        Status expectedStatus \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertEquals(expectedStatus, ParserUtil.parseStatus(statusWithWhitespace));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /* below are all tests for Tags"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 137,
      "wxwxwxwx9": 3,
      "gerhean": 4,
      "-": 170,
      "ongch00": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.ApplicationDateComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.CompanyComparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.PriorityComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.logic.comparator.StatusComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parse_invalidArg_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // includes stuff other than a single Prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseFailure(parser, PREFIX_COMPANY.toString() + \" random\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void parse_validArgs_returnsCorrectSortCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        SortCommand expectedSortCommand \u003d new SortCommand(new CompanyComparator());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, PREFIX_COMPANY.toString(), expectedSortCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(new ApplicationDateComparator());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, PREFIX_DATE.toString(), expectedSortCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(new PriorityComparator());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, PREFIX_PRIORITY.toString(), expectedSortCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        expectedSortCommand \u003d new SortCommand(new StatusComparator());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertParseSuccess(parser, PREFIX_STATUS.toString(), expectedSortCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/model/InternshipDiaryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.exceptions.DuplicateInternshipApplicationException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class InternshipDiaryTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private final InternshipDiary internshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(Collections.emptyList(), internshipDiary.getInternshipList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e internshipDiary.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void resetData_withValidReadOnlyInternshipDiary_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary newData \u003d getTypicalInternshipDiary();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(newData, internshipDiary);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void resetData_withDuplicateInternship_throwsDuplicateInternshipException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Two internship applications with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .withAddress(\"1600 Amphitheatre Parkway\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cInternshipApplication\u003e newInternshipApplications \u003d Arrays.asList(GOOGLE, editedGoogle);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiaryStub newData \u003d new InternshipDiaryStub(newInternshipApplications);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(DuplicateInternshipApplicationException.class, () -\u003e internshipDiary.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternship_nullInternship_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e internshipDiary.hasInternship(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternship_internshipNotInInternshipDiary_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(internshipDiary.hasInternship(GOOGLE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternship_internshipInInternshipDiary_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(internshipDiary.hasInternship(GOOGLE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternship_internshipApplicationWithSameIdentityFieldsInInternshipDiary_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .withPriority(1)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withStatus(Status.APPLIED)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(internshipDiary.hasInternship(editedGoogle));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void getInternshipList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e internshipDiary.getInternshipList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * A stub ReadOnlyInternshipDiary whose internship list can violate interface constraints."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private static class InternshipDiaryStub implements ReadOnlyInternshipDiary {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        private final ObservableList\u003cInternshipApplication\u003e internshipApplications \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiaryStub(Collection\u003cInternshipApplication\u003e internshipApplications) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            this.internshipApplications.setAll(internshipApplications);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        public ObservableList\u003cInternshipApplication\u003e getInternshipList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            return internshipApplications;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 1,
      "wxwxwxwx9": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INTERNSHIPS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.predicate.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.testutil.InternshipDiaryBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(new InternshipDiary(), new InternshipDiary(modelManager.getInternshipDiary()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        userPrefs.setInternshipDiaryFilePath(Paths.get(\"internship-diary/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        userPrefs.setInternshipDiaryFilePath(Paths.get(\"internship-diary/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setInternshipDiaryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInternshipDiaryFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setInternshipDiaryFilePath_validPath_setsInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        Path path \u003d Paths.get(\"internship-diary/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.setInternshipDiaryFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(path, modelManager.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternshipApplication_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasInternshipApplication(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternshipApplication_internshipApplicationNotInInternshipDiary_returnsFalse() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(modelManager.hasInternshipApplication(GOOGLE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void hasInternshipApplication_internshipApplicationInInternshipDiary_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(modelManager.hasInternshipApplication(GOOGLE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void archiveInternshipApplication_internshipApplicationIsUnarchived_internshipApplicationIsArchived() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.archiveInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication newArchivedGoogleApplication \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                modelManager.getInternshipDiary().getInternshipList().get(0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(newArchivedGoogleApplication.isArchived());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void unarchiveInternshipApplication_internshipApplicationIsUnarchived_internshipApplicationIsArchived() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.addInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.archiveInternshipApplication(GOOGLE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication newArchivedGoogleApplication \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                modelManager.getInternshipDiary().getInternshipList().get(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.unarchiveInternshipApplication(newArchivedGoogleApplication);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication newUnarchivedGoogleApplication \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                modelManager.getInternshipDiary().getInternshipList().get(0);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(!newUnarchivedGoogleApplication.isArchived());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void getFilteredInternshipApplicationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                modelManager.getFilteredInternshipApplicationList().remove(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary diary \u003d new InternshipDiaryBuilder()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .withInternshipApplication(GOOGLE)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .withInternshipApplication(FACEBOOK)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary differentDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager \u003d new ModelManager(diary, userPrefs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(diary, userPrefs);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentDiary, userPrefs)));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        String[] keywords \u003d GOOGLE.getCompany().fullCompany.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.updateFilteredInternshipApplicationList("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new CompanyContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(diary, userPrefs)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        modelManager.updateFilteredInternshipApplicationList(PREDICATE_SHOW_ALL_INTERNSHIPS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        differentUserPrefs.setInternshipDiaryFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(diary, differentUserPrefs)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 58,
      "-": 102,
      "ongch00": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setInternshipDiaryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInternshipDiaryFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/AddressTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Address.isValidAddress(\"    \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(Address.isValidAddress(\"\")); // no address"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 6,
      "-": 29,
      "ongch00": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/ApplicationDateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class ApplicationDateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String nullStringApplicationDate \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        LocalDate nullApplicationDate \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ApplicationDate(nullStringApplicationDate));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ApplicationDate(nullApplicationDate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_invalidCompany_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String invalidApplicationDate \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ApplicationDate(invalidApplicationDate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isValidCompany() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null application date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ApplicationDate.isValidApplicationDate(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // invalid application date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\"20-01-2020\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // valid application date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"01 01 2020\")); // first day of year"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"31 12 2020\")); // last day of year"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/CompanyTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class CompanyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Company(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_invalidCompany_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String invalidCompany \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Company(invalidCompany));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isValidCompany() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null company"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Company.isValidCompany(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // invalid company"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Company.isValidCompany(\"A*Star\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // valid company"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"bandai namco\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"3e accounting\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"Koei Tecmo\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Company.isValidCompany(\"Defence Science and Technology Agency\")); // long companys"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/EmailTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(Email.isValidEmail(\"\")); // means no email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 6,
      "-": 54,
      "ongch00": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/InternshipApplicationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.FACEBOOK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.TypicalInterviews;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class InternshipApplicationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication ia \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // No more tags -- check with team how else we can implement this test case"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // assertThrows(UnsupportedOperationException.class, () -\u003e ia.getTags().remove(0));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void isSameInternshipApplication() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(GOOGLE.isSameInternshipApplication(GOOGLE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.isSameInternshipApplication(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication editedGoogle \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new InternshipApplicationBuilder(GOOGLE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.isSameInternshipApplication(editedGoogle));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.isSameInternshipApplication(editedGoogle));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // CHECK WITH THE TEAM IF WE ARE GOING FORWARD WITH THE CURRENT EQUALITY REQUIREMENTS"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different priority or status -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .withPriority(VALID_PRIORITY_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .withStatus(VALID_STATUS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(GOOGLE.isSameInternshipApplication(editedGoogle));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication googleCopy \u003d new InternshipApplicationBuilder(GOOGLE).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(GOOGLE.equals(googleCopy));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(GOOGLE.equals(GOOGLE));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(5));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(FACEBOOK));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication editedGoogle \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new InternshipApplicationBuilder(GOOGLE).withCompany(VALID_COMPANY_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(editedGoogle));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(editedGoogle));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(editedGoogle));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        editedGoogle \u003d new InternshipApplicationBuilder(GOOGLE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(GOOGLE.equals(editedGoogle));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void getEarliestInterview_noInterviewsInApplication_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        LocalDate date \u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(internshipApplication.getEarliestInterview(date).isEmpty());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void getEarliestInterview_allInterviewsExpired_returnsEmptyOptional() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        LocalDate date \u003d LocalDate.MAX;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withInterview(new InterviewBuilder().build())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withInterview(new InterviewBuilder(TypicalInterviews.CENTRAL_LIBRARY).build())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .buildWithInterviews();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(internshipApplication.getEarliestInterview(date).isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void getEarliestInterview_someInterviewsExpired_returnsSmallestNonExpiredDate() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        LocalDate maxDate \u003d LocalDate.MAX;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withInterview(new InterviewBuilder().build())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withInterview(new InterviewBuilder(TypicalInterviews.CENTRAL_LIBRARY).build())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withInterview(new InterviewBuilder().withDate(maxDate).build())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .buildWithInterviews();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(internshipApplication.getEarliestInterview(maxDate).get().getInterviewDate().equals(maxDate));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void getEarliestInterview_allInterviewsValid_returnsSmallestDate() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        LocalDate minDate \u003d LocalDate.MIN;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withInterview(new InterviewBuilder().build())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withInterview(new InterviewBuilder(TypicalInterviews.CENTRAL_LIBRARY).build())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .withInterview(new InterviewBuilder().withDate(minDate).build())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .buildWithInterviews();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(internshipApplication.getEarliestInterview(minDate).get().getInterviewDate().equals(minDate));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 46,
      "wxwxwxwx9": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/PhoneTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    //     assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"\")); // Denotes no phone"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 6,
      "-": 33,
      "ongch00": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/PriorityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_invalidPriority_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"91\")); // more than 10"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"-1\")); // less than 0"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"1p0\")); // alphabets within digits"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"1 0\")); // spaces within digits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(91)); // more than 10"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Priority.isValidPriority(-1)); // less than 0"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"0\")); // lowest"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"5\")); // middle"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"10\")); // largest"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(0)); // lowest"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(5)); // middle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Priority.isValidPriority(10)); // largest"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/RoleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class RoleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Role(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void constructor_invalidRole_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String invalidRole \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Role(invalidRole));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isValidRole() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null role"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Role.isValidRole(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // invalid role"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Role.isValidRole(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Role.isValidRole(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Role.isValidRole(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(Role.isValidRole(\"cleaner*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // valid role"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Role.isValidRole(\"data scientist\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Role.isValidRole(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Role.isValidRole(\"3d artist\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Role.isValidRole(\"Software Engineer\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(Role.isValidRole(\"3D Open Environment and Backdrop Artist\")); // long roles"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/interview/InterviewTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.model.internship.interview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.CENTRAL_LIBRARY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.ONLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.testutil.InterviewBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void isValid_validInterview_returnTrue() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //Not online and address available"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new InterviewBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(interview.isValid());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //Online and address is NA"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interview \u003d new InterviewBuilder(ONLINE).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(interview.isValid());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void isValid_invalidInterview_returnFalse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview interview \u003d new InterviewBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //Online and address is not NA"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interview \u003d new InterviewBuilder().withIsOnline(true).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(interview.isValid());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview clbCopy \u003d new InterviewBuilder(CENTRAL_LIBRARY).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(CENTRAL_LIBRARY.equals(clbCopy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertTrue(CENTRAL_LIBRARY.equals(CENTRAL_LIBRARY));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(5));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different isOnline -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(ONLINE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        Interview editedClb \u003d new InterviewBuilder(CENTRAL_LIBRARY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(editedClb));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedClb \u003d new InterviewBuilder(CENTRAL_LIBRARY).withDate(VALID_DATE_AMY).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(editedClb));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        // different isOnline -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        editedClb \u003d new InterviewBuilder(CENTRAL_LIBRARY).withIsOnline(true).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertFalse(CENTRAL_LIBRARY.equals(editedClb));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/predicate/AddressContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class AddressContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new AddressContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new AddressContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_addressContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new AddressContainsKeywordsPredicate(Collections.singletonList(\"Clementi\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Clementi\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Street\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\", \"Avenue\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Main Road\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"mAiN\", \"sTrEeT\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_addressDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .test(new InternshipApplicationBuilder().withAddress(\"Blk 456, Den Road, #01-355\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Clementi\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .test(new InternshipApplicationBuilder().withAddress(\"Blk 456, Den Road, #01-355\").build()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Keywords match company, role, phone, email, priority and status, but does not match address"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Software\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \"Engineer\", \"12345\", \"alice@email.com\", \"1\", \"APPLIED\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        AddressContainsKeywordsPredicate predicate \u003d new AddressContainsKeywordsPredicate(Arrays.asList(\"Main\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/predicate/ApplicationDateDuePredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class ApplicationDateDuePredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDateDuePredicate applicationDateDuePredicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(applicationDateDuePredicate.equals(applicationDateDuePredicate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(applicationDateDuePredicate.equals(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(applicationDateDuePredicate.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_futureApplicationDateIsWithin7Days_returnsTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDateDuePredicate predicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application date is same as current date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate newDate \u003d new ApplicationDate(currentDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application date is within 7 days from current date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate laterDate \u003d LocalDate.now().plus(4, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        newDate \u003d new ApplicationDate(laterDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate sevenDaysFromCurrentDate \u003d LocalDate.now().plus(7, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        newDate \u003d new ApplicationDate(sevenDaysFromCurrentDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_applicationDateHasAlreadyPassed_returnsFalse() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDateDuePredicate predicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application date is before current date"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate pastDate \u003d LocalDate.now().minus(4, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate newDate \u003d new ApplicationDate(pastDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate sevenDaysBeforeCurrent \u003d LocalDate.now().minus(7, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        newDate \u003d new ApplicationDate(sevenDaysBeforeCurrent.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate moreThanOneWeekBeforeCurrent \u003d LocalDate.now().minus(12, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        newDate \u003d new ApplicationDate(moreThanOneWeekBeforeCurrent.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_futureApplicationDateIsNotWithin7Days_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDateDuePredicate predicate \u003d new ApplicationDateDuePredicate();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // application date is more than 7 days past current date"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate laterDate \u003d LocalDate.now().plus(10, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        ApplicationDate newDate \u003d new ApplicationDate(laterDate.format(DateTimeFormatter.ofPattern(\"dd MM YYYY\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(newDate).build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 71,
      "ongch00": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/predicate/ApplicationDateIsDatePredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class ApplicationDateIsDatePredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        LocalDate firstPredicateDate \u003d LocalDate.of(2020, 02, 01);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        LocalDate secondPredicateDate \u003d LocalDate.of(2021, 03, 02);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new ApplicationDateIsDatePredicate(firstPredicateDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new ApplicationDateIsDatePredicate(secondPredicateDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new ApplicationDateIsDatePredicate(firstPredicateDate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_applicationDateContainsNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate predicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withApplicationDate(\"01 02 2020\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_applicationDateDoesNotContainNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate predicate \u003d new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withApplicationDate(\"02 02 2020\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullDate_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate predicate \u003d new ApplicationDateIsDatePredicate(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullDate_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        ApplicationDateIsDatePredicate predicate \u003d new ApplicationDateIsDatePredicate(LocalDate.of(2020, 02, 01));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/predicate/CompanyContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class CompanyContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CompanyContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new CompanyContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CompanyContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new CompanyContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CompanyContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new CompanyContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void test_companyContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CompanyContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                new CompanyContainsKeywordsPredicate(Collections.singletonList(\"Google\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Facebook\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google Facebook\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Facebook\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google Apple\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"gOoGlE\", \"FaCeBoOk\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google Facebook\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void test_companyDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        CompanyContainsKeywordsPredicate predicate \u003d new CompanyContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Apple Facebook\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Keywords match role, phone, email, address, priority and status, but does not match company"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Engineer\", \"12345\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \"alice@email.com\", \"Main\", \"Street\", \"1\", \"APPLIED\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate predicate \u003d new CompanyContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        CompanyContainsKeywordsPredicate predicate \u003d new CompanyContainsKeywordsPredicate(Arrays.asList(\"Google\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 74,
      "ongch00": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/predicate/EmailContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class EmailContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EmailContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EmailContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different keywords -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_emailContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Full email"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new EmailContainsKeywordsPredicate(Collections.singletonList(\"alice@example.com\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Collections.singletonList(\"alice@\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"bob\", \"example\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"bob@example.com\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"alice\", \"hello\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"aLiCe\", \"eXaMpLe\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_emailDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"bob\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withEmail(\"alice@example.com\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Keywords match company, role, phone, address, priority and status, but does not match email"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\", \"12345\", \"Main\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \"Street\", \"1\", \"APPLIED\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        EmailContainsKeywordsPredicate predicate \u003d new EmailContainsKeywordsPredicate(Arrays.asList(\"alice\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "ongch00": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/predicate/InterviewDateDuePredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "class InterviewDateDuePredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InterviewDateDuePredicate interviewDateDuePredicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(interviewDateDuePredicate.equals(interviewDateDuePredicate));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(interviewDateDuePredicate.equals(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(interviewDateDuePredicate.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_futureInterviewDateIsWithin7Days_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InterviewDateDuePredicate predicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // interview date is same as current date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internshipApplicationTestCurrent \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview newInterviewTestCurrent \u003d new Interview(true, new ApplicationDate(currentDate),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationTestCurrent.withInterview(newInterviewTestCurrent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(internshipApplicationTestCurrent.buildWithInterviews()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // interview date is within 7 days from current date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internshipApplicationTestWithin \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate laterDate \u003d LocalDate.now().plus(4, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview newInterviewTestWithin \u003d new Interview(true, new ApplicationDate(laterDate),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationTestWithin.withInterview(newInterviewTestWithin);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertTrue(predicate.test(internshipApplicationTestWithin.buildWithInterviews()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_interviewDateHasPassed_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InterviewDateDuePredicate predicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // interview date date is before current date"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internshipApplicationTestPast \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate pastDate \u003d LocalDate.now().minus(4, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview newInterviewTestPast \u003d new Interview(true, new ApplicationDate(pastDate),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationTestPast.withInterview(newInterviewTestPast);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(internshipApplicationTestPast.buildWithInterviews()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public void test_interviewDateIsNotWithin7Days_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InterviewDateDuePredicate predicate \u003d new InterviewDateDuePredicate();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // interview date is more than 7 days past current date"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        InternshipApplicationBuilder internshipApplicationTestMore \u003d new InternshipApplicationBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        LocalDate laterDate \u003d LocalDate.now().plus(10, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview newInterviewTestMore \u003d new Interview(true, new ApplicationDate(laterDate),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                new Address(\"123 Stevens Road\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        internshipApplicationTestMore.withInterview(newInterviewTestMore);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        assertFalse(predicate.test(internshipApplicationTestMore.buildWithInterviews()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 74,
      "ongch00": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/predicate/PhoneContainsNumbersPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class PhoneContainsNumbersPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"12345\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"12345\", \"67890\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PhoneContainsNumbersPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PhoneContainsNumbersPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PhoneContainsNumbersPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        // different numbers -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_phoneContainsNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Full number"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PhoneContainsNumbersPredicate(Collections.singletonList(\"12345\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One number"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"123\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"123456\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Multiple numbers"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"123\", \"456\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"123456\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching number"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"123\", \"987\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPhone(\"123456\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_phoneDoesNotContainNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero numbers"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate predicate \u003d new PhoneContainsNumbersPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withPhone(\"12345678\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching number"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"876\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withPhone(\"12345678\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Keywords match company, role, email, address, priority and status, but does not match phone"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \"alice@email.com\", \"Main\", \"Street\", \"8\", \"APPLIED\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"8\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate predicate \u003d new PhoneContainsNumbersPredicate(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PhoneContainsNumbersPredicate predicate \u003d new PhoneContainsNumbersPredicate(Arrays.asList(\"12345\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FeliciaTay": 1,
      "ongch00": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/predicate/PriorityContainsNumbersPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class PriorityContainsNumbersPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"2\", \"8\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PriorityContainsNumbersPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PriorityContainsNumbersPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PriorityContainsNumbersPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_priorityContainsNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Full number"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new PriorityContainsNumbersPredicate(Collections.singletonList(\"10\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPriority(\"10\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One number"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"1\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching number"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"1\", \"9\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_priorityDoesNotContainNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero numbers"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate predicate \u003d new PriorityContainsNumbersPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"10\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withPriority(\"1\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Keywords match company, role, phone, email, address and status but does not match priority"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \"12345\", \"alice@email.com\", \"Main\", \"Street\", \"APPLIED\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullNumbers_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate predicate \u003d new PriorityContainsNumbersPredicate(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullNumbers_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        PriorityContainsNumbersPredicate predicate \u003d new PriorityContainsNumbersPredicate(Arrays.asList(\"1\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/predicate/RoleContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class RoleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new RoleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new RoleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new RoleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_roleContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new RoleContainsKeywordsPredicate(Collections.singletonList(\"Cleaner\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Cleaner\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Engineer\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Software\", \"Cleaner\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Developer\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"sOfTwArE\", \"eNgInEeR\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_roleDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate predicate \u003d new RoleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Cleaner\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withRole(\"Software Engineer\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Keywords match company, phone, email, address, priority and status, but does not match role"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Google\", \"12345\", \"alice@email.com\", \"Main\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \"Street\", \"1\", \"APPLIED\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate predicate \u003d new RoleContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        RoleContainsKeywordsPredicate predicate \u003d new RoleContainsKeywordsPredicate(Arrays.asList(\"Engineer\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/internship/predicate/StatusContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ongch00"
        },
        "content": "package seedu.address.model.internship.predicate;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ongch00"
        },
        "content": "public class StatusContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new StatusContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new StatusContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new StatusContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_statusContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Full status"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                new StatusContainsKeywordsPredicate(Collections.singletonList(\"APPLIED\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new StatusContainsKeywordsPredicate(Collections.singletonList(\"APPLIED\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"APPLIED\", \"REJECTED\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"aPpLiEd\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void test_statusDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate predicate \u003d new StatusContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"bob\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        // Keywords match company, role, phone, email, address and priority, but does not match status"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"Google\", \"Software\", \"Engineer\", \"12345\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                \"alice@email.com\", \"Main\", \"Street\", \"1\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.test(new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withRole(\"Software Engineer\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").withPriority(\"1\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .withStatus(\"APPLIED\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nullKeyword_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate predicate \u003d new StatusContainsKeywordsPredicate(null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertTrue(predicate.isNull());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ongch00"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void isNull_nonNullKeyword_returnsFalse() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        StatusContainsKeywordsPredicate predicate \u003d new StatusContainsKeywordsPredicate(Arrays.asList(\"APPLIED\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertFalse(predicate.isNull());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongch00"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ongch00": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/statistics/StatisticsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.model.statistics;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.testutil.InternshipApplicationBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code Statistics}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final InternshipApplication APPLE \u003d new InternshipApplicationBuilder().withCompany(\"Apple\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withRole(\"Software Engineer\").withAddress(\"1600 Amphitheatre Parkway\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPhone(\"94351253\").withEmail(\"larry@google.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withStatus(Status.WISHLIST)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withApplicationDate(new ApplicationDate(LocalDate.of(2019, 12, 1)))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPriority(10)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final InternshipApplication TWITTER \u003d new InternshipApplicationBuilder().withCompany(\"Twitter\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withRole(\"Product Management\").withAddress(\"1 Hacker Way, Menlo Park\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPhone(\"99751354\").withEmail(\"mark@google.com\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withStatus(Status.OFFERED)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withApplicationDate(new ApplicationDate(LocalDate.of(2009, 11, 11)))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPriority(8)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final InternshipApplication NETFLIX \u003d new InternshipApplicationBuilder().withCompany(\"Netflix\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withRole(\"Product Management\").withAddress(\"1 Hacker Way, Menlo Park\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPhone(\"99751354\").withEmail(\"mark@google.com\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withStatus(Status.INTERVIEW)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withApplicationDate(new ApplicationDate(LocalDate.of(2009, 11, 11)))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPriority(8)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Statistics expectedStatistics;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        expectedStatistics \u003d new Statistics();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model \u003d new ModelManager(getTypicalInternshipDiary(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(APPLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(TWITTER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        model.addInternshipApplication(NETFLIX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void computeAndUpdateStatistics_updateStatistics_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.computeAndUpdateStatistics(model.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int wishlistCount \u003d statistics.getCount(Status.WISHLIST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int appliedCount \u003d statistics.getCount(Status.INTERVIEW);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int interviewCount \u003d statistics.getCount(Status.INTERVIEW);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int offeredCount \u003d statistics.getCount(Status.OFFERED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int rejectedCount \u003d statistics.getCount(Status.REJECTED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        int totalCount \u003d statistics.getTotalCount();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(wishlistCount, 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(appliedCount, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(interviewCount, 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(offeredCount, 0);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(rejectedCount, 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(totalCount, wishlistCount + appliedCount + interviewCount + offeredCount + rejectedCount);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public void resetStatistics_allStatusCountsZero_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.computeAndUpdateStatistics(model.getFilteredInternshipApplicationList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(statistics.getCount(Status.WISHLIST), 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(statistics.getCount(Status.APPLIED), 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(statistics.getCount(Status.INTERVIEW), 0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(statistics.getCount(Status.OFFERED), 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertNotEquals(statistics.getCount(Status.REJECTED), 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        statistics.resetStatistics();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(statistics.getCount(Status.WISHLIST), 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(statistics.getCount(Status.APPLIED), 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(statistics.getCount(Status.INTERVIEW), 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(statistics.getCount(Status.OFFERED), 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(statistics.getCount(Status.REJECTED), 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedInternshipTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.storage.JsonAdaptedInternship.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class JsonAdaptedInternshipTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_COMPANY \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_ROLE \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_APPLICATION_DATE \u003d \"20/20/2020\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"11\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String INVALID_STATUS \u003d \"ALIVE\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_IS_ARCHIVED \u003d \"s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_COMPANY \u003d GOOGLE.getCompany().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_ROLE \u003d GOOGLE.getRole().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_ADDRESS \u003d GOOGLE.getAddress().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_PHONE \u003d GOOGLE.getPhone().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_EMAIL \u003d GOOGLE.getEmail().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_APPLICATION_DATE \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            GOOGLE.getApplicationDate().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_PRIORITY \u003d GOOGLE.getPriority().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final String VALID_STATUS \u003d GOOGLE.getStatus().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final List\u003cJsonAdaptedInterview\u003e VALID_INTERVIEWS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_IS_ARCHIVED \u003d GOOGLE.isArchived().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonAdaptedInternshipTest\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final Path TYPICAL_INTERNSHIPS_FILE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalInterviewInternship.json\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final Path INVALID_INTERNSHIP_FILE \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidInterviewInternship.json\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final Path DUPLICATE_INTERNSHIP_FILE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateInterviewInternship.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_validInternshipDetails_returnsInternship() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(GOOGLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(GOOGLE, internship.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new JsonAdaptedInternship(INVALID_COMPANY,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_ROLE, VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d Company.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new JsonAdaptedInternship(null,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_ROLE, VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidRole_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new JsonAdaptedInternship(VALID_COMPANY,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        INVALID_ROLE,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d Role.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullRole_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new JsonAdaptedInternship(VALID_COMPANY,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        null, VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        INVALID_PHONE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS, VALID_PHONE,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        INVALID_EMAIL,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE, VALID_ADDRESS, VALID_PHONE,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                        VALID_APPLICATION_DATE, VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                INVALID_ADDRESS,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void toModelType_invalidApplicationDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INVALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String expectedMessage \u003d ApplicationDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public void toModelType_nullApplicationDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ADDRESS, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_PRIORITY, VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ApplicationDate.class.getSimpleName());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INVALID_PRIORITY,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_STATUS, VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INVALID_STATUS,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d Status.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullStatus_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                null,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_INTERVIEWS, VALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidIsArchived_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_STATUS, VALID_INTERVIEWS,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INVALID_IS_ARCHIVED);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d BooleanUtil.INVALID_BOOLEAN;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullIsArchived_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInternship internship \u003d new JsonAdaptedInternship(VALID_COMPANY, VALID_ROLE,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_ADDRESS, VALID_PHONE, VALID_EMAIL, VALID_APPLICATION_DATE, VALID_PRIORITY,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_STATUS, VALID_INTERVIEWS, null);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Messages.IS_ARCHIVED);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 137,
      "gerhean": 95,
      "ongch00": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedInterviewTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.storage.JsonAdaptedInterview.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.NUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.commons.util.BooleanUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class JsonAdaptedInterviewTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_IS_ONLINE \u003d \"n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \"  \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String INVALID_DATE \u003d \"11002222\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_IS_ONLINE \u003d \"false\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 avenue road\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private static final String VALID_DATE \u003d \"10 10 2010\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_validInterviewDetails_returnsInternship() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(NUS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertEquals(NUS, interview.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(INVALID_ADDRESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_IS_ONLINE, VALID_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(null,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_IS_ONLINE, VALID_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_IS_ONLINE, INVALID_DATE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d ApplicationDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                VALID_IS_ONLINE, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ApplicationDate.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_invalidIsOnline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                INVALID_IS_ONLINE, VALID_DATE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d BooleanUtil.INVALID_BOOLEAN;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public void toModelType_nullIsOnline_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        JsonAdaptedInterview interview \u003d new JsonAdaptedInterview(VALID_ADDRESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                null, VALID_DATE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Boolean.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, interview::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonInternshipDiaryStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.GOOGLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class JsonInternshipDiaryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonInternshipDiaryStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void readInternshipDiary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readInternshipDiary(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private java.util.Optional\u003cReadOnlyInternshipDiary\u003e readInternshipDiary(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return new JsonInternshipDiaryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                .readInternshipDiary(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertFalse(readInternshipDiary(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    readInternshipDiary(\"notJsonFormatInternshipDiary.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void readInternshipDiary_invalidInternshipInternshipDiary_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    readInternshipDiary(\"invalidInternshipInternshipDiary.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void readInternshipDiary_invalidAndValidInternshipInternshipDiary_throwDataConversionException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                        readInternshipDiary(\"invalidAndValidInternshipInternshipDiary.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void readAndSaveInternshipDiary_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempInternshipDiary.json\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary original \u003d getTypicalInternshipDiary();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonInternshipDiaryStorage jsonInternshipDiaryStorage \u003d new JsonInternshipDiaryStorage(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        jsonInternshipDiaryStorage.saveInternshipDiary(original, filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ReadOnlyInternshipDiary readBack \u003d jsonInternshipDiaryStorage.readInternshipDiary(filePath).get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(original, new InternshipDiary(readBack));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        original.addInternshipApplication(AMY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        original.removeInternship(GOOGLE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        jsonInternshipDiaryStorage.saveInternshipDiary(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        readBack \u003d jsonInternshipDiaryStorage.readInternshipDiary(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(original, new InternshipDiary(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        original.addInternshipApplication(BOB);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        jsonInternshipDiaryStorage.saveInternshipDiary(original); // file path not specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        readBack \u003d jsonInternshipDiaryStorage.readInternshipDiary().get(); // file path not specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(original, new InternshipDiary(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void saveInternshipDiary_nullInternshipDiary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInternshipDiary(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gerhean"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private void saveInternshipDiary(ReadOnlyInternshipDiary addressBook, String filePath) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            new JsonInternshipDiaryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                    .saveInternshipDiary(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void saveInternshipDiary_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInternshipDiary(new InternshipDiary(), null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableInternshipDiaryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gerhean"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.testutil.TypicalInternshipApplications;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gerhean"
        },
        "content": "public class JsonSerializableInternshipDiaryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableInternshipDiaryTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Path TYPICAL_INTERNSHIPS_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalInternshipsInternshipDiary.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Path INVALID_INTERNSHIP_FILE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidInternshipInternshipDiary.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    private static final Path DUPLICATE_INTERNSHIP_FILE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gerhean"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"duplicateInternshipInternshipDiary.json\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_typicalInternshipsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonSerializableInternshipDiary dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_INTERNSHIPS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                JsonSerializableInternshipDiary.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary internshipDiaryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary typicalInternshipsInternshipDiary \u003d TypicalInternshipApplications.getTypicalInternshipDiary();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertEquals(internshipDiaryFromFile, typicalInternshipsInternshipDiary);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_invalidInternshipFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonSerializableInternshipDiary dataFromFile \u003d JsonUtil.readJsonFile(INVALID_INTERNSHIP_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                JsonSerializableInternshipDiary.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void toModelType_duplicateInternships_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonSerializableInternshipDiary dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_INTERNSHIP_FILE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                JsonSerializableInternshipDiary.class).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableInternshipDiary.MESSAGE_DUPLICATE_INTERNSHIP,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gerhean"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gerhean"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 2,
      "gerhean": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import static seedu.address.testutil.TypicalInternshipApplications.getTypicalInternshipDiary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import seedu.address.model.ReadOnlyInternshipDiary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        JsonInternshipDiaryStorage internshipDiaryStorage \u003d new JsonInternshipDiaryStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        storageManager \u003d new StorageManager(internshipDiaryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void internshipDiaryReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gerhean"
        },
        "content": "         * {@link JsonInternshipDiaryStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gerhean"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInternshipDiaryStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary original \u003d getTypicalInternshipDiary();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        storageManager.saveInternshipDiary(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        ReadOnlyInternshipDiary retrieved \u003d storageManager.readInternshipDiary().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        InternshipDiary retrievedDiary \u003d new InternshipDiary(retrieved);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        boolean isSame \u003d original.equals(retrievedDiary);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertEquals(original, new InternshipDiary(retrieved));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gerhean"
        },
        "content": "    public void getInternshipDiaryFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        assertNotNull(storageManager.getInternshipDiaryFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gerhean": 16,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditInternshipDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditInternshipDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A utility class to help with building EditInternshipDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class EditInternshipDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private EditCommand.EditInternshipDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditCommand.EditInternshipDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder(EditCommand.EditInternshipDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.descriptor \u003d new EditInternshipDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns an {@code EditInternshipDescriptor} with fields containing {@code internshipApplication}\u0027s details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new EditCommand.EditInternshipDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setCompany(internshipApplication.getCompany());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setRole(internshipApplication.getRole());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setPhone(internshipApplication.getPhone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setEmail(internshipApplication.getEmail());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setAddress(internshipApplication.getAddress());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setDate(internshipApplication.getApplicationDate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setPriority(internshipApplication.getPriority());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setStatus(internshipApplication.getStatus());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Company} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setCompany(new Company(company));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Role} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withRole(String role) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setRole(new Role(role));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Email} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code ApplicationDate} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withApplicationDate(String date) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            descriptor.setDate(new ApplicationDate(LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd MM yyyy\"))));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Status} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setStatus(Status.valueOf(status));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Address} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInternshipDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditCommand.EditInternshipDescriptor build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 104,
      "wxwxwxwx9": 11,
      "gerhean": 4,
      "ongch00": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditInterviewDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A utility class to help build EditInterviewDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class EditInterviewDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private InterviewEditCommand.EditInterviewDescriptor descriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new InterviewEditCommand.EditInterviewDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder(InterviewEditCommand.EditInterviewDescriptor descriptor) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.descriptor \u003d new InterviewEditCommand.EditInterviewDescriptor(descriptor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns an {@code EditInterviewDescriptor} with fields containing {@code interview}\u0027s details"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder(Interview interview) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor \u003d new InterviewEditCommand.EditInterviewDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setAddress(interview.getInterviewAddress());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setDate(interview.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setOnline(interview.isOnline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code ApplicationDate} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder withInterviewDate(String date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            descriptor.setDate(new ApplicationDate(LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd MM yyyy\"))));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code Address} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code Address} of the {@code EditInternshipDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public EditInterviewDescriptorBuilder withIsOnline(String isOnline) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.setOnline(Boolean.parseBoolean(isOnline));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewEditCommand.EditInterviewDescriptor build() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InternshipApplicationBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Company;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.Role;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A utility class to help with building Internship Application objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class InternshipApplicationBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String DEFAULT_COMPANY \u003d \"Google\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String DEFAULT_ROLE \u003d \"Product Manager\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"1600 Amphitheatre Parkway\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"99999999\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"richardma@gmail.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DEFAULT_APPLICATION_DATE \u003d \"12 03 2020\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Integer DEFAULT_PRIORITY \u003d 10;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Status DEFAULT_STATUS \u003d Status.APPLIED;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Company company;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Role role;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    private ApplicationDate applicationDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private ArrayList\u003cInterview\u003e interviews;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        company \u003d new Company(DEFAULT_COMPANY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        role \u003d new Role(DEFAULT_ROLE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            applicationDate \u003d new ApplicationDate(LocalDate.parse(DEFAULT_APPLICATION_DATE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                    DateTimeFormatter.ofPattern(\"dd MM yyyy\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        status \u003d DEFAULT_STATUS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        //default interviews is nil"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Initializes the InternshipApplicationBuilder with the data of {@code toCopy}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder(InternshipApplication toCopy) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        company \u003d toCopy.getCompany();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        role \u003d toCopy.getRole();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        address \u003d toCopy.getAddress();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        phone \u003d toCopy.getPhone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        email \u003d toCopy.getEmail();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        applicationDate \u003d toCopy.getApplicationDate();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        priority \u003d toCopy.getPriority();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        status \u003d toCopy.getStatus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        interviews \u003d toCopy.getInterviews();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Company} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.company \u003d new Company(company);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Role} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withRole(String role) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.role \u003d new Role(role);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Address} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Phone} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Email} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Priority} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withPriority(Integer priority) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Overloaded withPriority method to set priority from String."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplicationBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return withPriority(Integer.parseInt(priority));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code ApplicationDate} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ongch00"
        },
        "content": "    public InternshipApplicationBuilder withApplicationDate(ApplicationDate applicationDate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.applicationDate \u003d applicationDate;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Overloaded withApplicationDate method to set date from String."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplicationBuilder withApplicationDate(String applicationDate) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ongch00"
        },
        "content": "            this.applicationDate \u003d new ApplicationDate(LocalDate.parse(applicationDate, DateTimeFormatter.ofPattern("
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                    \"dd MM yyyy\")));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gerhean"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            System.err.println(\"error in parsing date\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns the {@code ApplicationDate} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public ApplicationDate getApplicationDate() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return applicationDate;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Sets the {@code Status} of the {@code InternshipApplication} that we are building."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplicationBuilder withStatus(Status status) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Overloaded withStatus method to set status from String."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplicationBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return withStatus(Status.valueOf(status));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Adds an Interview object into the array list of interviews."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplicationBuilder withInterview(Interview interview) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviews.add(interview);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns the {@code interviews} of the {@code InternshipApplication} we are building."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @return list of interviews"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public ArrayList\u003cInterview\u003e getInterview() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return interviews;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipApplication build() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new InternshipApplication(company, role, address, phone, email, applicationDate, priority, status);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Builds the Internship Application object with interviews."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InternshipApplication buildWithInterviews() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipApplication internshipApplication \u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                new InternshipApplication(company, role, address, phone, email, applicationDate, priority, status);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (Interview interview: interviews) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            internshipApplication.addInterview(interview);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return internshipApplication;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * Returns the earliest interview from today in the list of interviews of the application."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @param todayDate The current date today."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     * @return an Optional of LocalDate. Will return empty if there are no interviews after today\u0027s date."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    public Optional\u003cInterview\u003e getEarliestInterview(LocalDate todayDate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        if (interviews.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        Interview earliestInterview \u003d interviews.get(0);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        for (Interview currentInterview: interviews) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            LocalDate earliestDate \u003d earliestInterview.getInterviewDate();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            LocalDate currentDate \u003d currentInterview.getInterviewDate();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            if ((currentDate.compareTo(earliestDate) \u003c\u003d 0 || earliestDate.compareTo(todayDate) \u003c 0)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                    \u0026\u0026 currentDate.compareTo(todayDate) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                earliestInterview \u003d currentInterview;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "        return earliestInterview.getInterviewDate().compareTo(todayDate) \u003e\u003d 0"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "                ? Optional.of(earliestInterview) : Optional.empty();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 56,
      "FeliciaTay": 39,
      "wxwxwxwx9": 124,
      "gerhean": 5,
      "ongch00": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InternshipApplicationUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A utility class for Internship Application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InternshipApplicationUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getAddCommand(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getInternshipApplicationDetails(internshipApplication);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getInternshipApplicationDetails(InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_COMPANY + internshipApplication.getCompany().fullCompany + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_ROLE + internshipApplication.getRole().fullRole + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_ADDRESS + internshipApplication.getAddress().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_PHONE + internshipApplication.getPhone().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_EMAIL + internshipApplication.getEmail().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        sb.append(PREFIX_DATE + dateFormat"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .format(internshipApplication.getApplicationDate().fullApplicationDate) + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_PRIORITY + internshipApplication.getPriority().toString() + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_STATUS + internshipApplication.getStatus().name() + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns the part of command string for the given {@code EditInternshipDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getEditInternshipApplicationDescriptorDetails("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            EditCommand.EditInternshipDescriptor descriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getCompany().ifPresent(company -\u003e sb.append(PREFIX_COMPANY).append(company.fullCompany).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getRole().ifPresent(role -\u003e sb.append(PREFIX_ROLE).append(role.fullRole).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ongch00"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ongch00"
        },
        "content": "                .append(dateFormat.format(date.fullApplicationDate)).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getPriority()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.toString()).append(\" \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getStatus().ifPresent(status -\u003e sb.append(PREFIX_STATUS).append(status.name()).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Modifies an internship application to be archived."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static InternshipApplication createArchivedInternshipApplication("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication archivedInternship \u003d new InternshipApplication("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getCompany(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getRole(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getAddress(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getPhone(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getEmail(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getApplicationDate(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getPriority(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getStatus(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(archivedInternship.isArchived());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return archivedInternship;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Modifies an internship application to be unarchived."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static InternshipApplication createUnarchivedInternshipApplication("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            InternshipApplication internshipApplication) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipApplication archivedInternship \u003d new InternshipApplication("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getCompany(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getRole(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getAddress(),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getPhone(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getEmail(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getApplicationDate(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getPriority(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                internshipApplication.getStatus(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "                false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        );"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        assertTrue(archivedInternship.isArchived());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return archivedInternship;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 60,
      "wxwxwxwx9": 43,
      "ongch00": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InternshipDiaryBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A utility class to help with building InternshipDiary objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " *     {@code InternshipDiary diary \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " *     new InternshipDiaryBuilder().withInternshipApplication(new InternshipApplication(\"Google\", ...)).build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class InternshipDiaryBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private InternshipDiary internshipDiary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipDiaryBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipDiaryBuilder(InternshipDiary internshipDiary) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        this.internshipDiary \u003d internshipDiary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Adds a new {@code InternshipApplication} to the {@code InternshipDiary} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipDiaryBuilder withInternshipApplication(InternshipApplication application) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        internshipDiary.addInternshipApplication(application);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public InternshipDiary build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return internshipDiary;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InterviewBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.Address;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A utility class to help build a list of Interview objects"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final boolean IS_NOT_ONLINE \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DEFAULT_ADDRESS_1 \u003d \"66 Big Avenue, Unit 10-350\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final String DEFAULT_DATE_1 \u003d \"12 03 2020\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private boolean isOnline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private Address interviewAddress;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    private ApplicationDate interviewDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isOnline \u003d IS_NOT_ONLINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d new Address(DEFAULT_ADDRESS_1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d new ApplicationDate(DEFAULT_DATE_1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder(Interview toCopy) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isOnline \u003d toCopy.isOnline;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d new ApplicationDate(toCopy.getInterviewDate());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d toCopy.getInterviewAddress();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code isOnline} based on a boolean."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder withIsOnline(boolean isOnline) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.isOnline \u003d isOnline;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets isOnline based on a String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder withIsOnline(String isOnline) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return withIsOnline(Boolean.parseBoolean(isOnline));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code interviewAddress} based on a String."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Sets the {@code interviewDate} based on a String."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder withDate(String date) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d new ApplicationDate(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Overloaded method to set date from {@code LocalDate}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public InterviewBuilder withDate(LocalDate date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        this.interviewDate \u003d new ApplicationDate(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public Interview build() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new Interview(isOnline, interviewDate, interviewAddress);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InterviewUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IS_ONLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP_APPLICATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.InterviewCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.logic.commands.interviewsubcommands.InterviewEditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A utility class for Interviews."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class InterviewUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns an add command string for adding the {@code interview}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getAddCommand(Interview interview) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return InterviewCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP_APPLICATION.getOneBased() + \" add \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                + getInterviewDetails(interview);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getInterviewDetails(Interview interview) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_ADDRESS + interview.getInterviewAddress().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_DATE + dateFormat"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .format(interview.getInterviewDate()) + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        sb.append(PREFIX_IS_ONLINE + String.valueOf(interview.isOnline) + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns the part of command string for the given {@code EditInterviewDescriptor}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static String getEditInterviewApplicationDescriptorDetails("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            InterviewEditCommand.EditInterviewDescriptor descriptor) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"dd MM YYYY\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getInterviewDate().ifPresent(date -\u003e sb.append(PREFIX_DATE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .append(dateFormat.format(date.fullApplicationDate)).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        descriptor.getIsOnline()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "foochifa"
        },
        "content": "                .ifPresent(isOnline -\u003e sb.append(PREFIX_IS_ONLINE).append(isOnline.toString()).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns the middle index of the internship application in the {@code model}\u0027s internship application list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Index.fromOneBased(model.getFilteredInternshipApplicationList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns the last index of the internship application in the {@code model}\u0027s internship application list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return Index.fromOneBased(model.getFilteredInternshipApplicationList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns the internship application in the {@code model}\u0027s internship application list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static InternshipApplication getInternshipApplication(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return model.getFilteredInternshipApplicationList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "wxwxwxwx9": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Index INDEX_FIRST_INTERNSHIP_APPLICATION \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Index INDEX_SECOND_INTERNSHIP_APPLICATION \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final Index INDEX_THIRD_INTERNSHIP_APPLICATION \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Index INDEX_FIRST_INTERVIEW \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Index INDEX_SECOND_INTERVIEW \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Index INDEX_THIRD_INTERVIEW \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 4,
      "wxwxwxwx9": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalInternshipApplications.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROLE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.NUS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.testutil.TypicalInterviews.ONLINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gerhean"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.InternshipDiary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ongch00"
        },
        "content": "import seedu.address.model.internship.ApplicationDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.InternshipApplication;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.status.Status;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " * A utility class containing a list of {@code InternshipApplication} objects to be used in tests."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "public class TypicalInternshipApplications {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final InternshipApplication GOOGLE \u003d new InternshipApplicationBuilder().withCompany(\"Google\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withRole(\"Software Engineer\").withAddress(\"1600 Amphitheatre Parkway\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPhone(\"94351253\").withEmail(\"larry@google.com\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withStatus(Status.APPLIED)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(new ApplicationDate(LocalDate.of(2020, 3, 23)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPriority(10)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static final InternshipApplication FACEBOOK \u003d new InternshipApplicationBuilder().withCompany(\"Facebook\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withRole(\"Product Management\").withAddress(\"1 Hacker Way, Menlo Park\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPhone(\"99751354\").withEmail(\"mark@google.com\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withStatus(Status.REJECTED)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FeliciaTay"
        },
        "content": "            .withApplicationDate(new ApplicationDate(LocalDate.of(2020, 3, 25)))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .withPriority(8)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InternshipApplication GOOGLE_WITH_INTERVIEW \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withCompany(\"Google\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withRole(\"Software Engineer\").withAddress(\"1600 Amphitheatre Parkway\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withPhone(\"94351253\").withEmail(\"larry@google.com\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withStatus(Status.APPLIED)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withApplicationDate(new ApplicationDate(LocalDate.of(2019, 12, 1)))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withPriority(10)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder().build())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder(NUS).build())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InternshipApplication FACEBOOK_WITH_INTERVIEW \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withCompany(\"Facebook\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withRole(\"Product Management\").withAddress(\"1 Hacker Way, Menlo Park\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withPhone(\"99751354\").withEmail(\"mark@google.com\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withStatus(Status.REJECTED)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withApplicationDate(new ApplicationDate(LocalDate.of(2009, 11, 11)))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withPriority(8)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withInterview(new InterviewBuilder().build()).withInterview(new InterviewBuilder(ONLINE).build())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .buildWithInterviews();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    // Manually added - Internship\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InternshipApplication AMY \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withCompany(VALID_COMPANY_AMY).withPhone(VALID_PHONE_AMY).withRole(VALID_ROLE_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withApplicationDate(VALID_DATE_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withPriority(VALID_PRIORITY_AMY).withStatus(VALID_STATUS_AMY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final InternshipApplication BOB \u003d new InternshipApplicationBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withCompany(VALID_COMPANY_BOB).withPhone(VALID_PHONE_BOB).withRole(VALID_ROLE_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withApplicationDate(VALID_DATE_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withPriority(VALID_PRIORITY_BOB).withStatus(VALID_STATUS_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    private TypicalInternshipApplications() {} // prevents instantiation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     * Returns an {@code InternshipDiary} with all the typical internship applications."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static InternshipDiary getTypicalInternshipDiary() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        InternshipDiary diary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        for (InternshipApplication application : getTypicalInternshipApplications()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "            diary.addInternshipApplication(application);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return diary;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     * Returns an {@code InternshipDiary} with all the typical internship applications including interviews."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "foochifa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static InternshipDiary getTypicalInternshipDiaryWithInterviews() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        InternshipDiary diary \u003d new InternshipDiary();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        for (InternshipApplication application : getTypicalInternshipApplicationsWithInterviews()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            diary.addInternshipApplication(application);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return diary;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    public static List\u003cInternshipApplication\u003e getTypicalInternshipApplications() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GOOGLE, FACEBOOK));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static List\u003cInternshipApplication\u003e getTypicalInternshipApplicationsWithInterviews() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "foochifa"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(GOOGLE_WITH_INTERVIEW, FACEBOOK_WITH_INTERVIEW));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "wxwxwxwx9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 75,
      "FeliciaTay": 2,
      "wxwxwxwx9": 36,
      "gerhean": 1,
      "ongch00": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalInterviews.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "foochifa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_NUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_ONLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_NUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_ONLINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_IS_ONLINE_NUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_IS_ONLINE_ONLINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "foochifa"
        },
        "content": "import seedu.address.model.internship.interview.Interview;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "foochifa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "foochifa"
        },
        "content": " * A utility class consisting of a list of {@code Interview} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "foochifa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "foochifa"
        },
        "content": "public class TypicalInterviews {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Interview CENTRAL_LIBRARY \u003d new InterviewBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withAddress(\"215 Bras Basah\").withDate(\"05 03 2015\").withIsOnline(false).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Interview ORCHARD_TOWER \u003d new InterviewBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withAddress(\"Orchard Towers 12-555\").withDate(\"20 01 2020\").withIsOnline(false).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "foochifa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Interview NUS \u003d new InterviewBuilder().withAddress(VALID_ADDRESS_NUS)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withDate(VALID_DATE_NUS).withIsOnline(VALID_IS_ONLINE_NUS).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "foochifa"
        },
        "content": "    public static final Interview ONLINE \u003d new InterviewBuilder().withAddress(VALID_ADDRESS_ONLINE)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "foochifa"
        },
        "content": "            .withDate(VALID_DATE_ONLINE).withIsOnline(VALID_IS_ONLINE_ONLINE).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "foochifa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "foochifa": 26
    }
  }
]
