[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "# iGrad"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003e A handy guide to help you make the most of your application"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "1. [Introduction](#Introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "2. [Features](#Features)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    2.1 [Course Builder](#courseInfo-builder)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    2.2 [Modular Credits Tracker](#modular-credits-mcs-tracker)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    2.3 [Cumulative Average Point Tracker](#cumulative-average-point-cap-tracker)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "3. [Components](#Components)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    3.1 [Course](#courses)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    3.2 [Requirements](#requirements)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    3.3 [Modules](#modules)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "4. [Walkthrough](#walkthrough)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "5. [Command List](#command-list)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    5.1.[`help`](#help)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    5.2 [`courseInfo`](#courseInfo)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    5.3 [`requirement`](#requirements)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    5.4 [`module`](#module)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    5.5 [`assign`](#assign)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": " "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    5.6 [`exam`](#exam)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": " "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    5.7 [`achieve`](#achieve)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    5.8 [`export`](#export)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    5.9 [`exit`](#exit)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "6. [Frequently Asked Questions (FAQ)](#faqs)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "7. [Cheat Sheet](#cheat-sheet)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "8. [Glossary](#glossary)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "---"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Sick of having tracking your university progress the manual way? "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Start getting rid of your Excel sheets and scribbled down notes and download *iGrad* right now!"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "What is *iGrad*? "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "*iGrad* is the app to track your university progress, for students who are frustrated with the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "limited features the university provides, by students who are frustrated by the limited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "features the university provides. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "*iGrad* offers users the ability to create custom courses and graduation requirements,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "ensuring the **maximum** degree of flexibility when planning and keeping track of your progress"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "*iGrad* also retrieves data directly from [NUS Mods](https://nusmods.com), ensuring that module"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "information is always up to date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "*iGrad* calculates your CAP at every step, ensuring you never have to use a CAP calculator again"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Finally, the *iGrad* team is always open to feedback and suggestions from the public will always be followed up on."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "## Features  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### Course Builder"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "iGrad was built with every NUS student in mind. Our custom courseInfo builder allows you to build"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "the courseInfo of your dreams."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### Modular Credits (MCs) Tracker"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "We are sick of counting our MCs at the beginning of every semester too. Easily see how many MCs you"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "have left in order to apply for graduation."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### Cumulative Average Point (CAP) Tracker"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "No more googling CAP calculators. iGrad\u0027s CAP tracker keeps track of your CAP at every step and"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "even offers predictive services so you know how well you have to do"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "in order to achieve your dream Cumulative Point Average (CAP)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "## Components"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003ca title\u003d\"fig-1\"\u003e**Figure 1**\u003c/a\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "![](https://user-images.githubusercontent.com/34233605/75425925-9774ff80-597e-11ea-87f5-228f95b5c84f.png)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### Courses"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "A courseInfo is simply a group of requirements. It is also how we keep track of your overall CAP"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "and MCs. "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### Requirements"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "A requirement consists of at least one module. Fulfill all modules within a requirement to"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "complete it."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### Modules"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "A module is the building block of all other components. Mark your modules as done and give it"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "a grade. You can also add optional memos to help you remember why"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "you took the module."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "## Walkthrough"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### 1. Start up the application"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Double-click the .jar file to get started right away!"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "#### 2. Enter your courseInfo details"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "![](https://user-images.githubusercontent.com/34233605/75436477-9dbfa780-598f-11ea-9076-8d4e4e09c8bc.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### 3. Key in your graduation requirements"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "![](https://user-images.githubusercontent.com/34233605/75436492-a1ebc500-598f-11ea-91f1-94509bce253e.png)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### 4. Assign your modules"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### 5. Mark a module as done"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "![](https://user-images.githubusercontent.com/34233605/75436503-a57f4c00-598f-11ea-9902-a912ce16815e.png)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### 6. Key in a memo"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### 7. Track your MCs "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### 8. View your CAP"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynewee"
        },
        "content": "![](https://user-images.githubusercontent.com/34233605/75436570-bdef6680-598f-11ea-887b-16279de675e6.png)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### 9. Run batch commands"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### 10. Export your data"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "![](https://user-images.githubusercontent.com/34233605/75436540-b4fe9500-598f-11ea-814d-ed3a0bbf5c6a.png)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": "## Command List"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### `help`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Displays a help message to the user. Lists all possible commands"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynewee"
        },
        "content": "and provides a link to the user guide online."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Format"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    help"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Constraints"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":warning: NIL"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Expected Outcome"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":white_check_mark: A help message should be displayed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": "---"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "#### `courseInfo`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "Creates a courseInfo. (TODO: Add in modify and remove)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Format"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Sample"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    * Creating a courseInfo named \"Computer Science\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    courseInfo add n/Computer Science"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Constraints"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ":warning: You can only have one courseInfo at a time"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Expected Outcome"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ":white_check_mark: You should be able to see the courseInfo name in the "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "waynewee"
        },
        "content": "top panel"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    courseInfo add n/COURSE_NAME"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waynewee"
        },
        "content": "---"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### `requirement`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "Creates a graduation requirement. (TODO: Add in modify and remove)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Format"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    requirement add n/REQUIREMENT_NAME u/NO_OF_MCS"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Sample"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * Creating a requirement named \"Unrestricted Electives\" "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * which requires 32 MCs to fulfill"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    requirement add n/Unrestricted Electives u/32"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Constraints"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":warning: The number of MCs needed to fulfill the requirement is needed"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":warning: Requirement names have to be unique "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Expected Outcome"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":white_check_mark: You should be able to see the requirement name in the"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "waynewee"
        },
        "content": "main panel"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waynewee"
        },
        "content": "---"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### `module`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "Creates a module with semester, grade or memo notes information. (TODO: Add in modify and remove)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Format"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * At least one option must be specified."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * SEMESTER is specified in format Y_S_ ( e.g. Y1S2 - Year 1 Semester 2 ) "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    module add n/MODULE_CODE [n/MODULE_TITLE] [u/MCs] [s/SEMESTER] [g/GRADE] [m/MEMO_NOTES]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Sample"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * Tags CS1101 with \"Y1S2\" and grade \"A+\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    module add n/CS1101 s/Y1S2 g/A+"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * Tags ST2234 with \"Y2S1\" and gives it a memo \"pretty easy module\""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    module add n/ST2334 s/Y2S1 m/pretty easy module"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Constraints"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":warning: The module has to be assigned"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Expected Outcome"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ":white_check_mark: The tags (if any) should appear under their respective column headers"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "waynewee"
        },
        "content": "---"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "#### `assign`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "Assigns a module to a graduation requirement. If there is good internet"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "connectivity, the module will be validated with NUSMods and its description"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "will be auto-filled."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Format"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    * DESCRIPTION is optional"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    assign REQUIREMENT_NAME n/MODULE_CODE"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Sample"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    * Assigns module \"LAJ1201\" (Japanese 1)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    * to requirement \"Unrestricted Electives\""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    assign Unrestricted Electives n/LAJ1201"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Constraints"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ":warning: A module cannot be assigned if there are not enough MCs left under "
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "a graduation requirement"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ":warning: The module code and title have to be unique"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Expected Outcome"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ":white_check_mark: The module will be displayed in the main panel"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "waynewee"
        },
        "content": "---"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### `exam`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "waynewee"
        },
        "content": "View your examination results."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Format"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * SEMESTER is optional."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * If not specified, displays results for all tags."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    exam s/SEMESTER"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Sample"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * Displays exam results for Year 3 Semester 2 "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    exam s/Y3S2"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Constraints"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":warning: NIL"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Expected Outcome"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":white_check_mark: You should be able to view your exam results"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "waynewee"
        },
        "content": "---"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### `achieve`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Calculates the average grade needed to achieve the CAP you desire/"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Format"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    achieve c/DESIRED_CAP"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Sample"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * Calculates the avergae grade needed"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    * to achieve a CAP of 4.50"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    achieve c/4.50"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Constraints"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":warning: NIL"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Expected Outcome"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":white_check_mark: You should be able to view the average grade needed to achieve"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "waynewee"
        },
        "content": "the CAP you desire"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "waynewee"
        },
        "content": "---"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### `export`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Exports all data in a text file. If information is sufficient, "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "waynewee"
        },
        "content": "this file can be submitted to NUS as a study plan."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Format"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    export"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Constraints"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":warning: NIL"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Expected Outcome"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":white_check_mark: A text file \"study_plan.txt\" should be generated in"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "waynewee"
        },
        "content": "the same folder as the iGrad application."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "waynewee"
        },
        "content": "---"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "waynewee"
        },
        "content": " "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "waynewee"
        },
        "content": "#### `exit`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Exits the program"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Command Format"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    exit"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Constraints"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "waynewee"
        },
        "content": "      "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":warning: NIL"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "waynewee"
        },
        "content": "Expected Outcome"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "waynewee"
        },
        "content": ":white_check_mark: The application should exit."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "waynewee"
        },
        "content": " "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "waynewee"
        },
        "content": " ## FAQs"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "waynewee"
        },
        "content": " "
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "waynewee"
        },
        "content": "*I\u0027m not an NUS student. Can I still use iGrad?*"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "waynewee"
        },
        "content": "As long as your university follows a similar [hierachical structure](#fig-1)!"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "waynewee"
        },
        "content": "However, we will be unable to provide features such as validation from NUS Mods."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "waynewee"
        },
        "content": "## Cheat Sheet"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003e This segment contains all the commands detailed in this guide in a consolidated list"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "waynewee"
        },
        "content": "   "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "waynewee"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "`courseInfo add n/COURSE_NAME`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "`courseInfo modify n/NEW_COURSE_NAME`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "`courseInfo remove`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "`requirement add n/REQUIREMENT_NAME u/NO_OF_MCS`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "`requirement modify REQUIREMENT_NAME [n/REQUIREMENT_NAME] [u/NO_OF_MCS]`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "`requirement remove REQUIREMENT_NAME`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "`module add n/MODULE_CODE [n/MODULE_TITLE] [u/MCs] [s/SEMESTER] [g/GRADE] [m/MEMO_NOTES]`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "`module modify MODULE_CODE [n/MODULE_CODE] [n/MODULE_TITLE] [u/MCs] [s/SEMESTER] [g/GRADE] [m/MEMO_NOTES]`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "`module remove MODULE_CODE`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "`assign REQUIREMENT_NAME n/MODULE_CODE`"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "waynewee"
        },
        "content": "`exam s/SEMESTER`"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "waynewee"
        },
        "content": "`achieve c/DESIRED_CAP`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "waynewee"
        },
        "content": "`export`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "waynewee"
        },
        "content": "`exit`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "waynewee"
        },
        "content": " ## Glossary"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "waynewee"
        },
        "content": "|               |               |"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "waynewee"
        },
        "content": "| ------------- |-------------  |"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "|Course        |A courseInfo is the entire programme of studies required to complete a university degree |"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "waynewee"
        },
        "content": "|Graduation requirement      |Requirements specified by the university in order for a student to graduate |"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "waynewee"
        },
        "content": "|Module      |Each module of study has a unique module code consisting of a two- or three-letter prefix that generally denotes the discipline, and four digits, the first of which indicates the level of the module |"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "waynewee"
        },
        "content": "|Cumulative Average Point (CAP) |The Cumulative Average Point (CAP) is the weighted average grade point of the letter grades of all the modules taken by the students. |"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "waynewee"
        },
        "content": "|Semester      |A semester is a part of the academic year. Each semester typically lasts 13 weeks in NUS. |"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "waynewee"
        },
        "content": "|Modular Credits (MCs)      |A modular credit (MC) is a unit of the effort, stated in terms of time, expected of a typical student in managing his/her workload. |"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "waynewee"
        },
        "content": "|NUS Mods |A timetabling application built for NUS students, by NUS students. Much like this iGrad! |"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "waynewee"
        },
        "content": "|               |               |"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "waynewee"
        },
        "content": "**Handy Links**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "waynewee"
        },
        "content": "[NUS - Modular System](http://www.nus.edu.sg/registrar/academic-information-policies/graduate/modular-system)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "waynewee"
        },
        "content": "[NUS - Degree Requirements](http://www.nus.edu.sg/registrar/academic-information-policies/undergraduate-students/degree-requirements)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "waynewee"
        },
        "content": "[NUS - Grading System and Regulations](http://www.nus.edu.sg/nusbulletin/yong-siew-toh-conservatory-of-music/undergraduate-education/degree-requirements/grading-system-and-regulations/)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "waynewee"
        },
        "content": "[NUS - Academic Calendar](http://www.nus.edu.sg/registrar/calendar)"
      }
    ],
    "authorContributionMap": {
      "waynewee": 385,
      "nathanaelseen": 51
    }
  },
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "mainClassName \u003d \u0027igrad.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 154
    }
  },
  {
    "path": "src/main/java/igrad/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 8,
      "yjskrs": 3,
      "-": 53
    }
  },
  {
    "path": "src/main/java/igrad/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/igrad/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.CourseBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.JsonCourseBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing iGrad ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ReadOnlyUserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBookStorage courseBookStorage \u003d new JsonCourseBookStorage(userPrefs.getCourseBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        storage \u003d new StorageManager(courseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ui \u003d new UiManager(logic, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s course book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The data from the sample course book will be used instead if {@code storage}\u0027s course book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * or an empty course book will be used instead if errors occur when reading {@code storage}\u0027s course book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Optional\u003cReadOnlyCourseBook\u003e courseBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Optional\u003cReadOnlyUserPrefs\u003e userPrefsOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ReadOnlyCourseBook initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            courseBookOptional \u003d storage.readCourseBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (!courseBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                logger.info(\"CourseBook Data file not found. Will be starting with a sample CourseBook\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            initialData \u003d courseBookOptional.orElseGet(SampleDataUtil::getSampleCourseBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty CourseBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            initialData \u003d new CourseBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty CourseBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            initialData \u003d new CourseBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    protected ReadOnlyUserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Optional\u003cUserPrefs\u003e userPrefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (!userPrefsOptional.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                logger.info(\"UserPrefs Data file not found. Will be starting with a sample UserPrefs\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            initializedPrefs \u003d userPrefsOptional.orElseGet(SampleDataUtil::getSampleUserPrefs);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty UserPrefs\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.info(\"Starting iGrad \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping iGrad ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 41,
      "-": 108,
      "nathanaelseen": 42
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Config values used by the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 61,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String LOG_FILE \u003d \"coursebook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 2,
      "-": 109
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_MODULES_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 9
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a version with major, minor and patch number."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 18,
      "yjskrs": 1,
      "-": 94,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 9,
      "yjskrs": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/java/igrad/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents an error during conversion of data from one format to another."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 9,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A container for App specific utility functions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 36,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 3,
      "yjskrs": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 3,
      "-": 139
    }
  },
  {
    "path": "src/main/java/igrad/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/igrad/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Execute an \u0027Avatar\u0027 command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException If error occurs during parsing avatar name (i.e, it is not valid)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    CommandResult executeAvatar(String commandText) throws ParseException, CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IOException, ServiceException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the CourseBook."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @see Model#getCourseBook()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ReadOnlyCourseBook getCourseBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cRequirement\u003e getRequirementList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the user prefs\u0027 course book file path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Path getCourseBookFilePath();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 3,
      "yjskrs": 18,
      "-": 33,
      "nathanaelseen": 11
    }
  },
  {
    "path": "src/main/java/igrad/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.SelectAvatarCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.CourseBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final CourseBookParser courseBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBookParser \u003d new CourseBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CommandResult executeAvatar(String avatarName) throws ParseException, CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        SelectAvatarCommand selectAvatarCommand \u003d courseBookParser.parseAvatarName(avatarName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        commandResult \u003d selectAvatarCommand.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // Saves to UserPref data file to save new Avatar, after successful Avatar command execution"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ParseException, IOException, ServiceException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Command command \u003d courseBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // Saves to data file after every command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            storage.saveCourseBook(model.getCourseBook());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ReadOnlyCourseBook getCourseBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return model.getCourseBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return model.getRequirementList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return model.getCourseBookFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 29,
      "-": 54,
      "nathanaelseen": 21
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Course information (name) updated on the UI panel."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final boolean courseAdd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean courseAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.courseAdd \u003d courseAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean isCourseAdd() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return courseAdd;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 6,
      "yjskrs": 1,
      "-": 66,
      "nathanaelseen": 13
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/CourseAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Adds a course to the application (there can only be one such course)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseAddCommand extends CourseCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d COURSE_COMMAND_WORD + \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a course. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + PREFIX_NAME + \"COURSE NAME \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + PREFIX_NAME + \"Bachelor of Computing (Honours) in Computer Science \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Good job! I\u0027ve added this course: %1$s\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final CourseInfo toAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates an CourseInfo to add the Course Book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseAddCommand(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(courseInfo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        toAdd \u003d courseInfo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addCourseInfo(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), false, false, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof ModuleAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 toAdd.equals(((CourseAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 1,
      "nathanaelseen": 53
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/CourseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a generic course command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public abstract class CourseCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COURSE_COMMAND_WORD \u003d \"course \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/CourseDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Deletes the existing course (and all data within it)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseDeleteCommand extends CourseCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d COURSE_COMMAND_WORD + \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \": Deletes the course and clears all data in the application.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"Parameters: -Nill\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_DELETE_COURSE_SUCCESS \u003d \"Deleted CourseInfo (all data cleared!): %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        ReadOnlyCourseBook courseBookToDelete \u003d model.getCourseBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        model.resetCourseBook(courseBookToDelete);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_COURSE_SUCCESS, courseBookToDelete));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof CourseDeleteCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 5,
      "nathanaelseen": 32
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/CourseModifyCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Edits the details of an existing module in the course book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseModifyCommand extends CourseCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d COURSE_COMMAND_WORD + \"edit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Modifies name of the course. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + PREFIX_NAME + \"COURSE NAME \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        + PREFIX_NAME + \"Bachelor of Computing (Honours) in Computer Science \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final String MESSAGE_EDIT_COURSE_SUCCESS \u003d \"Edited Course: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    private final CourseInfo toModify;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CourseModifyCommand(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(courseInfo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        toModify \u003d courseInfo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        model.modifyCourseInfo(toModify);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_COURSE_SUCCESS, toModify));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            || (other instanceof ModuleAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "            \u0026\u0026 toModify.equals(((CourseModifyCommand) other).toModify));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 36,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting iGrad as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 15,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 18,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/ModuleAddAutoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MEMO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Adds a module to the course book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleAddAutoCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d MODULE_COMMAND_WORD + \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_TITLE + \"MODULE TITLE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"CREDITS \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MEMO + \"MEMO \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_SEMESTER + \"SEMESTER]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_TITLE + \"Software Engineering \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"4 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MEMO + \"Hard module. Good teachers. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_SEMESTER + \"Y2S2 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added based on NUS Mods data: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates an ModuleAddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleAddAutoCommand(Module module) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof ModuleAddAutoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 toAdd.equals(((ModuleAddAutoCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 46,
      "nathanaelseen": 20
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/ModuleAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MEMO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Adds a module to the course book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleAddCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d MODULE_COMMAND_WORD + \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_TITLE + \"MODULE TITLE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"CREDITS \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MEMO + \"MEMO \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_SEMESTER + \"SEMESTER]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_TITLE + \"Software Engineering \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"4 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MEMO + \"Hard module. Good teachers. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_SEMESTER + \"Y2S2 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the course book\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates an ModuleAddCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleAddCommand(Module module) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof ModuleAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 toAdd.equals(((ModuleAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 11,
      "yjskrs": 13,
      "-": 31,
      "nathanaelseen": 11
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/ModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a generic module command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public abstract class ModuleCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_COMMAND_WORD \u003d \"module \";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/ModuleDeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Deletes a module identified using it\u0027s displayed index from the course book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleDeleteCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d MODULE_COMMAND_WORD + \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \": Deletes the module identified by the index number used in the displayed module list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"Deleted Module: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleDeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module moduleToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof ModuleDeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((ModuleDeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 14,
      "-": 32,
      "nathanaelseen": 7
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/ModuleEditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MEMO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Memo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Edits the details (course name) of the existing course."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleEditCommand extends ModuleCommand {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String COMMAND_WORD \u003d MODULE_COMMAND_WORD + \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the module identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        + \"by the index number used in the displayed module list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_MODULE_CODE + \"MODULE CODE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_CREDITS + \"CREDITS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_MEMO + \"MEMO] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \"[\" + PREFIX_SEMESTER + \"SEMESTER]\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"TAGS]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + PREFIX_CREDITS + \"4\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited Module: %1$s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the course book.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param index                of the module in the filtered module list to edit"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param editModuleDescriptor details to edit the module with"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleEditCommand(Index index, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static Module createEditedPerson(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Title updatedTitle \u003d editModuleDescriptor.getTitle().orElse(moduleToEdit.getTitle());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editModuleDescriptor.getModuleCode().orElse(moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Credits updatedCredits \u003d editModuleDescriptor.getCredits().orElse(moduleToEdit.getCredits());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Memo updatedMemo \u003d editModuleDescriptor.getMemo().orElse(moduleToEdit.getMemo());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Description updatedDescription \u003d editModuleDescriptor.getDescription().orElse(moduleToEdit.getDescription());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Semester updatedSemester \u003d editModuleDescriptor.getSemester().orElse(moduleToEdit.getSemester());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editModuleDescriptor.getTags().orElse(moduleToEdit.getTags());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Module(updatedTitle, updatedModuleCode, updatedCredits, updatedMemo,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            updatedSemester,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            updatedDescription,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            updatedTags"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Title updatedTitle \u003d editModuleDescriptor.getTitle().orElse(moduleToEdit.getTitle());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editModuleDescriptor.getModuleCode().orElse(moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Credits updatedCredits \u003d editModuleDescriptor.getCredits().orElse(moduleToEdit.getCredits());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Memo updatedMemo \u003d editModuleDescriptor.getMemo().orElse(moduleToEdit.getMemo());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Semester updatedSemester \u003d editModuleDescriptor.getSemester().orElse(moduleToEdit.getSemester());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Description updatedDescription \u003d editModuleDescriptor.getDescription().orElse(moduleToEdit.getDescription());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editModuleDescriptor.getTags().orElse(moduleToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Module(updatedTitle, updatedModuleCode, updatedCredits, updatedMemo, updatedSemester,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            updatedDescription, updatedTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cModule\u003e lastShownList \u003d model.getFilteredModuleList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module moduleToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!moduleToEdit.isSameModule(editedModule) \u0026\u0026 model.hasModule(editedModule)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        model.updateFilteredModuleList(Model.PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!(other instanceof ModuleEditCommand)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand e \u003d (ModuleEditCommand) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 editModuleDescriptor.equals(e.editModuleDescriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private Credits credits;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private Memo memo;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private Semester semester;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public EditModuleDescriptor() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public EditModuleDescriptor(EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            setCredits(toCopy.credits);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            setMemo(toCopy.memo);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            setSemester(toCopy.semester);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, moduleCode, credits, memo, description, semester, tags);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cCredits\u003e getCredits() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return Optional.ofNullable(credits);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void setCredits(Credits credits) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            this.credits \u003d credits;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cMemo\u003e getMemo() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return Optional.ofNullable(memo);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setMemo(Memo memo) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            this.memo \u003d memo;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public Optional\u003cSemester\u003e getSemester() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return Optional.ofNullable(semester);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setSemester(Semester semester) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            this.semester \u003d semester;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (!(other instanceof EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            EditModuleDescriptor e \u003d (EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u0026\u0026 getModuleCode().equals(e.getModuleCode())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u0026\u0026 getCredits().equals(e.getCredits())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u0026\u0026 getMemo().equals(e.getMemo())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                \u0026\u0026 getSemester().equals(e.getSemester())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 60,
      "yjskrs": 34,
      "-": 113,
      "nathanaelseen": 70
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/SelectAvatarCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Adds a module to the course book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class SelectAvatarCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_ADD_COURSE \u003d \"Enter your course in the format: \u0027course add n/\u003cNAME OF COURSE\u003e\u0027\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Hi, I\u0027m %s, let\u0027s get started!\\n\" + MESSAGE_ADD_COURSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Avatar toAdd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates an SelectAvatarCommand for Avatar selection"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public SelectAvatarCommand(Avatar avatar) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(avatar);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        toAdd \u003d avatar;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Generates the actual success message for the command replacing the placeholders in MESSAGE_SUCCESS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * with the actual Avatar name. (This method also capitalises the first letter of the Avatar name)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @return String the (command) success message"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private String generateSuccessMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String avatarName \u003d toAdd.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String capitaliseAvatarName \u003d avatarName.substring(0, 1).toUpperCase() + avatarName.substring(1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return String.format(MESSAGE_SUCCESS, capitaliseAvatarName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        model.setAvatar(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CommandResult(String.format(generateSuccessMessage(), toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof SelectAvatarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 toAdd.equals(((SelectAvatarCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 36,
      "nathanaelseen": 18
    }
  },
  {
    "path": "src/main/java/igrad/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/AddAutoCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MEMO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleAddAutoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Memo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.JsonParsedModule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.NusModsRequester;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new ModuleAddCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class AddAutoCommandParser implements Parser\u003cModuleAddAutoCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleAddCommand"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an ModuleAddCommand object for execution."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleAddAutoCommand parse(String args) throws ParseException, IOException, ServiceException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                args,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                PREFIX_TITLE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                PREFIX_CREDITS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                PREFIX_TAG,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                PREFIX_MEMO,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                PREFIX_SEMESTER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleAddAutoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String moduleCodeStr \u003d argMultimap.getValue((PREFIX_MODULE_CODE)).get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Set\u003cTag\u003e tagsList \u003d ParserUtil.parseTag(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        JsonParsedModule jsonParsedModule \u003d NusModsRequester.getModule(moduleCodeStr);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(jsonParsedModule.getTitle());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Credits credits \u003d ParserUtil.parseCredits(jsonParsedModule.getCredits());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(jsonParsedModule.getDescription());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(jsonParsedModule.getModuleCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Memo memo \u003d argMultimap.getValue(PREFIX_MEMO).isPresent()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ? ParserUtil.parseMemo(argMultimap.getValue(PREFIX_MEMO).get())"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Semester semester \u003d argMultimap.getValue(PREFIX_SEMESTER).isPresent()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ? ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new Module(title, moduleCode, credits, memo, semester, description, tagsList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new ModuleAddAutoCommand(module);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 50,
      "nathanaelseen": 37
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 3,
      "yjskrs": 1,
      "-": 58
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns a boolean variable specifying if the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * specified flag is present"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param argsString e.g. \"add n/CS2103T -a\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param flag       the substring \"-a\" in the argsString"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static boolean isFlagPresent(String argsString, String flag) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(flag);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(argsString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return matcher.find();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Removes all flags from the argument string."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Take note that flags are only specified at the end of a command"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param argsString e.g. \"add n/CS2103T -a\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @return argsString without flags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static String removeFlags(String argsString) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        int firstFlagIndex \u003d argsString.indexOf(\"-\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (firstFlagIndex \u003c 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return argsString;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return argsString.substring(0, firstFlagIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 33,
      "yjskrs": 1,
      "-": 147,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Prefix PREFIX_CREDITS \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Prefix PREFIX_MEMO \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Prefix PREFIX_SEMESTER \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final Flag FLAG_AUTO \u003d new Flag(\"-a\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 7,
      "yjskrs": 1,
      "-": 8,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/CourseAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CourseAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleAddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new CourseAddCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseAddCommandParser implements Parser\u003cCourseAddCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CourseAddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an CourseAddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                ModuleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Name name \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d new CourseInfo(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CourseAddCommand(courseInfo);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 49
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/CourseBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.FLAG_AUTO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CourseAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.CourseDeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.SelectAvatarCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CourseBookParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Used for initial separation of command words and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        \"(?\u003ccommandWord\u003e[a-z]+(\\\\s[a-z]{3,})?)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses avatar name entered by user into {@code SelectAvatarCommand} for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param avatarName full user input string (consisting the avatarName)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public SelectAvatarCommand parseAvatarName(String avatarName) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        SelectAvatarCommandParser selectAvatarCommandParser \u003d new SelectAvatarCommandParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        SelectAvatarCommand selectAvatarCommand \u003d selectAvatarCommandParser.parse(avatarName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return selectAvatarCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException, IOException, ServiceException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final String argumentsWithFlags \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final String arguments \u003d ArgumentTokenizer.removeFlags(argumentsWithFlags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case ModuleAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (ArgumentTokenizer.isFlagPresent(argumentsWithFlags, FLAG_AUTO.getFlag())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return new AddAutoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                return new ModuleAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case ModuleEditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new ModuleEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case ModuleDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new ModuleDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case CourseAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new CourseAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        case CourseDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // course delete has no arguments, hence no parse(argument) method needed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new CourseDeleteCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 9,
      "yjskrs": 3,
      "-": 37,
      "nathanaelseen": 50
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/Flag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * A flag that, if present, specifies the system to include the option."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * E.g. \u0027-a\u0027 in \u0027add n/CS2103T -a\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Flag {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final String flag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Flag(String flag) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.flag \u003d flag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getFlag() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return flag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return getFlag();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return flag \u003d\u003d null ? 0 : flag.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!(obj instanceof Flag)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Flag otherFlag \u003d (Flag) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return otherFlag.getFlag().equals(getFlag());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 38,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/ModuleAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MEMO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Memo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new ModuleAddCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleAddCommandParser implements Parser\u003cModuleAddCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleAddCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an ModuleAddCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_MODULE_CODE, PREFIX_CREDITS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                PREFIX_MEMO, PREFIX_SEMESTER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * module add n/MODULE_CODE [n/MODULE_TITLE] [u/MCs] [s/SEMESTER] [g/GRADE] [m/MEMO_NOTES]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * As can be seen, MODULE_CODE is the only compulsory field, so we\u0027re just validating for its"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         * presence in the below."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                ModuleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Credits credits \u003d ParserUtil.parseCredits(argMultimap.getValue(PREFIX_CREDITS).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Memo memo \u003d argMultimap.getValue(PREFIX_MEMO).isPresent()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ? ParserUtil.parseMemo(argMultimap.getValue(PREFIX_MEMO).get())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Description description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ? ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Semester semester \u003d argMultimap.getValue(PREFIX_SEMESTER).isPresent()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ? ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTag(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module module \u003d new Module(title, moduleCode, credits, memo, semester, description, tagList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new ModuleAddCommand(module);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 6,
      "-": 22,
      "nathanaelseen": 53
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/ModuleDeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleDeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new ModuleDeleteCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleDeleteCommandParser implements Parser\u003cModuleDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleDeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns a ModuleDeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return new ModuleDeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleDeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 5,
      "-": 16,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/ModuleEditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MEMO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new ModuleEditCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleEditCommandParser implements Parser\u003cModuleEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleEditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an ModuleEditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleEditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_MODULE_CODE, PREFIX_CREDITS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                PREFIX_MEMO, PREFIX_SEMESTER, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                ModuleEditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand.EditModuleDescriptor editModuleDescriptor \u003d new ModuleEditCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            editModuleDescriptor.setTitle(ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            editModuleDescriptor.setModuleCode(ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                argMultimap.getValue(PREFIX_MODULE_CODE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CREDITS).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            editModuleDescriptor.setCredits(ParserUtil.parseCredits(argMultimap.getValue(PREFIX_CREDITS).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MEMO).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            editModuleDescriptor.setMemo(ParserUtil.parseMemo(argMultimap.getValue(PREFIX_MEMO).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SEMESTER).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            editModuleDescriptor.setSemester(ParserUtil.parseSemester(argMultimap.getValue(PREFIX_SEMESTER).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editModuleDescriptor::setTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(ModuleEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new ModuleEditCommand(index, editModuleDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Optional.of(ParserUtil.parseTag(tagSet));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 6,
      "-": 48,
      "nathanaelseen": 40
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    T parse(String userInput) throws ParseException, IOException, ServiceException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 3,
      "-": 12,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Memo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String title} into a {@code Title}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedName \u003d title.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Title.isValidTitle(trimmedName)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new Title(trimmedName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Name parseModuleName(String name) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String moduleCode} into a {@code ModuleCode}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code moduleCode} is invalid."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new ModuleCode(trimmedModuleCode);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String credits} into an {@code Credits}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code credits} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Credits parseCredits(String credits) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String trimmedCredits \u003d credits.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!Credits.isValidCredits(trimmedCredits)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new ParseException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new Credits(trimmedCredits);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String memo} into an {@code Memo}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code memo} is invalid."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Memo parseMemo(String memo) throws ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(memo);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedMemo \u003d memo.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //     throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Memo(trimmedMemo);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Parses a {@code String semester} into an {@code Semester}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @throws ParseException if the given {@code semester} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static Semester parseSemester(String semester) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String trimmedSemester \u003d semester.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!Semester.isValidSemester(trimmedSemester)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new ParseException(Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new Semester(trimmedSemester);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses a {@code String name} into an {@code Avatar}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @throws ParseException if the given {@code avatarName} is invalid."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Avatar parseAvatarName(String name) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Avatar.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new ParseException(Avatar.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Avatar(trimmedName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Set\u003cTag\u003e parseTag(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final Set\u003cTag\u003e tagsSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            tagsSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return tagsSet;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 39,
      "yjskrs": 5,
      "-": 73,
      "nathanaelseen": 70
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/SelectAvatarCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.commands.SelectAvatarCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Parses input arguments and creates a new SelectAvatarCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class SelectAvatarCommandParser implements Parser\u003cSelectAvatarCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the given {@code String} representing the Avatar name in the context of the SelectAvatarCommand"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * and returns an SelectAvatarCommand object for execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public SelectAvatarCommand parse(String name) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Avatar avatar \u003d ParserUtil.parseAvatarName(name);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new SelectAvatarCommand(avatar);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 18,
      "nathanaelseen": 5
    }
  },
  {
    "path": "src/main/java/igrad/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/igrad/model/CourseBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.UniqueRequirementList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Wraps all data at the course book level."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CourseBook implements ReadOnlyCourseBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final UniqueRequirementList requirements;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private CourseInfo courseInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements \u003d new UniqueRequirementList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseInfo \u003d null; // TODO: change to Optional or default value"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseBook() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Creates an CourseBook using the Modules in the {@code toBeCopied}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBook(ReadOnlyCourseBook toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Replaces the contents of the requirement list (which consists a list of modules) with {@code requirements}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code requirements} must not contain duplicate modules."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements(List\u003cRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirements.setRequirements(requirements);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Resets the existing data of this {@code CourseBook} with {@code newData}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetData(ReadOnlyCourseBook newData) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setRequirements(newData.getRequirementList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // Course-level operations"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds the given courseInfo (only one courseInfo can exist/ever be created in the system)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void addCourseInfo(CourseInfo c) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // TODO: Restrict to one"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseInfo \u003d c;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the courseInfo with {@code editedCourseInfo}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void modifyCourseInfo(CourseInfo editedCourseInfo) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.courseInfo \u003d editedCourseInfo;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo getCourseInfo() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return courseInfo;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // Module-level operations"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the course book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a module to the course book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module must not already exist in the course book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addModule(Module m) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.add(m);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the course book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * in the course book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes {@code key} from this {@code CourseBook}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code key} must exist in the course book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // Requirement-level operations"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if a requirement with the same identity as {@code requirement} exists in the course book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirement);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return requirements.contains(requirement);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a requirement to the course book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The requirement must not already exist in the course book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements.add(requirement);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the given requirement {@code target} in the list with {@code editedRequirement}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the course book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module identity of {@code editedRequirement} must not be the same as another existing requirement"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * in the course book."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement(Requirement target, Requirement editedRequirement) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(editedRequirement);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements.setRequirement(target, editedRequirement);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes {@code requirement} from this {@code CourseBook}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code requirement} must exist in the course book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void removeRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements.remove(requirement);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return requirements.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof CourseBook // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 modules.equals(((CourseBook) other).modules)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 courseInfo.equals(((CourseBook) other).courseInfo));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 4,
      "yjskrs": 103,
      "-": 70,
      "nathanaelseen": 25
    }
  },
  {
    "path": "src/main/java/igrad/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Predicate\u003cRequirement\u003e PREDICATE_SHOW_ALL_REQUIREMENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the user prefs\u0027 course book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Path getCourseBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Sets the user prefs\u0027 course book file path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void setCourseBookFilePath(Path courseBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Resets course book data to a blank state with no data (e.g, modules, requirements, etc)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void resetCourseBook(ReadOnlyCourseBook courseBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns the Avatar"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    Avatar getAvatar();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Sets the Avatar"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    void setAvatar(Avatar avatar);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Checks whether the Avatar is a sample Avatar (i.e, Avatar not set yet)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    boolean isSampleAvatar();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the CourseBook"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ReadOnlyCourseBook getCourseBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Replaces course book data with the data in {@code courseBook}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void setCourseBook(ReadOnlyCourseBook courseBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the course book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module must exist in the course book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Adds the given courseInfo to the course book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void addCourseInfo(CourseInfo courseInfo);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the courseInfo."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    CourseInfo getCourseInfo();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Modifies the name of the course."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    void modifyCourseInfo(CourseInfo courseInfo);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code module} must not already exist in the course book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the course book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the course book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    boolean hasRequirement(Requirement requirement);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void addRequirement(Requirement requirement);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void setRequirements(Requirement target, Requirement editedRequirement);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void deleteRequirement(Requirement requirement);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the filtered module list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the requirements list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cRequirement\u003e getRequirementList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Updates the filter of the filtered requirement list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void updateRequirementList(Predicate\u003cRequirement\u003e predicate);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 11,
      "teriaiw": 5,
      "yjskrs": 50,
      "-": 51,
      "nathanaelseen": 40
    }
  },
  {
    "path": "src/main/java/igrad/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents the in-memory model of the course book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final CourseBook courseBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final FilteredList\u003cRequirement\u003e requirements;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Initializes a ModelManager with the given courseBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModelManager(ReadOnlyCourseBook courseBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(courseBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.fine(\"Initializing with course book: \" + courseBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Retrieving all course book data (modules, course info, requirements, from storage)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.courseBook \u003d new CourseBook(courseBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirements \u003d new FilteredList\u003c\u003e(this.courseBook.getRequirementList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.filteredModules \u003d new FilteredList\u003c\u003e(this.courseBook.getModuleList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //this.courseInfo \u003d this.courseBook.getCourseInfo();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this(new CourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return userPrefs.getCourseBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setCourseBookFilePath(Path courseBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(courseBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        userPrefs.setCourseBookFilePath(courseBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Avatar getAvatar() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return userPrefs.getAvatar();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void setAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(avatar);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        userPrefs.setAvatar(avatar);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean isSampleAvatar() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this.getUserPrefs().getAvatar().equals(Avatar.getSampleAvatar());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CourseBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Resets the course book data to a blank state with no data (e.g, modules, requirements, etc)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param courseBook"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void resetCourseBook(ReadOnlyCourseBook courseBook) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.setCourseBook(new CourseBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ReadOnlyCourseBook getCourseBook() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setCourseBook(ReadOnlyCourseBook courseBook) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.courseBook.resetData(courseBook);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook.hasModule(module);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseBook.removeModule(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo getCourseInfo() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return courseBook.getCourseInfo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Adds the given courseInfo to the course book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param courseInfo"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void addCourseInfo(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseBook.addCourseInfo(courseInfo);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * Modifies the name of the course."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     * @param courseInfo"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void modifyCourseInfo(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        courseBook.modifyCourseInfo(courseInfo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.addModule(module);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.setModule(target, editedModule);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(requirement);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook.hasRequirement(requirement);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.addRequirement(requirement);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        updateRequirementList(PREDICATE_SHOW_ALL_REQUIREMENTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements(Requirement target, Requirement editedRequirement) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(target, editedRequirement);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.setRequirement(target, editedRequirement);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void deleteRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.removeRequirement(requirement);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code versionedCourseBook}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Requirement List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return requirements;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void updateRequirementList(Predicate\u003cRequirement\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements.setPredicate(predicate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook.equals(other.courseBook)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 10,
      "teriaiw": 10,
      "yjskrs": 83,
      "-": 94,
      "nathanaelseen": 49
    }
  },
  {
    "path": "src/main/java/igrad/model/ReadOnlyCourseBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Unmodifiable view of a course book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public interface ReadOnlyCourseBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the requirements in the course book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cRequirement\u003e getRequirementList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 13,
      "-": 8
    }
  },
  {
    "path": "src/main/java/igrad/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Path getCourseBookFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    Avatar getAvatar();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 3,
      "-": 12,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Path courseBookFilePath \u003d Paths.get(\"data\", \"coursebook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Avatar avatar \u003d new Avatar();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setCourseBookFilePath(newUserPrefs.getCourseBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        setAvatar(newUserPrefs.getAvatar());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setCourseBookFilePath(Path courseBookFilePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(courseBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.courseBookFilePath \u003d courseBookFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Avatar getAvatar() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return avatar;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(avatar);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.avatar \u003d avatar;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 courseBookFilePath.equals(o.courseBookFilePath)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 avatar.equals(o.avatar);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return Objects.hash(guiSettings, courseBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + courseBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(\"\\nAvatar : \" + avatar);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 11,
      "-": 78,
      "nathanaelseen": 9
    }
  },
  {
    "path": "src/main/java/igrad/model/avatar/Avatar.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.model.avatar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents an Avatar (the user selects to represent him/herself) in the course book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Avatar {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"The avatar chosen should be in the list of avatars!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final String[] AVATAR_NAMES \u003d new String[] {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"po\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"shibu\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"chikin\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"grizzly\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"koala\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"frogger\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"sample\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    };"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Model classes; Module.java, CourseInfo.java should not have such no-arg constructor, by convention."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * This is an exception here because the Model class (Avatar.java) needs to be saved (serialised)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * to a file. Hence the serialising library requires such constructor"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Avatar() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Avatar(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if a valid avatar name as per the names in AVATAR_NAMES."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static boolean isValidName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (String avatarName : AVATAR_NAMES) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (name.equals(avatarName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*public static Avatar getAvatar() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return AvatarStorage.readAvatar();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            return getSampleAvatar();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Avatar getSampleAvatar() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Avatar sampleAvatar \u003d new Avatar(\"sample\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return sampleAvatar;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static List\u003cAvatar\u003e getAvatarList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cAvatar\u003e avatarList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (String name : AVATAR_NAMES) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            avatarList.add(new Avatar(name));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return avatarList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if both avatars have the same name."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!(other instanceof Avatar)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Avatar otherAvatar \u003d (Avatar) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return otherAvatar.getName().equals(getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(\"Name : \" + name);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 60,
      "nathanaelseen": 49
    }
  },
  {
    "path": "src/main/java/igrad/model/course/CourseInfo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents all the (additional) details a Course (there\u0027s only one of which), might have e.g, course name."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseInfo {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo(Name name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!(other instanceof CourseInfo)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo otherCourseInfo \u003d (CourseInfo) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return otherCourseInfo.getName().equals(getName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 61
    }
  },
  {
    "path": "src/main/java/igrad/model/course/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a CourseInfo\u0027s name in the course book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        value \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 value.equals(((Name) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "nathanaelseen": 11
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Credits.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a Module\u0027s credit units in the course book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCredits(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Credits {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Modular credits should contain one or more digits!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs an {@code Credits}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param credits A valid credits address."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Credits(String credits) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        checkArgument(isValidCredits(credits), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        value \u003d credits;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if a given string is a valid credits."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static boolean isValidCredits(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof Credits // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 value.equals(((Credits) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 49,
      "nathanaelseen": 4
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Description.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values, and is optional\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 37,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Memo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a Module\u0027s memo in the course book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Memo {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Memos can take any values, and is optional\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs an {@code Memo}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param memo A valid memo."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Memo(String memo) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        value \u003d memo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static boolean isValidMemo(String test) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return test.length() \u003e 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof Memo // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 value.equals(((Memo) other).value)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 40,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a Module in the course book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Credits credits;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Memo memo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Semester semester;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Module(Title title, ModuleCode moduleCode, Credits credits, Memo memo, Semester semester,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                  Description description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireAllNonNull(title, moduleCode, credits);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.memo \u003d memo;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Credits getCredits() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Memo getMemo() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return memo;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if both modules have the same module code."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * This defines a weaker notion of equality between two modules than Module#isSameModule."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasModuleCodeOf(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (moduleCode \u003d\u003d this.moduleCode) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return getModuleCode().equals(moduleCode);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if both modules of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * This defines a weaker notion of equality between two modules."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 otherModule.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 otherModule.getCredits().equals(getCredits());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if both modules have the same identity and data fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * This defines a stronger notion of equality between two modules."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return otherModule.getTitle().equals(getTitle())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 otherModule.getCredits().equals(getCredits());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Objects.hash(title, moduleCode, credits, memo, description, semester, tags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(\" Code: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(getModuleCode())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .append(\" Credits: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(getCredits())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(\" Memo: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(getMemo())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(\" Description: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(getDescription())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(\" Semester: \")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            .append(getSemester())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            .append(\"Tags: \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 45,
      "yjskrs": 24,
      "-": 71,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/main/java/igrad/model/module/ModuleCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a Module\u0027s module code in the course book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Module code should contain two letters at the front and four\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \" numbers at the back, with an optional letter at the end.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".{2,3}\\\\d{4}.?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        value \u003d moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 value.equals(((ModuleCode) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 51,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Semester.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Represents the semester a module was taken."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSemester(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \"Semester should be in the format Y_S_ e.g. Y1S2\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)Y[1-4]S[1-2]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs a {@code Semester}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param semester A valid module code."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public Semester(String semester) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        checkArgument(isValidSemester(semester), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        value \u003d semester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static boolean isValidSemester(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return test \u003d\u003d null || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof Semester // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 value.equals(((Semester) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 49,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/model/module/Title.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Represents a Module\u0027s title in the course book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 1,
      "-": 39,
      "nathanaelseen": 16
    }
  },
  {
    "path": "src/main/java/igrad/model/module/TitleContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Tests that a {@code Module}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class TitleContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public TitleContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(module.getTitle().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            || (other instanceof TitleContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u0026\u0026 keywords.equals(((TitleContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 4,
      "-": 22,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/module/UniqueModuleList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A module is considered unique by comparing using {@code Module#isSameModule(Module)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * modules uses Module#isSameModule(Module) for equality so as to ensure that the module being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. However, the removal of a module uses Module#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * as to ensure that the module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * @see Module#isSameModule(Module)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!target.isSameModule(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                if (modules.get(i).isSameModule(modules.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 136,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Signals that the operation will result in duplicate Modules (Modules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 11
    }
  },
  {
    "path": "src/main/java/igrad/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 5,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/ReadOnlyRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Unmodifiable view of a requirement."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public interface ReadOnlyRequirement {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the title of the requirement."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Title getTitle();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an unmodifiable view of the modules in this requirement."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 21
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/Requirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Contains data at the requirement level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class Requirement implements ReadOnlyRequirement {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final UniqueModuleList modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Requirement(Title title) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Requirement(Title title, List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setModules(modules);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Requirement(ReadOnlyRequirement toBeCopied) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // requirement-level operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Resets the existing data of this {@code Requirement} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetData(ReadOnlyRequirement newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setTitle(newData.getTitle());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // module-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the title with {@code newTitle}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void modifyTitle(Title newTitle) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.title \u003d newTitle;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module must not already exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.add(module);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * in the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes {@code module} from this {@code Requirement}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code module} must exist in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void removeModule(Module module) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.remove(module);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Replaces the title of the requirement with {@code newTitle}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void setTitle(Title newTitle) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.title \u003d newTitle;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean hasSameTitle(Requirement requirement) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this.title.equals(requirement.title);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof Requirement // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 modules.equals(((Requirement) other).modules)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 title.equals(((Requirement) other).title));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 128,
      "nathanaelseen": 11
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/Title.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a Requirement\u0027s title."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 58
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/UniqueRequirementList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.exceptions.DuplicateRequirementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.exceptions.RequirementNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A list of requirements that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A requirement is considered unique by comparing using {@code Requirement#hasSameTitle(Requirement)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * As such, adding and updating of requirements uses Requirement#hasSameTitle(Requirement) for equality"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * so as to ensure that the requirement being added or updated is unique in terms of title in this class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * @see Requirement#hasSameTitle(Requirement)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class UniqueRequirementList implements Iterable\u003cRequirement\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final ObservableList\u003cRequirement\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final ObservableList\u003cRequirement\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if the list contains an equivalent requirement as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean contains(Requirement toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::hasSameTitle);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a requirement to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The requirement must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void add(Requirement toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DuplicateRequirementException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the requirement {@code target} in the list with {@code editedRequirement}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirement(Requirement target, Requirement editedRequirement) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(target, editedRequirement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new RequirementNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!target.hasSameTitle(editedRequirement) \u0026\u0026 contains(editedRequirement)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DuplicateRequirementException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.set(index, editedRequirement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Removes the equivalent requirement from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * The requirement must exist in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void remove(Requirement toRemove) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new RequirementNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements(UniqueRequirementList replacement) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Replaces the contents of this list with {@code requirements}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code requirements} must not contain duplicate requirements."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setRequirements(List\u003cRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireAllNonNull(requirements);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!requirementsAreUnique(requirements)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DuplicateRequirementException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        internalList.setAll(requirements);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ObservableList\u003cRequirement\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Iterator\u003cRequirement\u003e iterator() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            || (other instanceof UniqueRequirementList // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueRequirementList) other).internalList));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns true if {@code requirements} contains only unique requirements."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private boolean requirementsAreUnique(List\u003cRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (int i \u003d 0; i \u003c requirements.size() - 1; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            for (int j \u003d i + 1; j \u003c requirements.size(); j++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                if (requirements.get(i).hasSameTitle(requirements.get(j))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 136
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/exceptions/DuplicateRequirementException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Signals that the operation will result in duplicate requirements with the same title."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class DuplicateRequirementException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public DuplicateRequirementException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        super(\"Operation would result in duplicate requirements\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 10
    }
  },
  {
    "path": "src/main/java/igrad/model/requirement/exceptions/RequirementNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.requirement.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Signals that the operation is unable to find the specified requirement."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class RequirementNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 7
    }
  },
  {
    "path": "src/main/java/igrad/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a Tag in the course book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/java/igrad/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Memo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Contains utility methods for populating {@code CourseBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static Module[] getSamplePersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            new Module(new Title(\"Software Engineering\"), new ModuleCode(\"CS2103T\"), new Credits(\"4\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                new Memo(\"Fun module, but a lot of work\"), new Semester(\"Y2S2\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                new Description(\"blah\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            new Module(new Title(\"Introduction to Operating Systems\"), new ModuleCode(\"CS2106\"), new Credits(\"4\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                new Memo(\"Learn about pipes and acheiving synchronity in shared resources\"), new Semester(\"Y2S2\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                new Description(\"blah\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            new Module(new Title(\"Linear Algebra II\"), new ModuleCode(\"MA2101\"), new Credits(\"4\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                new Memo(\"Still linear algebra, so everything is relatively linear\"), new Semester(\"Y2S2\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                new Description(\"blah\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            new Module(new Title(\"Introduction to Database systems\"), new ModuleCode(\"CS2102\"), new Credits(\"4\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                new Memo(\"Learn about relational calculus\"), new Semester(\"Y2S2\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                new Description(\"blah\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Avatar getSampleAvatar() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Avatar.getSampleAvatar();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Path getSampleCourseBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return Paths.get(\"data\", \"coursebook.json\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static ReadOnlyCourseBook getSampleCourseBook() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook sampleCourseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (Module sampleModule : getSamplePersons()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            sampleCourseBook.addModule(sampleModule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return sampleCourseBook;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static UserPrefs getSampleUserPrefs() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        UserPrefs sampleUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sampleUserPrefs.setGuiSettings(new GuiSettings());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sampleUserPrefs.setCourseBookFilePath(getSampleCourseBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sampleUserPrefs.setAvatar(getSampleAvatar());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return sampleUserPrefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 13,
      "-": 27,
      "nathanaelseen": 43
    }
  },
  {
    "path": "src/main/java/igrad/services/GetRequestManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * The handler for all get requests"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class GetRequestManager extends RequestManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public GetRequestManager(String url) throws IOException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(url);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Makes a request to the web-page specified by {@code url}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @return the response converted to a string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String makeRequest() throws IOException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.getResponseCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        BufferedReader in \u003d new BufferedReader("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            new InputStreamReader(connection.getInputStream())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String inputLine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        StringBuilder content \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        while ((inputLine \u003d in.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            content.append(inputLine);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.disconnect();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return content.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 42,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/services/JsonParsedModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * A buffer for the Module class which additionally handles the parsing of a JSON response string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class JsonParsedModule {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String credits;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public JsonParsedModule(String title, String moduleCode, String credits, String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Parses a JSON response string. This function is rudimentary and can only handle"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * single-level JSON strings with no nesting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param data A JSON response string"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @return a JsonParsedModule object with {@code title},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * {@code moduleCode},"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * {@code credits} and"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * {@code description} attributes"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static JsonParsedModule initJsonParsedModule(String data) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String title \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String moduleCode \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String credits \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        data \u003d data.substring(1, data.length() - 2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String[] keyValueStrArray \u003d data.split(\"\\\",\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (String keyValueStr : keyValueStrArray) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String[] keyValueStrSplit \u003d keyValueStr.split(\":\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String key \u003d keyValueStrSplit[0].substring(1, keyValueStrSplit[0].length() - 1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            StringBuilder value \u003d new StringBuilder();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            while (i \u003c keyValueStrSplit.length) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                if (i \u003e 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                    value.append(keyValueStrSplit[i]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            String valueStr \u003d value.length() \u003e 0 ? value.toString().substring(1) : \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            switch (key) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            case \"ModuleCode\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                moduleCode \u003d valueStr;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            case \"ModuleTitle\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                title \u003d valueStr;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            case \"ModuleCredit\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                credits \u003d valueStr;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            case \"ModuleDescription\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                description \u003d valueStr;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return new JsonParsedModule(title, moduleCode, credits, description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getModuleCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getCredits() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return \"Module Title: \" + title"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \"\\nModule Code: \" + moduleCode"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \"\\nModular Credits: \" + credits"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \"\\nDescription: \" + description;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 101,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/services/NusModsRequester.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * The client of NUSMods which makes requests from NUSMods API"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class NusModsRequester {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(NusModsRequester.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final String fileNotFoundMsg \u003d \"The specified module could not be\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \" found on NUS Mods. Please remove the \" + CliSyntax.FLAG_AUTO"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        + \" flag and add the file manually\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * A representation of the {@code Module} object, but all attributes are strings"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param moduleCode code of module to be fetched from NUSMods API"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @return a {@code JsonParsedModule} object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static JsonParsedModule getModule(String moduleCode) throws IOException, ServiceException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String academicYear \u003d getAcademicYear(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        GetRequestManager getRequestManager \u003d new GetRequestManager(getUrlPath(academicYear, moduleCode));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String res;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        JsonParsedModule jsonParsedModule \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            res \u003d getRequestManager.makeRequest();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            jsonParsedModule \u003d JsonParsedModule.initJsonParsedModule(res);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (FileNotFoundException e1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            logger.warning(fileNotFoundMsg);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            academicYear \u003d getAcademicYear(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            GetRequestManager getRequestManager2 \u003d new GetRequestManager(getUrlPath(academicYear, moduleCode));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                res \u003d getRequestManager2.makeRequest();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                jsonParsedModule \u003d JsonParsedModule.initJsonParsedModule(res);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } catch (FileNotFoundException e2) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                logger.warning(fileNotFoundMsg);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                throw new ServiceException(fileNotFoundMsg, e2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            logger.warning(\"Error attempting to read from response stream\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return jsonParsedModule;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static String getUrlPath(String academicYear, String moduleCode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return Routes.NUS_MODS_ROOT + \"/\" + academicYear"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + \"/\" + Routes.NUS_MODS_MODULES_DIR + \"/\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + moduleCode.toUpperCase() + \"/\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            + Routes.NUS_MODS_INDEX_JSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static String getAcademicYear(Boolean getPrevYear) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        int year \u003d Calendar.getInstance().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Calendar startOfSem \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        startOfSem.set(Calendar.YEAR, year);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        startOfSem.set(Calendar.MONTH, Calendar.AUGUST);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        startOfSem.set(Calendar.DAY_OF_MONTH, 9);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Date startOfSemDate \u003d startOfSem.getTime();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Date nowDate \u003d now.getTime();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (getPrevYear) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (nowDate.before(startOfSemDate)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return (year - 2) + \"-\" + (year - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return (year - 1) + \"-\" + (year - 2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (nowDate.before(startOfSemDate)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return (year - 1) + \"-\" + year;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                return year + \"-\" + (year - 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 92,
      "nathanaelseen": 7
    }
  },
  {
    "path": "src/main/java/igrad/services/RequestManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * The Request Manager sets up the connection for its children"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public abstract class RequestManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    protected URL url;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    protected HttpURLConnection connection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @param urlName url of the site to retrieve data from"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public RequestManager(String urlName) throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        url \u003d new URL(urlName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.setRequestProperty(\"Content-Type\", \"application/json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        connection.setReadTimeout(5000);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 25,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/services/Routes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Contains NUS MODS path and file names."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class Routes {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String NUS_MODS_ROOT \u003d \"https://api.nusmods.com\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String NUS_MODS_INDEX_JSON \u003d \"index.json\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public static final String NUS_MODS_MODULES_DIR \u003d \"modules\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 11,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/services/exceptions/ServiceException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.services.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Represents an error which occurs during execution of a {@code Request}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class ServiceException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ServiceException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ServiceException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 16,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/storage/CourseBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a storage for {@link CourseBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public interface CourseBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Path getCourseBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns CourseBook data as a {@link ReadOnlyCourseBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Optional\u003cReadOnlyCourseBook\u003e readCourseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @see #getCourseBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Optional\u003cReadOnlyCourseBook\u003e readCourseBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Saves the given {@link ReadOnlyCourseBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param courseBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void saveCourseBook(ReadOnlyCourseBook courseBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @see #saveCourseBook(ReadOnlyCourseBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void saveCourseBook(ReadOnlyCourseBook courseBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 46,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonAdaptedModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Memo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final String credits;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final String memo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final String semester;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"title\") String name, @JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                             @JsonProperty(\"credits\") String credits, @JsonProperty(\"memo\") String memo,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                             @JsonProperty(\"semester\") String semester, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tags) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.title \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.credits \u003d credits;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.memo \u003d memo;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (tags !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            this.tags.addAll(tags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleCode \u003d source.getModuleCode().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        credits \u003d source.getCredits().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        memo \u003d source.getMemo() !\u003d null ? source.getMemo().value : null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        semester \u003d source.getSemester() !\u003d null ? source.getSemester().value : null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        tags.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts this Jackson-friendly adapted module object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted module."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final List\u003cTag\u003e moduleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (JsonAdaptedTag tag : tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            moduleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (credits \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Credits.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!Credits.isValidCredits(credits)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(Credits.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (!Semester.isValidSemester(semester)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            throw new IllegalValueException(Semester.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final Credits modelCredits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final Semester modelSemester \u003d new Semester(semester);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final Memo modelMemo \u003d new Memo(memo);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(moduleTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Module(modelTitle, modelModuleCode, modelCredits, modelMemo, modelSemester,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            modelDescription, modelTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 31,
      "yjskrs": 16,
      "-": 45,
      "nathanaelseen": 34
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonAdaptedRequirement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Jackson-friendly version of {@link Requirement}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "class JsonAdaptedRequirement {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Requirement\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final List\u003cString\u003e moduleCodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Constructs a {@code JsonAdaptedRequirement} with the given module details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public JsonAdaptedRequirement(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                  @JsonProperty(\"modules\") List\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (moduleCodes !\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            this.moduleCodes.addAll(moduleCodes);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts a given {@code Requirement} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public JsonAdaptedRequirement(Requirement source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        moduleCodes.addAll(source.getModuleList().stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .map(module -\u003e module.getModuleCode().toString())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts this Jackson-friendly adapted requirement object into the model\u0027s {@code Requirement} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted requirement."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Requirement toModelType(List\u003cModule\u003e moduleList) throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final List\u003cModule\u003e modelModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelModules.addAll(moduleList.stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .filter(module -\u003e moduleCodes.stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                .anyMatch(code -\u003e module.hasModuleCodeOf(new ModuleCode(code))))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new Requirement(modelTitle, modelModules);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 73
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonCourseBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A class to access CourseBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class JsonCourseBookStorage implements CourseBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCourseBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public JsonCourseBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cReadOnlyCourseBook\u003e readCourseBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return readCourseBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Similar to {@link #readCourseBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cReadOnlyCourseBook\u003e readCourseBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Optional\u003cJsonSerializableCourseBook\u003e jsonCourseBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            filePath, JsonSerializableCourseBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!jsonCourseBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return Optional.of(jsonCourseBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook(ReadOnlyCourseBook courseBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        saveCourseBook(courseBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Similar to {@link #saveCourseBook(ReadOnlyCourseBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook(ReadOnlyCourseBook courseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(courseBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCourseBook(courseBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 80,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonSerializableCourseBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * An Immutable CourseBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "@JsonRootName(value \u003d \"coursebook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "class JsonSerializableCourseBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REQUIREMENT \u003d \"Requirement list contains duplicate requirement(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final List\u003cJsonAdaptedRequirement\u003e requirements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Constructs a {@code JsonSerializableCourseBook} with the given modules."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public JsonSerializableCourseBook(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                                      @JsonProperty(\"requirements\") List\u003cJsonAdaptedRequirement\u003e requirements) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.requirements.addAll(requirements);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts a given {@code ReadOnlyCourseBook} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCourseBook}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public JsonSerializableCourseBook(ReadOnlyCourseBook source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modules.addAll(source.getModuleList().stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .map(JsonAdaptedModule::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        requirements.addAll(source.getRequirementList().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .map(JsonAdaptedRequirement::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Converts this course book into the model\u0027s {@code CourseBook} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook courseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (courseBook.hasModule(module)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            courseBook.addModule(module);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d courseBook.getModuleList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        for (JsonAdaptedRequirement jsonAdaptedRequirement : requirements) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            Requirement requirement \u003d jsonAdaptedRequirement.toModelType(moduleList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (courseBook.hasRequirement(requirement)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_REQUIREMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            courseBook.addRequirement(requirement);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 38,
      "-": 34,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/main/java/igrad/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return JsonUtil.readJsonFile(filePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "yjskrs": 5,
      "-": 37,
      "nathanaelseen": 4
    }
  },
  {
    "path": "src/main/java/igrad/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * API of the Storage component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public interface Storage extends CourseBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Path getCourseBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    Optional\u003cReadOnlyCourseBook\u003e readCourseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    void saveCourseBook(ReadOnlyCourseBook courseBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 30,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Manages storage of CourseBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private CourseBookStorage courseBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public StorageManager(CourseBookStorage courseBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.courseBookStorage \u003d courseBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CourseBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBookStorage.getCourseBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cReadOnlyCourseBook\u003e readCourseBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return readCourseBook(courseBookStorage.getCourseBookFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Optional\u003cReadOnlyCourseBook\u003e readCourseBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBookStorage.readCourseBook(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook(ReadOnlyCourseBook courseBook) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        saveCourseBook(courseBook, courseBookStorage.getCourseBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook(ReadOnlyCourseBook courseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBookStorage.saveCourseBook(courseBook, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 76
    }
  },
  {
    "path": "src/main/java/igrad/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Saves the given {@link UserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 5,
      "-": 29,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/ui/AvatarImage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * An UI component that displays the image of the {@code Avatar}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class AvatarImage extends Image {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AvatarImage.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private String imgPath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private String avatarName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private int rowIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private int colIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public AvatarImage(String imgPath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(imgPath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        logger.info(\"HERE HERE\" + imgPath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.imgPath \u003d imgPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public AvatarImage(String imgPath, String avatarName, int rowIndex, int colIndex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(imgPath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.imgPath \u003d imgPath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.avatarName \u003d avatarName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.rowIndex \u003d rowIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.colIndex \u003d colIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the row index of an image in a grid"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getRowIndex() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return rowIndex;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns the column index of an image in a grid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public int getColIndex() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return colIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public String getAvatarName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return this.avatarName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 35,
      "dargohzy": 7,
      "nathanaelseen": 10
    }
  },
  {
    "path": "src/main/java/igrad/ui/AvatarSelectionPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class AvatarSelectionPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static final String FXML \u003d \"AvatarSelectionPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String WELCOME_MESSAGE \u003d \"Welcome to iGrad.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AvatarSelectionPanel.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private GridPane avatarGridPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label avatarLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private List\u003cAvatarImage\u003e avatarImgList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public AvatarSelectionPanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        initAvatarImgList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        showMainLabel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        showAvatarImgList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Displays the welcome message, on top of the panel."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void showMainLabel() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        avatarLabel.setText(WELCOME_MESSAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // TODO: delete the line (below) when no need"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Font.getFamilies().forEach(System.out::println);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Initialises an internal list of {@code AvatarImage}, maintained by this class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void initAvatarImgList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        List\u003cAvatar\u003e avatarList \u003d Avatar.getAvatarList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (int i \u003d 0; i \u003c 2; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            for (int j \u003d 0; j \u003c 3; j++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                String avatarName \u003d avatarList.get(index).getName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                AvatarImage avatarImg \u003d new AvatarImage("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \"/avatars/\" + avatarName + \".png\", avatarName, i, j);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                avatarImgList.add(avatarImg);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Displays the Avatar images in a {@code GridPane}, in the panel."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void showAvatarImgList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        for (AvatarImage avatarImg : avatarImgList) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            StackPane pane \u003d new StackPane();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            Label avatarName \u003d new Label(avatarImg.getAvatarName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ImageView avatarDisplay \u003d new ImageView();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            // TODO: (Wayne/Daryl) try to find a way to set these preferences in the FXML files instead of here"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            avatarDisplay.setFitHeight(0.12 * primaryScreenBounds.getHeight());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            avatarDisplay.setFitWidth(0.12 * primaryScreenBounds.getHeight());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            avatarDisplay.setImage(avatarImg);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            avatarName.setStyle(\"-fx-font-family: \u0027Calibri Light\u0027; -fx-font-size: 30; -fx-text-fill: white\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            avatarName.setPadding(new Insets(200, 0, 0, 0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            StackPane.setAlignment(avatarName, Pos.BOTTOM_CENTER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            pane.getChildren().addAll(avatarDisplay, avatarName);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            GridPane.setRowIndex(pane, avatarImg.getRowIndex());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            GridPane.setColumnIndex(pane, avatarImg.getColIndex());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            avatarGridPane.getChildren().add(pane);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "waynewee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 68,
      "dargohzy": 19,
      "nathanaelseen": 13
    }
  },
  {
    "path": "src/main/java/igrad/ui/CapPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Panel containing the current, target CAP for the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class CapPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String FXML \u003d \"CapPanel.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private AnchorPane capPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Label currentCAP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Label goalCAP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Label targetCAP;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public CapPanel() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.capPanel \u003d new AnchorPane();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   /* public void showPanels() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setCap(double cap) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        currentCap.setText(\"cap\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setGoalCap(String cap) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setTargetCap(String cap) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 39,
      "nathanaelseen": 9
    }
  },
  {
    "path": "src/main/java/igrad/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.Logic;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (CommandException | ParseException | IOException | ServiceException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * @see Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ParseException,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            IOException,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            ServiceException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 5,
      "yjskrs": 6,
      "-": 68,
      "nathanaelseen": 4
    }
  },
  {
    "path": "src/main/java/igrad/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Controller for a help page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 2,
      "-": 97,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private StackPane avatarSelectionPanelPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private AvatarSelectionPanel avatarSelectionPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private StatusBar statusBar;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private McSidePanel mcSidePanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private CapPanel capPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private VBox moduleList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private HBox sidePanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private VBox capPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private StackPane statusBarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private StackPane modularCreditsPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label mcCount;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        *//*"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * is fixed in later version of SDK."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * the TextInputControl(s)."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Fills and displays the window of all the {@code Avatar} placeholders, when in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * {@code Avatar} selection state."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void displayAvatarSelectionPanel(Model model) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        avatarSelectionPanelPlaceholder \u003d new StackPane();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleList.getChildren().add(avatarSelectionPanelPlaceholder);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        logger.info(\"Avatar not found. Displaying avatar selection screen instead.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        avatarSelectionPanel \u003d new AvatarSelectionPanel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        avatarSelectionPanelPlaceholder.getChildren().add(avatarSelectionPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        resultDisplay \u003d new ResultDisplay(model.getAvatar());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        resultDisplay.setFeedbackToUser(\"Choose an animal guide by entering the NAME of the animal\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        displayCommandBox(model);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Fills up and displays/refreshes the window of all module placeholders, when in the module management state."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    void displayModulePanel(Model model) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleList.getChildren().remove(avatarSelectionPanelPlaceholder);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleListPanelPlaceholder \u003d new StackPane();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleList.getChildren().add(moduleListPanelPlaceholder);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        moduleListPanelPlaceholder.setPrefHeight(2000.0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        resultDisplay \u003d new ResultDisplay(model.getAvatar());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        displayStatusBar(model);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        displayCommandBox(model);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        displaySidePanels(model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Fills up and displays/refreshes the the placeholders of the side panels (Modular credits info, CAP info)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    void displaySidePanels(Model model) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        mcSidePanel \u003d new McSidePanel();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        sidePanelPlaceholder.getChildren().add(mcSidePanel.getRoot());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        capPanel \u003d new CapPanel();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        capPanelPlaceholder.getChildren().add(capPanel.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Fills up and displays the placeholder of the status bar."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    void displayStatusBar(Model model) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        statusBar \u003d new StatusBar();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        statusBarPlaceholder.getChildren().add(statusBar.getPane());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Refreshes the status bar (UI component) with information from the {@code Model}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void refreshStatusBar(Model model) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Extract the updated CourseInfo from our model."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo courseInfo \u003d model.getCourseInfo();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Refresh the status bar now, with the updated course name."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        statusBar.setCourseName(courseInfo.getName().toString());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Refreshes the result display (UI component) with information from {@code CommandResult}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void refreshResultDisplay(CommandResult commandResult) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Refreshes the result display (UI component) to reflect an error from error String."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    void refreshResultDisplayError(String errorMessage) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        resultDisplay.setFeedbackToUser(errorMessage);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Fills up and displays/refreshes the placeholder of the command box."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    void displayCommandBox(Model model) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(c -\u003e executeCommand(c, model));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModuleListPanel getModuleListPanel() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return moduleListPanel;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private CommandResult executeCommand(String commandText, Model model) throws CommandException,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ParseException,"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        IOException,"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        ServiceException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            CommandResult commandResult;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            boolean isSelectingAvatar \u003d model.isSampleAvatar();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            if (isSelectingAvatar) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                commandResult \u003d logic.executeAvatar(commandText);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // Now we\u0027ve already selected Avatar, time to display the Main module panel"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                displayModulePanel(model);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            refreshResultDisplay(commandResult);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            } else if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            } else if (commandResult.isCourseAdd()) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                // TODO (Nat): Further remodularise code here, breaking abstractions"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                if (!statusBar.isCourseNameSet()) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                    refreshStatusBar(model);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (CommandException | ParseException | IOException | ServiceException e) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            refreshResultDisplayError(e.getMessage());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 58,
      "dargohzy": 51,
      "yjskrs": 13,
      "-": 135,
      "nathanaelseen": 47
    }
  },
  {
    "path": "src/main/java/igrad/ui/McSidePanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.ProgressIndicator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Panel containing the current over total number of Modular Credits for modules cleared."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class McSidePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public static final String FXML \u003d \"McSidePanelIndicator.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Label mcCount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ProgressIndicator progressIndicator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private AnchorPane mcPanelPlaceholder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //private int mcCounter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private int totalMcs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * TODO: Replace with CAP information when link to UI is done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @FXML Label currentCAP;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Label goalCAP;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Label targetCAP;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     * Side panel displaying Modular Credits information."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public McSidePanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.totalMcs \u003d 160;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        setMcCounter(40);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setMcCounter(int count) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        if (count \u003c 100) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            mcCount.setText(\" \" + count + \"/\" + this.totalMcs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            mcCount.setText(count + \"/\" + this.totalMcs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        double progress \u003d (double) count / (double) totalMcs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        progressIndicator.setProgress(progress);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 38,
      "nathanaelseen": 17
    }
  },
  {
    "path": "src/main/java/igrad/ui/ModuleCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * An UI component that displays information about {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on CourseBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private final Module module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private int displayedIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label memo;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label semester;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Label credits;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    /*    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        private Label description;*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        /*       id.setText(displayedIndex + \". \");*/"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        title.setText(module.getTitle().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        moduleCode.setText(module.getModuleCode().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        credits.setText(module.getCredits().value + \" MCs\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (module.getMemo() !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            memo.setText(\"Memo: \" + module.getMemo().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        if (module.getSemester() !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            semester.setText(module.getSemester().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (module.getDescription() !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            description.setText(\"Description:\\t\\t\" + module.getDescription().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        module.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return this.displayedIndex \u003d\u003d card.displayedIndex"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 14,
      "dargohzy": 9,
      "yjskrs": 11,
      "-": 47,
      "nathanaelseen": 9
    }
  },
  {
    "path": "src/main/java/igrad/ui/ModuleListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 45,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/ui/RequirementCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Shows requirements, where each {@code requirement} is a list of {@code Module}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class RequirementCard {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 4,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/main/java/igrad/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private ImageView avatarDisplay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public ResultDisplay(Avatar avatar) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.setAvatar(avatar);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public void setAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String imgPath \u003d \"/avatars/\" + avatar.getName() + \".png\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        AvatarImage avatarImage \u003d new AvatarImage(imgPath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        avatarDisplay.setImage(avatarImage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 14,
      "yjskrs": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/igrad/ui/StatusBar.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A (permanent) top-panel that displays course status information."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "public class StatusBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private static final String FXML \u003d \"StatusBar.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private String courseName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private StackPane pane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    private Label course;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public StatusBar() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.courseName \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        pane \u003d new StackPane();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        course.setText(\"Course:\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        StackPane.setAlignment(course, Pos.CENTER_LEFT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        pane.getChildren().add(course);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public void setCourseName(String courseName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        this.courseName \u003d courseName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        course.setText(\"Course: \" + courseName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public boolean isCourseNameSet() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this.courseName.length() !\u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    public StackPane getPane() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        return this.pane;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 45,
      "nathanaelseen": 5
    }
  },
  {
    "path": "src/main/java/igrad/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/igrad/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * API of UI component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 3,
      "yjskrs": 1,
      "-": 10,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/java/igrad/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public UiManager(Logic logic, Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            if (model.isSampleAvatar()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "                mainWindow.displayAvatarSelectionPanel(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                mainWindow.displayModulePanel(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 26,
      "yjskrs": 5,
      "-": 58,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/main/java/igrad/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 16,
      "yjskrs": 2,
      "-": 75
    }
  },
  {
    "path": "src/main/resources/view/AvatarSelectionPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "waynewee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003cVBox minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   \u003cStackPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "          \u003cLabel fx:id\u003d\"avatarLabel\" alignment\u003d\"TOP_CENTER\" style\u003d\"-fx-font-size: 60;\" textFill\u003d\"WHITE\" StackPane.alignment\u003d\"TOP_CENTER\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003cFont name\u003d\"Calibri\" size\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cHBox alignment\u003d\"BOTTOM_CENTER\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003cRegion /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cGridPane fx:id\u003d\"avatarGridPane\" alignment\u003d\"CENTER\" hgap\u003d\"100.0\" stylesheets\u003d\"@DarkTheme.css\" vgap\u003d\"50.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003cRegion /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003cInsets top\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cInsets top\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 6,
      "dargohzy": 33
    }
  },
  {
    "path": "src/main/resources/view/CapPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"capPanel\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"270.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"mcSidePanel\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"8.0\" layoutY\u003d\"1.0\" prefHeight\u003d\"50.0\" style\u003d\"-fx-font-size: 40;\" text\u003d\"C.A.P\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cImageView fitHeight\u003d\"35.0\" fitWidth\u003d\"37.0\" layoutX\u003d\"100.0\" layoutY\u003d\"7.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cImage url\u003d\"@../images/cap.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel layoutX\u003d\"119.0\" layoutY\u003d\"139.0\" style\u003d\"-fx-font-size: 20;\" text\u003d\"Current\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" layoutX\u003d\"75.0\" layoutY\u003d\"51.0\" prefHeight\u003d\"99.0\" style\u003d\"-fx-font-size: 85;\" text\u003d\"4.24\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel layoutX\u003d\"164.0\" layoutY\u003d\"215.0\" style\u003d\"-fx-font-size: 20;\" text\u003d\"Target/Sem\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel layoutX\u003d\"59.0\" layoutY\u003d\"215.0\" style\u003d\"-fx-font-size: 20;\" text\u003d\"Goal\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel layoutX\u003d\"42.0\" layoutY\u003d\"170.0\" style\u003d\"-fx-font-size: 40;\" text\u003d\"4.00\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel layoutX\u003d\"175.0\" layoutY\u003d\"170.0\" style\u003d\"-fx-font-size: 40;\" text\u003d\"3.94\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 23
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cfont\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cFont name\u003d\"Calibri\" size\u003d\"16.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/font\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/TextField\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "dargohzy": 6,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "waynewee"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "\u003cfx:root minHeight\u003d\"800.0\" minWidth\u003d\"1220.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"iGrad\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cImage url\u003d\"@/images/iGrad_Shibu.png\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cVBox prefHeight\u003d\"800.0\" prefWidth\u003d\"1200.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusBarPlaceholder\" styleClass\u003d\"status-bar\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cHBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"1200.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cVBox fx:id\u003d\"moduleList\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"2000.0\" minWidth\u003d\"500.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c!--                                \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" alignment\u003d\"CENTER_RIGHT\"--\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c!--                                           maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"--\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c!--                                           VBox.vgrow\u003d\"ALWAYS\"/\u003e--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c!--                                \u003cStackPane fx:id\u003d\"avatarSelectionPanelPlaceholder\" alignment\u003d\"CENTER_RIGHT\"--\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c!--                                           maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\"--\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c!--                                           VBox.vgrow\u003d\"ALWAYS\"/\u003e--\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                     \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cRegion maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"1.0\" style\u003d\"-fx-border-color: #3d3d3d;\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "waynewee"
        },
        "content": "                        \u003c/Region\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cVBox maxWidth\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"350.0\" styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cRegion maxHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" style\u003d\"-fx-border-color: #3d3d3d;\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                                \u003cHBox fx:id\u003d\"sidePanelPlaceholder\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"270.0\" prefWidth\u003d\"300.0\" style\u003d\"-fx-background-color: #2a2a2a;\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003c/VBox.margin\u003e\u003c/HBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                                \u003cRegion maxHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" style\u003d\"-fx-border-color: #3d3d3d;\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cVBox fx:id\u003d\"capPanelPlaceholder\" maxHeight\u003d\"-Infinity\" prefHeight\u003d\"250.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                           \u003c/VBox.margin\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cRegion maxHeight\u003d\"-Infinity\" prefHeight\u003d\"1.0\" style\u003d\"-fx-border-color: #3d3d3d;\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "dargohzy": 48,
      "-": 34,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/resources/view/McSidePanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003cHBox fx:id\u003d\"mcPanelPlaceholder\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"370.0\" styleClass\u003d\"side-panel\" stylesheets\u003d\"@DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cImageView fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" scaleX\u003d\"0.7\" scaleY\u003d\"0.7\" scaleZ\u003d\"0.7\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cImage url\u003d\"@../images/module.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cInsets left\u003d\"-5.0\" top\u003d\"-7.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel style\u003d\"-fx-font-size: 40; -fx-font-family: Calibri Light;\" text\u003d\"MCs: 40/160\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cFont name\u003d\"Calibri Light\" size\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cInsets bottom\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 32
    }
  },
  {
    "path": "src/main/resources/view/McSidePanelIndicator.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.ProgressIndicator?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"mcPanelPlaceholder\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"280.0\" prefWidth\u003d\"320.0\" style\u003d\"-fx-background-color: #2a2a2a;\" styleClass\u003d\"mcSidePanel\" stylesheets\u003d\"DarkTheme.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cProgressIndicator fx:id\u003d\"progressIndicator\" layoutX\u003d\"142.0\" layoutY\u003d\"209.0\" prefHeight\u003d\"400.0\" prefWidth\u003d\"27.0\" progress\u003d\"0.52\" scaleX\u003d\"10.0\" scaleY\u003d\"10.0\" styleClass\u003d\"progress-indicator\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cCircle fill\u003d\"#1f93ff00\" layoutX\u003d\"160.0\" layoutY\u003d\"139.0\" radius\u003d\"88.0\" stroke\u003d\"#2a2a2a\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cCircle fill\u003d\"#2d2d2d\" layoutX\u003d\"160.0\" layoutY\u003d\"139.0\" radius\u003d\"85.0\" scaleX\u003d\"0.99\" scaleY\u003d\"0.99\" stroke\u003d\"#2a2a2a\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel fx:id\u003d\"mcCount\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"93.0\" layoutY\u003d\"112.0\" style\u003d\"-fx-font-size: 40;\" text\u003d\" 40/160\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cFont size\u003d\"41.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"-12.0\" layoutY\u003d\"-6.0\" prefHeight\u003d\"58.0\" prefWidth\u003d\"104.0\" style\u003d\"-fx-font-size: 40;\" text\u003d\"MCs\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cFont name\u003d\"Calibri Light\" size\u003d\"42.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cImageView fitHeight\u003d\"58.0\" fitWidth\u003d\"55.0\" layoutX\u003d\"79.0\" layoutY\u003d\"-4.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cImage url\u003d\"@../images/module.png\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 32
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" spacing\u003d\"3.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel fx:id\u003d\"moduleCode\" style\u003d\"-fx-font-size: 36; -fx-text-fill: #FF7A2F;\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "     \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cHBox spacing\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \u003cLabel fx:id\u003d\"semester\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$semester\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003cRegion minHeight\u003d\"-Infinity\" prefWidth\u003d\"1.0\" style\u003d\"-fx-border-color: #3d3d3d;\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cLabel fx:id\u003d\"credits\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$credits\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003cRegion prefWidth\u003d\"1.0\" style\u003d\"-fx-border-color: #3d3d3d;\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"Grade: A\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cLabel fx:id\u003d\"memo\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$memo\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "               \u003cInsets bottom\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 31,
      "-": 19,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cListView fx:id\u003d\"moduleListView\" stylesheets\u003d\"@DarkTheme.css\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "dargohzy": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" prefHeight\u003d\"140.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cHBox prefHeight\u003d\"140.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cImageView fx:id\u003d\"avatarDisplay\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" style\u003d\"-fx-scale-x: 0.8; -fx-scale-y: 0.8;\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                    \u003cFont name\u003d\"Calibri\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003c/TextArea\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "         \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "      \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 18,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/StatusBar.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dargohzy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"40.0\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "waynewee"
        },
        "content": "           prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.0\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "        \u003cLabel fx:id\u003d\"course\" style\u003d\"-fx-background-color: transparent;\" text\u003d\"Course\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003cLabel fx:id\u003d\"capMcDisplay\" alignment\u003d\"CENTER_RIGHT\" style\u003d\"-fx-background-color: transparent;\" text\u003d\"CAP\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "               textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "            \u003cStackPane.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            \u003c/StackPane.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 8,
      "dargohzy": 13
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "waynewee"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "waynewee": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/igrad/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/igrad/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/igrad/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/igrad/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/igrad/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/igrad/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.CREDITS_DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.MEMO_DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.MODULE_CODE_DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.SEMESTER_DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.TITLE_DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleAddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.JsonCourseBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        JsonCourseBookStorage courseBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new JsonCourseBookStorage(temporaryFolder.resolve(\"courseBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        StorageManager storage \u003d new StorageManager(courseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Setup LogicManager with JsonCourseBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        JsonCourseBookStorage courseBookStorage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new JsonCourseBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCourseBook.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        StorageManager storage \u003d new StorageManager(courseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String addCommand \u003d ModuleAddCommand.COMMAND_WORD + TITLE_DESC_PROGRAMMING_METHODOLOGY"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + MODULE_CODE_DESC_PROGRAMMING_METHODOLOGY"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + CREDITS_DESC_PROGRAMMING_METHODOLOGY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + MEMO_DESC_PROGRAMMING_METHODOLOGY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + SEMESTER_DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(TypicalModules.PROGRAMMING_METHODOLOGY).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    private void assertCommandSuccess("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String inputCommand,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        String expectedMessage,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        Model expectedModel"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    ) throws CommandException, ParseException, IOException, ServiceException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "waynewee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static class JsonCourseBookIoExceptionThrowingStub extends JsonCourseBookStorage {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        private JsonCourseBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void saveCourseBook(ReadOnlyCourseBook courseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 10,
      "yjskrs": 30,
      "-": 114,
      "nathanaelseen": 14
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ModuleAddCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model \u003d new ModelManager(TypicalModules.getTypicalCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertCommandSuccess(new ModuleAddCommand(validModule), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            String.format(ModuleAddCommand.MESSAGE_SUCCESS, validModule), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module moduleInList \u003d model.getCourseBook().getModuleList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CommandTestUtil.assertCommandFailure(new ModuleAddCommand(moduleInList), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ModuleAddCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 38,
      "nathanaelseen": 7
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.avatar.Avatar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleAddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CommandResult commandResult \u003d new ModuleAddCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(String.format(ModuleAddCommand.MESSAGE_SUCCESS, validModule), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.personsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleAddCommand moduleAddCommand \u003d new ModuleAddCommand(validModule);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(CommandException.class, ModuleAddCommand.MESSAGE_DUPLICATE_MODULE, ("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ) -\u003e moduleAddCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module programmingMethodology \u003d new ModuleBuilder().withTitle(\"Programming Methodology\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module computerOrganisation \u003d new ModuleBuilder().withTitle(\"Computer Organisation\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleAddCommand addProgrammingMethodologyCommand \u003d new ModuleAddCommand(programmingMethodology);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleAddCommand addComputerOrganisationCommand \u003d new ModuleAddCommand(computerOrganisation);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(addProgrammingMethodologyCommand.equals(addComputerOrganisationCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleAddCommand addProgrammingMethodologyCommandCopy \u003d new ModuleAddCommand(programmingMethodology);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(addProgrammingMethodologyCommand.equals(addProgrammingMethodologyCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(addProgrammingMethodologyCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(addProgrammingMethodologyCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(addProgrammingMethodologyCommand.equals(addComputerOrganisationCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public Path getCourseBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setCourseBookFilePath(Path courseBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void resetCourseBook(ReadOnlyCourseBook courseBook) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public Avatar getAvatar() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void setAvatar(Avatar avatar) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public boolean isSampleAvatar() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ReadOnlyCourseBook getCourseBook() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void setCourseBook(ReadOnlyCourseBook newData) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void addCourseInfo(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public CourseInfo getCourseInfo() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void modifyCourseInfo(CourseInfo courseInfo) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public boolean hasRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void addRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void setRequirements(Requirement target, Requirement editedRequirement) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void deleteRequirement(Requirement requirement) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public void updateRequirementList(Predicate\u003cRequirement\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        final ArrayList\u003cModule\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return personsAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            personsAdded.add(module);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ReadOnlyCourseBook getCourseBook() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return new CourseBook();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 40,
      "-": 125,
      "nathanaelseen": 97
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 48,
      "nathanaelseen": 5
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MEMO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_NAME_B_COMP_SCI \u003d \"Bachelor of Computing (Honours) in Computer Science\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_NAME_B_ARTS_PHILO \u003d \"Bachelor of Arts (Honours) in Philosophy\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_TITLE_PROGRAMMING_METHODOLOGY \u003d \"Programming Methodology\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_TITLE_COMPUTER_ORGANISATION \u003d \"Computer Organisation\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_CODE_PROGRAMMING_METHODOLOGY \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_CODE_COMPUTER_ORGANISATION \u003d \"CS2100\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_CREDITS_PROGRAMMING_METHODOLOGY \u003d \"4\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_CREDITS_COMPUTER_ORGANISATION \u003d \"4\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MEMO_PROGRAMMING_METHODOLOGY \u003d \"v easy module leh\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MEMO_COMPUTER_ORGANISATION \u003d \"a lot of calculation ah\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_SEMESTER_PROGRAMMING_METHODOLOGY \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_SEMESTER_COMPUTER_ORGANISATION \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_TAG_EASY \u003d \"easy\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_TAG_HARD \u003d \"hard\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String TITLE_DESC_PROGRAMMING_METHODOLOGY \u003d \" \" + PREFIX_TITLE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + VALID_TITLE_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String TITLE_DESC_COMPUTER_ORGANISATION \u003d \" \" + PREFIX_TITLE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + VALID_TITLE_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_CODE_DESC_PROGRAMMING_METHODOLOGY \u003d \" \" + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + VALID_MODULE_CODE_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MODULE_CODE_DESC_COMPUTER_ORGANISATION \u003d \" \" + PREFIX_MODULE_CODE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + VALID_MODULE_CODE_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String CREDITS_DESC_PROGRAMMING_METHODOLOGY \u003d \" \" + PREFIX_CREDITS"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + VALID_CREDITS_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String CREDITS_DESC_COMPUTER_ORGANISATION \u003d \" \" + PREFIX_CREDITS"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + VALID_CREDITS_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MEMO_DESC_PROGRAMMING_METHODOLOGY \u003d \" \" + PREFIX_MEMO"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + VALID_MEMO_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String MEMO_DESC_COMPUTER_ORGANISATION \u003d \" \" + PREFIX_MEMO"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + VALID_MEMO_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String SEMESTER_DESC_PROGRAMMING_METHODOLOGY \u003d \" \" + PREFIX_SEMESTER"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + VALID_SEMESTER_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String SEMESTER_DESC_COMPUTER_ORGANISATION \u003d \" \" + PREFIX_SEMESTER"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        + VALID_SEMESTER_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String TAG_DESC_EASY \u003d \" \" + PREFIX_TAG + VALID_TAG_EASY;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String TAG_DESC_HARD \u003d \" \" + PREFIX_TAG + VALID_TAG_HARD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // \u0027!\u0027 not allowed in module codes"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_TITLE_DESC \u003d \" \" + PREFIX_TITLE + \"Programming Methodology!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in module codes"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_CODE_DESC \u003d \" \" + PREFIX_MODULE_CODE + \"CS2040S\u0026\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in credits"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_CREDITS_DESC \u003d \" \" + PREFIX_CREDITS + \"4%\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // \u0027\u0026\u0027 not allowed in semester"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_SEMESTER_DESC \u003d \" \" + PREFIX_SEMESTER + \"4%\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"easy*\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final ModuleEditCommand.EditModuleDescriptor DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final ModuleEditCommand.EditModuleDescriptor DESC_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        DESC_PROGRAMMING_METHODOLOGY \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTitle(VALID_TITLE_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(VALID_CREDITS_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withMemo(VALID_MEMO_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemester(VALID_SEMESTER_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTags(VALID_TAG_EASY).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        DESC_COMPUTER_ORGANISATION \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTitle(VALID_TITLE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(VALID_CREDITS_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withMemo(VALID_MEMO_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemester(VALID_SEMESTER_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTags(VALID_TAG_HARD).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * - the course book, filtered module list and selected module in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook expectedCourseBook \u003d new CourseBook(actualModel.getCourseBook());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(expectedCourseBook, actualModel.getCourseBook());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the module at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * {@code model}\u0027s course book."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static void showModuleAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final String[] splitName \u003d module.getTitle().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        model.updateFilteredModuleList(new TitleContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(1, model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 17,
      "-": 64,
      "nathanaelseen": 93
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalModules.getTypicalCourseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * {@code ModuleDeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDeleteCommand deleteCommand \u003d new ModuleDeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(ModuleDeleteCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDeleteCommand deleteCommand \u003d new ModuleDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDeleteCommand deleteCommand \u003d new ModuleDeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(ModuleDeleteCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of course book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCourseBook().getModuleList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDeleteCommand deleteCommand \u003d new ModuleDeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDeleteCommand deleteFirstCommand \u003d new ModuleDeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDeleteCommand deleteSecondCommand \u003d new ModuleDeleteCommand(INDEX_SECOND_MODULE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDeleteCommand deleteFirstCommandCopy \u003d new ModuleDeleteCommand(INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        model.updateFilteredModuleList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(model.getFilteredModuleList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 23,
      "-": 66,
      "nathanaelseen": 20
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.DESC_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_CREDITS_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MEMO_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_SEMESTER_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.showModuleAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalIndexes.INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalModules.getTypicalCourseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleEditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * for ModuleEditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCourseBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand.EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(editedModule).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(INDEX_FIRST_MODULE, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(ModuleEditCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CourseBook(model.getCourseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.setModule(model.getFilteredModuleList().get(0), editedModule);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module lastModule \u003d model.getFilteredModuleList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModuleBuilder personInList \u003d new ModuleBuilder(lastModule);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module editedModule \u003d personInList.withTitle(VALID_TITLE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(VALID_CREDITS_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withMemo(VALID_MEMO_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemester(VALID_SEMESTER_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTags(VALID_TAG_HARD)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withCredits(VALID_CREDITS_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withMemo(VALID_MEMO_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withSemester(VALID_SEMESTER_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTags(VALID_TAG_HARD)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(ModuleEditCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CourseBook(model.getCourseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.setModule(lastModule, editedModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(INDEX_FIRST_MODULE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            new ModuleEditCommand.EditModuleDescriptor());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module editedModule \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(ModuleEditCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CourseBook(model.getCourseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module moduleInFilteredList \u003d model.getFilteredModuleList()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder(moduleInFilteredList).withTitle(VALID_TITLE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(INDEX_FIRST_MODULE,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            new EditModuleDescriptorBuilder().withTitle(VALID_TITLE_COMPUTER_ORGANISATION).build());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String expectedMessage \u003d String.format(ModuleEditCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CourseBook(model.getCourseBook()), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        expectedModel.setModule(model.getFilteredModuleList().get(0), editedModule);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module firstModule \u003d model.getFilteredModuleList().get(INDEX_FIRST_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(firstModule).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(INDEX_SECOND_MODULE, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertCommandFailure(editCommand, model, ModuleEditCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // edit module in filtered list into a duplicate in course book"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module moduleInList \u003d model.getCourseBook().getModuleList()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .get(INDEX_SECOND_MODULE.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(INDEX_FIRST_MODULE,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new EditModuleDescriptorBuilder(moduleInList).build());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertCommandFailure(editCommand, model, ModuleEditCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredModuleList().size() + 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTitle(VALID_TITLE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * but smaller than size of course book"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MODULE;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of course book list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCourseBook().getModuleList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand editCommand \u003d new ModuleEditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            new EditModuleDescriptorBuilder().withTitle(VALID_TITLE_COMPUTER_ORGANISATION).build());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_MODULE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        final ModuleEditCommand standardCommand \u003d new ModuleEditCommand(INDEX_FIRST_MODULE,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            DESC_PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        EditModuleDescriptor copyDescriptor \u003d new EditModuleDescriptor(DESC_PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand commandWithSameValues \u003d new ModuleEditCommand(INDEX_FIRST_MODULE, copyDescriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(standardCommand.equals(new ModuleEditCommand(INDEX_SECOND_MODULE, DESC_PROGRAMMING_METHODOLOGY)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(standardCommand.equals(new ModuleEditCommand(INDEX_FIRST_MODULE, DESC_COMPUTER_ORGANISATION)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 127,
      "nathanaelseen": 65
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/EditModuleDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.DESC_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.DESC_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class EditModuleDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand.EditModuleDescriptor descriptorWithSameValues \u003d new ModuleEditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .EditModuleDescriptor(DESC_PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(DESC_PROGRAMMING_METHODOLOGY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(DESC_PROGRAMMING_METHODOLOGY.equals(DESC_PROGRAMMING_METHODOLOGY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(DESC_COMPUTER_ORGANISATION));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different title -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand.EditModuleDescriptor editedProgrammingMethodology \u003d new EditModuleDescriptorBuilder("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            DESC_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTitle(VALID_TITLE_COMPUTER_ORGANISATION).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(editedProgrammingMethodology));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedProgrammingMethodology \u003d new EditModuleDescriptorBuilder(DESC_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withModuleCode(VALID_MODULE_CODE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(editedProgrammingMethodology));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        editedProgrammingMethodology \u003d new EditModuleDescriptorBuilder(DESC_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTags(VALID_TAG_HARD)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(DESC_PROGRAMMING_METHODOLOGY.equals(editedProgrammingMethodology));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 30,
      "nathanaelseen": 24
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 5,
      "-": 14,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/test/java/igrad/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 5,
      "-": 14,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.services.exceptions.ServiceException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (ServiceException | IOException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        } catch (ServiceException | IOException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 4,
      "yjskrs": 3,
      "-": 35,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/CourseBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleDeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleEditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleEditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CourseBookParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final CourseBookParser parser \u003d new CourseBookParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleAddCommand command \u003d (ModuleAddCommand) parser.parseCommand(ModuleUtil.getAddCommand(module));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(new ModuleAddCommand(module), command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleDeleteCommand command \u003d (ModuleDeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ModuleDeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MODULE.getOneBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(new ModuleDeleteCommand(INDEX_FIRST_MODULE), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(module).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        ModuleEditCommand command \u003d (ModuleEditCommand) parser.parseCommand(ModuleEditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            + INDEX_FIRST_MODULE.getOneBased() + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            + ModuleUtil.getEditModuleDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(new ModuleEditCommand(INDEX_FIRST_MODULE, descriptor), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 22,
      "-": 38,
      "nathanaelseen": 15
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/ModuleAddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalModules.COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleAddCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ModuleAddCommandParser parser \u003d new ModuleAddCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module expectedModule \u003d new ModuleBuilder(COMPUTER_ORGANISATION).withTags(VALID_TAG_HARD)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *       + TAG_DESC_FRIEND, new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *       + TAG_DESC_FRIEND, new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *       + TAG_DESC_FRIEND, new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        /*assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         *       + TAG_DESC_FRIEND, new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Module expectedModuleMultipleTags \u003d new ModuleBuilder(TypicalPersons.BOB)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new ModuleAddCommand(expectedModuleMultipleTags));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Module expectedModule \u003d new ModuleBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        new ModuleAddCommand(expectedModule));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleAddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB, expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //+ TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //+ TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 52,
      "nathanaelseen": 43
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/ModuleDeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalIndexes.INDEX_FIRST_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleDeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * outside of the ModuleDeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * same path through the ModuleDeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleDeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ModuleDeleteCommandParser parser \u003d new ModuleDeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \"1\", new ModuleDeleteCommand(INDEX_FIRST_MODULE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 20,
      "nathanaelseen": 12
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/ModuleEditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleEditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleEditCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleEditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ModuleEditCommandParser parser \u003d new ModuleEditCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, CommandTestUtil.VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, \"1\", ModuleEditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, \"-5\" + CommandTestUtil.NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, \"0\" + CommandTestUtil.NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_PHONE_DESC + CommandTestUtil.EMAIL_DESC_AMY,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        \"1\" + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Module} being edited,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        \"1\" + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.TAG_DESC_HUSBAND + TAG_EMPTY,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        \"1\" + CommandTestUtil.TAG_DESC_FRIEND + TAG_EMPTY + CommandTestUtil.TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        \"1\" + TAG_EMPTY + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.TAG_DESC_HUSBAND,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseFailure(parser,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        \"1\" + CommandTestUtil.INVALID_NAME_DESC + CommandTestUtil.INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //                + CommandTestUtil.VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_BOB +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // CommandTestUtil.TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        + CommandTestUtil.EMAIL_DESC_AMY + CommandTestUtil.NAME_DESC_AMY + CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withName(CommandTestUtil.VALID_NAME_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withPhone(CommandTestUtil.VALID_PHONE_BOB).withEmail(CommandTestUtil.VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withTags(CommandTestUtil.VALID_TAG_HUSBAND, CommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleEditCommand expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_BOB +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withEmail(CommandTestUtil.VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleEditCommand expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleEditCommand.EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withName(CommandTestUtil.VALID_NAME_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleEditCommand expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //descriptor \u003d new EditModuleDescriptorBuilder().withPhone(CommandTestUtil.VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //userInput \u003d targetIndex.getOneBased() + CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //descriptor \u003d new EditModuleDescriptorBuilder().withEmail(CommandTestUtil.VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //userInput \u003d targetIndex.getOneBased() + CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //descriptor \u003d new EditModuleDescriptorBuilder().withTags(CommandTestUtil.VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.PHONE_DESC_AMY + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.PHONE_DESC_AMY + CommandTestUtil.EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        + CommandTestUtil.TAG_DESC_FRIEND + CommandTestUtil.PHONE_DESC_BOB + CommandTestUtil.EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        + CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withEmail(CommandTestUtil.VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withTags(CommandTestUtil.VALID_TAG_FRIEND, CommandTestUtil.VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleEditCommand expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + CommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        + CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleEditCommand expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //userInput \u003d targetIndex.getOneBased() + CommandTestUtil.EMAIL_DESC_BOB + CommandTestUtil.INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        + CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withPhone(CommandTestUtil.VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withEmail(CommandTestUtil.VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleEditCommand.EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleEditCommand expectedCommand \u003d new ModuleEditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 87,
      "nathanaelseen": 108
    }
  },
  {
    "path": "src/test/java/igrad/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(TypicalIndexes.INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(TypicalIndexes.INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Title expectedTitle \u003d new Title(VALID_NAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedTitle, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Title expectedTitle \u003d new Title(VALID_NAME);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedTitle, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleCode expectedModuleCode \u003d new ModuleCode(VALID_PHONE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedModuleCode, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //ModuleCode expectedModuleCode \u003d new ModuleCode(VALID_PHONE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedModuleCode, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Memo expectedMemo \u003d new Memo(VALID_ADDRESS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedMemo, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Memo expectedMemo \u003d new Memo(VALID_ADDRESS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedMemo, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Credits expectedCredits \u003d new Credits(VALID_EMAIL);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedCredits, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Credits expectedCredits \u003d new Credits(VALID_EMAIL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedCredits, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Tags expectedTags \u003d new Tags(VALID_TAG_1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedTags, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Tags expectedTags \u003d new Tags(VALID_TAG_1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedTags, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Set\u003cTags\u003e actualTagsSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Set\u003cTags\u003e expectedTagsSet \u003d new HashSet\u003cTags\u003e(Arrays.asList(new Tags(VALID_TAG_1), new Tags(VALID_TAG_2)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals( expectedTagsSet, actualTagsSet );"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 4,
      "-": 118,
      "nathanaelseen": 59
    }
  },
  {
    "path": "src/test/java/igrad/model/CourseBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.requirement.Requirement;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CourseBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final CourseBook courseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(Collections.emptyList(), courseBook.getModuleList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e courseBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void resetData_withValidReadOnlyCourseBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseBook newData \u003d TypicalModules.getTypicalCourseBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(newData, courseBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Two modules with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module editedProgrammingMethodology \u003d new ModuleBuilder(TypicalModules.PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(TypicalModules.PROGRAMMING_METHODOLOGY, editedProgrammingMethodology);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBookStub newData \u003d new CourseBookStub(newModules);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e courseBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e courseBook.hasModule(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void hasModule_moduleNotInCourseBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(courseBook.hasModule(TypicalModules.PROGRAMMING_METHODOLOGY));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void hasModule_moduleInCourseBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseBook.addModule(TypicalModules.PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(courseBook.hasModule(TypicalModules.PROGRAMMING_METHODOLOGY));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInCourseBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        courseBook.addModule(TypicalModules.PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(TypicalModules.PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withTags(CommandTestUtil.VALID_TAG_HARD)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertTrue(courseBook.hasModule(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e courseBook.getModuleList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * A stub ReadOnlyCourseBook whose modules list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static class CourseBookStub implements ReadOnlyCourseBook {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBookStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // We\u0027re not testing requirement as its similar to modules"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        public ObservableList\u003cRequirement\u003e getRequirementList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 86,
      "nathanaelseen": 23
    }
  },
  {
    "path": "src/test/java/igrad/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.TitleContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.CourseBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(new CourseBook(), new CourseBook(modelManager.getCourseBook()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        userPrefs.setCourseBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        userPrefs.setCourseBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setCourseBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCourseBookFilePath(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setCourseBookFilePath_validPath_setsCourseBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelManager.setCourseBookFilePath(path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(path, modelManager.getCourseBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void hasPerson_personNotInCourseBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(modelManager.hasModule(TypicalModules.PROGRAMMING_METHODOLOGY));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void hasPerson_personInCourseBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        modelManager.addModule(TypicalModules.PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(modelManager.hasModule(TypicalModules.PROGRAMMING_METHODOLOGY));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook courseBook \u003d new CourseBookBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withPerson(TypicalModules.PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withPerson(TypicalModules.COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook differentCourseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelManager \u003d new ModelManager(courseBook, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(courseBook, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different courseBook -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentCourseBook, userPrefs)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String[] keywords \u003d TypicalModules.PROGRAMMING_METHODOLOGY.getTitle().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        modelManager.updateFilteredModuleList(new TitleContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(courseBook, userPrefs)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        modelManager.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        differentUserPrefs.setCourseBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(courseBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 28,
      "-": 97,
      "nathanaelseen": 9
    }
  },
  {
    "path": "src/test/java/igrad/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setCourseBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCourseBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/igrad/model/course/CourseInfoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_NAME_B_ARTS_PHILO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.CourseInfoBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalCourseInfos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseInfoTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo bSciMathCopy \u003d new CourseInfoBuilder(TypicalCourseInfos.B_SCI_MATH).build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(TypicalCourseInfos.B_SCI_MATH.equals(bSciMathCopy));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(TypicalCourseInfos.B_SCI_MATH.equals(TypicalCourseInfos.B_SCI_MATH));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(TypicalCourseInfos.B_SCI_MATH.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(TypicalCourseInfos.B_COMP_SCI.equals(TypicalModules.COMPUTER_ORGANISATION));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // different object -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(TypicalCourseInfos.B_COMP_SCI.equals(TypicalCourseInfos.B_SCI_MATH));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseInfo editedCourseInfo \u003d new CourseInfoBuilder(TypicalCourseInfos.B_COMP_SCI)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .withName(VALID_NAME_B_ARTS_PHILO).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(TypicalCourseInfos.B_COMP_SCI.equals(editedCourseInfo));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "teriaiw": 4,
      "nathanaelseen": 34
    }
  },
  {
    "path": "src/test/java/igrad/model/course/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.course;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(Name.isValidName(\"Bachelor of Computer Science\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/test/java/igrad/model/module/CreditsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CreditsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Credits(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_invalidCredits_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String invalidCredits \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Semester(invalidCredits));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidCredits() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // null credits"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Credits.isValidCredits(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // invalid credits"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid credits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Credits.isValidCredits(\"abc\")); // malformed int"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // valid credits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(Credits.isValidCredits(\"4\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 29,
      "nathanaelseen": 7
    }
  },
  {
    "path": "src/test/java/igrad/model/module/DescriptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "// Do not touch this, i need to fix something here"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 14
    }
  },
  {
    "path": "src/test/java/igrad/model/module/MemoTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "// Do not touch this, i need to fix something here"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class MemoTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 5
    }
  },
  {
    "path": "src/test/java/igrad/model/module/ModuleCodeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Semester(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // null ModuleCode"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // invalid ModuleCode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid ModuleCode (only 4 digits, no 2 letters in front)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"1234\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // valid ModuleCode (2 letters in front, followed by 4 digits, but no (optional) letter behind)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS1231\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // valid ModuleCode"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 31,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/test/java/igrad/model/module/ModuleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e module.getTags().remove(0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertTrue(TypicalPersons.ALICE.isSameModule(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(TypicalPersons.ALICE.isSameModule(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Module editedAlice \u003d new ModuleBuilder(TypicalPersons.ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(TypicalPersons.ALICE.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //editedAlice \u003d new ModuleBuilder(TypicalPersons.ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(TypicalPersons.ALICE.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //editedAlice \u003d new ModuleBuilder(TypicalPersons.ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertTrue(TypicalPersons.ALICE.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //editedAlice \u003d new ModuleBuilder(TypicalPersons.ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertTrue(TypicalPersons.ALICE.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //editedAlice \u003d new ModuleBuilder(TypicalPersons.ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertTrue(TypicalPersons.ALICE.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Module aliceCopy \u003d new ModuleBuilder(TypicalPersons.ALICE).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertTrue(TypicalPersons.ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertTrue(TypicalPersons.ALICE.equals(TypicalPersons.ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(TypicalPersons.ALICE.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(TypicalPersons.ALICE.equals(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(TypicalPersons.ALICE.equals(TypicalPersons.BOB));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Module editedAlice \u003d new ModuleBuilder(TypicalPersons.ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //editedAlice \u003d new ModuleBuilder(TypicalPersons.ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //editedAlice \u003d new ModuleBuilder(TypicalPersons.ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //editedAlice \u003d new ModuleBuilder(TypicalPersons.ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(TypicalPersons.ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 53,
      "nathanaelseen": 30
    }
  },
  {
    "path": "src/test/java/igrad/model/module/SemesterTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class SemesterTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_invalidSemester_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String invalidSemester \u003d \"Y1S3\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Semester(invalidSemester));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidSemester() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid semester (only digits)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"11\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // invalid semester (Sem 3 is not a valid sem)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"Y1S3\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // valid semester"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(Semester.isValidSemester(\"Y1S1\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 20,
      "nathanaelseen": 8
    }
  },
  {
    "path": "src/test/java/igrad/model/module/TitleContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "public class TitleContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicate \u003d new TitleContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        TitleContainsKeywordsPredicate secondPredicate \u003d new TitleContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        TitleContainsKeywordsPredicate firstPredicateCopy \u003d new TitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "waynewee"
        },
        "content": "            firstPredicateKeywordList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withTitle(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertTrue(predicate.test(new ModuleBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        TitleContainsKeywordsPredicate predicate \u003d new TitleContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withTitle(\"Alice\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertFalse(predicate.test(new ModuleBuilder().withTitle(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "waynewee"
        },
        "content": "        predicate \u003d new TitleContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(predicate.test(new ModuleBuilder().withTitle(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 12,
      "-": 53,
      "nathanaelseen": 13
    }
  },
  {
    "path": "src/test/java/igrad/model/module/TitleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // null Title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // invalid Title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teriaiw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        // valid Title"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Software Engineering\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 27,
      "nathanaelseen": 6
    }
  },
  {
    "path": "src/test/java/igrad/model/module/UniqueModuleListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.contains(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertFalse(uniqueModuleList.contains(ALICE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertTrue(uniqueModuleList.contains(ALICE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Module editedAlice \u003d new ModuleBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertTrue(uniqueModuleList.contains(editedAlice));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.add(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.add(ALICE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(null, ALICE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModule(ALICE, null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.setModule(ALICE, ALICE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.setModule(ALICE, ALICE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //expectedUniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Module editedAlice \u003d new ModuleBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //       .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.setModule(ALICE, editedAlice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //expectedUniqueModuleList.add(editedAlice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.setModule(ALICE, BOB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //expectedUniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(DuplicateModuleException.class, () -\u003e uniqueModuleList.setModule(ALICE, BOB));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.remove(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(ModuleNotFoundException.class, () -\u003e uniqueModuleList.remove(ALICE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.remove(ALICE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((UniqueModuleList) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //expectedUniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(NullPointerException.class, () -\u003e uniqueModuleList.setModules((List\u003cModule\u003e) null));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.add(ALICE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //List\u003cModule\u003e moduleList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //expectedUniqueModuleList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(DuplicateModuleException.class, ()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //    -\u003e uniqueModuleList.setModules(listWithDuplicateModules));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //    -\u003e uniqueModuleList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 96,
      "nathanaelseen": 58
    }
  },
  {
    "path": "src/test/java/igrad/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/igrad/storage/JsonAdaptedModuleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.testutil.TypicalModules.PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_TITLE \u003d \"Programming Methodology!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_MODULE_CODE \u003d \"CS2040S\u0026\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_CREDITS \u003d \"4%\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_SEMESTER \u003d \"4%\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String INVALID_TAG \u003d \" \" + PREFIX_TAG + \"easy*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_TITLE \u003d PROGRAMMING_METHODOLOGY.getTitle().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MODULE_CODE \u003d PROGRAMMING_METHODOLOGY.getModuleCode().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_CREDITS \u003d PROGRAMMING_METHODOLOGY.getCredits().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String VALID_MEMO \u003d PROGRAMMING_METHODOLOGY.getMemo().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    //public static final String VALID_SEMESTER \u003d PROGRAMMING_METHODOLOGY.getSemester().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d PROGRAMMING_METHODOLOGY.getTags().stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // TODO: add more tests later"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertEquals(PROGRAMMING_METHODOLOGY, module.toModelType());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public void toModelType_invalidTitle_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //JsonAdaptedModule person \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //        new JsonAdaptedModule(INVALID_TITLE, VALID_MODULE_CODE, VALID_CREDITS, VALID_MEMO, VALID_SEMESTER,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //                VALID_TAGS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //String expectedMessage \u003d Title.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 4,
      "-": 15,
      "nathanaelseen": 25
    }
  },
  {
    "path": "src/test/java/igrad/storage/JsonCourseBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class JsonCourseBookStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonCourseBookStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void readCourseBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCourseBook(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCourseBook\u003e readCourseBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return new JsonCourseBookStorage(Paths.get(filePath)).readCourseBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertFalse(readCourseBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCourseBook(\"notJsonFormatCourseBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void readCourseBook_invalidCourseBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCourseBook(\"invalidModuleCourseBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void readCourseBook_invalidAndValidPersonCourseBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCourseBook(\"invalidAndValidModuleCourseBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void readAndSaveCourseBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCourseBook.json\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseBook original \u003d TypicalModules.getTypicalCourseBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        JsonCourseBookStorage jsonCourseBookStorage \u003d new JsonCourseBookStorage(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        jsonCourseBookStorage.saveCourseBook(original, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ReadOnlyCourseBook readBack \u003d jsonCourseBookStorage.readCourseBook(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(original, new CourseBook(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        // Modify data, overwrite existing file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //original.addModule(TypicalModules.PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //original.removeModule(TypicalModules.COMPUTER_ORGANISATION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //jsonCourseBookStorage.saveCourseBook(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //readBack \u003d jsonCourseBookStorage.readCourseBook(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(original, new CourseBook(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //original.addModule(TypicalModules.PROGRAMMING_METHODOLOGY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //jsonCourseBookStorage.saveCourseBook(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //readBack \u003d jsonCourseBookStorage.readCourseBook().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        //assertEquals(original, new CourseBook(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook_nullCourseBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCourseBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Saves {@code courseBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private void saveCourseBook(ReadOnlyCourseBook courseBook, String filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            new JsonCourseBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "                .saveCourseBook(courseBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void saveCourseBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCourseBook(new CourseBook(), null));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 93,
      "nathanaelseen": 14
    }
  },
  {
    "path": "src/test/java/igrad/storage/JsonSerializableCourseBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class JsonSerializableCourseBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableModuleBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Path TYPICAL_MODULES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModulesCourseBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleCourseBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private static final Path DUPLICATE_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateModuleCourseBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        JsonSerializableCourseBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MODULES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            JsonSerializableCourseBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        CourseBook courseBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseBook typicalPersonsCourseBook \u003d TypicalModules.getTypicalCourseBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(courseBookFromFile, typicalPersonsCourseBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        JsonSerializableCourseBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            JsonSerializableCourseBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        JsonSerializableCourseBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "            JsonSerializableCourseBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCourseBook.MESSAGE_DUPLICATE_MODULE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 13,
      "-": 24,
      "nathanaelseen": 10
    }
  },
  {
    "path": "src/test/java/igrad/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        userPrefs.setCourseBookFilePath(Paths.get(\"coursebook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/igrad/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.ReadOnlyCourseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.testutil.TypicalModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        JsonCourseBookStorage courseBookStorage \u003d new JsonCourseBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        storageManager \u003d new StorageManager(courseBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void courseBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * {@link JsonCourseBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCourseBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseBook original \u003d TypicalModules.getTypicalCourseBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        storageManager.saveCourseBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        ReadOnlyCourseBook retrieved \u003d storageManager.readCourseBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertEquals(original, new CourseBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public void getCourseBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        assertNotNull(storageManager.getCourseBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 15,
      "-": 51,
      "nathanaelseen": 2
    }
  },
  {
    "path": "src/test/java/igrad/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/igrad/testutil/CourseBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A utility class to help with building CourseBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * {@code CourseBook ab \u003d new CourseBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class CourseBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    private CourseBook courseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook \u003d new CourseBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBookBuilder(CourseBook courseBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        this.courseBook \u003d courseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Adds a new {@code Module} to the {@code CourseBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBookBuilder withPerson(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        courseBook.addModule(module);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public CourseBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return courseBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 34
    }
  },
  {
    "path": "src/test/java/igrad/testutil/CourseInfoBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A utility class to help with building CourseInfo objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class CourseInfoBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Bachelor of Computing in Computer Science\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Initializes the CourseInfoBuilder with the data of {@code courseInfoToCopy}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder(CourseInfo courseInfoToCopy) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        name \u003d courseInfoToCopy.getName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Name} of the {@code CourseInfo} that we are building."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfoBuilder withName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public CourseInfo build() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new CourseInfo(name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 37
    }
  },
  {
    "path": "src/test/java/igrad/testutil/EditModuleDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleEditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleEditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Memo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class EditModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ModuleEditCommand.EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new ModuleEditCommand.EditModuleDescriptor();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder(ModuleEditCommand.EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.descriptor \u003d new ModuleEditCommand.EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditModuleDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setTitle(module.getTitle());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setModuleCode(module.getModuleCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setCredits(module.getCredits());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setMemo(module.getMemo());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setSemester(module.getSemester());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        descriptor.setTags(module.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Title} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setTitle(new Title(title));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Credits} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder withCredits(String credits) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setCredits(new Credits(credits));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Memo} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder withMemo(String memo) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setMemo(new Memo(memo));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Semester} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public EditModuleDescriptorBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setSemester(new Semester(semester));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditModuleDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        Set\u003cTag\u003e tagsSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.setTags(tagsSet);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 11,
      "-": 42,
      "nathanaelseen": 45
    }
  },
  {
    "path": "src/test/java/igrad/testutil/ModuleBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Credits;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Memo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Semester;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Title;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"Programming Methodology\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS1101S\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_CREDITS \u003d \"4\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_MEMO \u003d \"this is about recursion\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_SEMESTER \u003d \"Y1S1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"blah\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Credits credits;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Memo memo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        credits \u003d new Credits(DEFAULT_CREDITS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        memo \u003d new Memo(DEFAULT_MEMO);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        semester \u003d new Semester(DEFAULT_SEMESTER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code moduleToCopy}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        title \u003d moduleToCopy.getTitle();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        moduleCode \u003d moduleToCopy.getModuleCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        credits \u003d moduleToCopy.getCredits();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        memo \u003d moduleToCopy.getMemo();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        semester \u003d moduleToCopy.getSemester();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(moduleToCopy.getTags());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Title} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Module} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public ModuleBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Credits} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleBuilder withCredits(String credits) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.credits \u003d new Credits(credits);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Memo} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleBuilder withMemo(String memo) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.memo \u003d new Memo(memo);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Semester} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.semester \u003d new Semester(semester);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Sets the {@code Semester} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public ModuleBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new Module(title, moduleCode, credits, memo, semester, description, tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 11,
      "-": 42,
      "nathanaelseen": 65
    }
  },
  {
    "path": "src/test/java/igrad/testutil/ModuleUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_CREDITS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MEMO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_SEMESTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleAddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.logic.commands.ModuleEditCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yjskrs"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static String getAddCommand(Module module) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return ModuleAddCommand.COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the part of command string for the given {@code module}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(PREFIX_TITLE + module.getTitle().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(PREFIX_MODULE_CODE + module.getModuleCode().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(PREFIX_CREDITS + module.getCredits().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(PREFIX_MEMO + module.getMemo().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        sb.append(PREFIX_SEMESTER + module.getSemester().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        module.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the part of command string for the given {@code EditModuleDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    public static String getEditModuleDescriptorDetails(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.getTitle().ifPresent(title -\u003e sb.append(PREFIX_TITLE).append(title.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.getModuleCode().ifPresent(moduleCode -\u003e sb.append(PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .append(moduleCode.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.getCredits().ifPresent(credits -\u003e sb.append(PREFIX_CREDITS)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .append(credits.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.getMemo().ifPresent(memo -\u003e sb.append(PREFIX_MEMO)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .append(memo.value).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        descriptor.getSemester().ifPresent(semester -\u003e sb.append(PREFIX_SEMESTER)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            .append(semester.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 13,
      "-": 34,
      "nathanaelseen": 27
    }
  },
  {
    "path": "src/test/java/igrad/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/igrad/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the middle index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the last index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "     * Returns the module in the {@code model}\u0027s module list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 10,
      "-": 44,
      "nathanaelseen": 1
    }
  },
  {
    "path": "src/test/java/igrad/testutil/TypicalCourseInfos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_NAME_B_ARTS_PHILO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_NAME_B_COMP_SCI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.course.CourseInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A utility class containing a list of {@code CourseInfo} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class TypicalCourseInfos {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final CourseInfo B_SCI_MATH \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withName(\"Bachelor of Science in Mathematics\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "    public static final CourseInfo B_INFO_SYS \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        .withName(\"Bachelor of Information Systems\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // Manually added - CourseInfo\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final CourseInfo B_ARTS_PHILO \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withName(VALID_NAME_B_ARTS_PHILO).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final CourseInfo B_COMP_SCI \u003d new CourseInfoBuilder()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withName(VALID_NAME_B_COMP_SCI).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private TypicalCourseInfos() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static List\u003cCourseInfo\u003e getTypicalCourseInfos() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teriaiw"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(B_COMP_SCI, B_INFO_SYS, B_SCI_MATH, B_ARTS_PHILO));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teriaiw": 3,
      "nathanaelseen": 32
    }
  },
  {
    "path": "src/test/java/igrad/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Index INDEX_FIRST_MODULE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Index INDEX_SECOND_MODULE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Index INDEX_THIRD_MODULE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 2,
      "-": 7,
      "nathanaelseen": 3
    }
  },
  {
    "path": "src/test/java/igrad/testutil/TypicalModules.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "package igrad.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_CREDITS_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_CREDITS_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MEMO_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MEMO_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_MODULE_CODE_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_SEMESTER_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_SEMESTER_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TAG_EASY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TAG_HARD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_COMPUTER_ORGANISATION;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import static igrad.logic.commands.CommandTestUtil.VALID_TITLE_PROGRAMMING_METHODOLOGY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.CourseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "import igrad.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *public static final Module ALICE \u003d new ModuleBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *       .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *       .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *       .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     *public static final Module HOON \u003d new ModuleBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    // Manually added - Module\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Module PROGRAMMING_METHODOLOGY \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withTitle(VALID_TITLE_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withCredits(VALID_CREDITS_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withMemo(VALID_MEMO_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withSemester(VALID_SEMESTER_PROGRAMMING_METHODOLOGY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withTags(VALID_TAG_EASY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final Module COMPUTER_ORGANISATION \u003d new ModuleBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withTitle(VALID_TITLE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withModuleCode(VALID_MODULE_CODE_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withCredits(VALID_CREDITS_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withMemo(VALID_MEMO_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withSemester(VALID_SEMESTER_COMPUTER_ORGANISATION)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        .withTags(VALID_TAG_HARD).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    private TypicalModules() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     * Returns an {@code CourseBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static CourseBook getTypicalCourseBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        CourseBook ab \u003d new CourseBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "            ab.addModule(module);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(PROGRAMMING_METHODOLOGY, COMPUTER_ORGANISATION));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nathanaelseen": 77
    }
  },
  {
    "path": "src/test/java/igrad/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    public TestFxmlObject() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "waynewee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "waynewee": 2,
      "yjskrs": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/igrad/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "package igrad.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import static igrad.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "import igrad.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 9,
      "-": 105
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yjskrs"
        },
        "content": "\u003c?import igrad.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "yjskrs": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nathanaelseen"
        },
        "content": "\u003cfx:root type\u003d\"igrad.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "nathanaelseen": 1
    }
  },
  {
    "path": "testCI.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dargohzy"
        },
        "content": "Hello"
      }
    ],
    "authorContributionMap": {
      "dargohzy": 1
    }
  }
]
