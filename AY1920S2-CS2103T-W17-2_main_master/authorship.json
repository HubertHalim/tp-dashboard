[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "mainClassName \u003d \u0027com.notably.Main\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u0027site-name\u0027: \u0027Notably\u0027,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W17-2/main\u0027,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 2,
      "kevinputera": 1,
      "-": 112,
      "firzanarmani": 1
    }
  },
  {
    "path": "copyright.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿Some code adapted from http://code.makery.ch/library/javafx-8-tutorial/ by Marco Jakob"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "Image credit to ICON8 - https://img.icons8.com/doodle/48/000000/one-finger--v1.png"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "- notably_logo.png"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Copyright by Jan Jan Kovařík - http://glyphicons.com/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "- calendar.png"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "- edit.png"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 2,
      "-": 6
    }
  },
  {
    "path": "src/main/java/com/notably/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 62
    }
  },
  {
    "path": "src/main/java/com/notably/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/com/notably/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.view.View;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.view.ViewManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    protected View view;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Notably ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        view \u003d new ViewManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        view.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 4,
      "kevinputera": 24,
      "-": 156
    }
  },
  {
    "path": "src/main/java/com/notably/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/com/notably/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 128;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 71
    }
  },
  {
    "path": "src/main/java/com/notably/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/com/notably/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/com/notably/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/com/notably/commons/core/path/AbsolutePath.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represents the Path to a Block, starting from the Root node."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class AbsolutePath implements Path {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String INVALID_ABSOLUTE_PATH \u003d \"Invalid absolute path\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\/||(\\\\/\\\\p{Alnum}+)+\\\\/?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final List\u003cString\u003e components;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private AbsolutePath(String absolutePathString) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.components \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        for (String obj : absolutePathString.split(\"/\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            if (!obj.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                this.components.add(obj.trim());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public AbsolutePath(List\u003cString\u003e absolutePathList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.components \u003d absolutePathList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Check if a supplied string is a ValidAbsolutePath"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param absolutePathString"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static boolean isValidAbsolutePath(String absolutePathString) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return absolutePathString.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Creates an absolute path from a string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param absolutePathString used to create an absolutePath."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return Absolute Path."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @throws InvalidPathException if String provided is not a valid absolutePath."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static AbsolutePath fromString(String absolutePathString) throws InvalidPathException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!isValidAbsolutePath(absolutePathString)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new InvalidPathException(INVALID_ABSOLUTE_PATH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return new AbsolutePath(absolutePathString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Creates an absolute path from a list of components."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param absoluteComponents used to create an absolutePath."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return Absolute Path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @throws InvalidPathException if String provided is not a valid absolutePath."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static AbsolutePath fromComponents(List\u003cString\u003e absoluteComponents) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return new AbsolutePath(absoluteComponents);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Convert from relative path to absolute path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param relativePath used to convert to absolute path."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param currentWorkingPath of the current working directory."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return the converted AbsolutePath."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @throws InvalidPathException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static AbsolutePath fromRelativePath(RelativePath relativePath,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            AbsolutePath currentWorkingPath) throws InvalidPathException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e temp \u003d new ArrayList\u003c\u003e(relativePath.getComponents());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e temp2 \u003d new ArrayList\u003c\u003e(currentWorkingPath.getComponents());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        for (String obj : temp) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            if (obj.equals(\"..\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                if (temp2.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                    throw new InvalidPathException(\"Empty directory\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                temp2.remove(temp2.size() - 1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            } else if (obj.equals(\".\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                //Do nothing"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                temp2.add(obj);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return new AbsolutePath(temp2);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Convert Absolute path to Relative path."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param currentWorkingPath of the current working directory."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return the converted RelativePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public RelativePath toRelativePath(AbsolutePath currentWorkingPath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return RelativePath.fromAbsolutePath(this, currentWorkingPath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public List\u003cString\u003e getComponents() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return this.components;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String getStringRepresentation() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return \"/\" + String.join(\"/\", this.components);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!(object instanceof Path)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Path another \u003d (Path) object;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e temp \u003d another.getComponents();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return this.components.equals(temp);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return Objects.hash(this.components);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return getStringRepresentation();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 41,
      "ljiazh3ng": 88
    }
  },
  {
    "path": "src/main/java/com/notably/commons/core/path/Path.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a path to a {@link Block}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public interface Path {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Gets the string components of a path."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * For example, a path /a/b/c have the components [\"a\", \"b\", \"c\"]."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Components of a path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    List\u003cString\u003e getComponents();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Gets the string representation of a path."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * For example, \"/a/b/c\" is a string representation of a path."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return String representation of a path"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    String getStringRepresentation();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 24
    }
  },
  {
    "path": "src/main/java/com/notably/commons/core/path/RelativePath.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Represents a path to the block relative to the current directory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class RelativePath implements Path {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String INVALID_RELATIVE_PATH \u003d \"Invalid relative path\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\.|\\\\..|\\\\p{Alnum}+)(\\\\/(\\\\.|\\\\..|\\\\p{Alnum}+))*\\\\/?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final List\u003cString\u003e components;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private RelativePath(String relativePathString) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.components \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        for (String obj : relativePathString.split(\"/\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            if (!obj.trim().equals(\"\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                this.components.add(obj.trim());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private RelativePath(List\u003cString\u003e components) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.components \u003d components;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Check if string is a valid relative path."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param relativePathString String used to check validity."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return returns true if String is a valid relative Path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static boolean isValidRelativePath(String relativePathString) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return relativePathString.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Instantiate a RelativePath object if the string is valid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param relativePathString used to create RelativePath."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return the converted RelativePath object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @throws InvalidPathException if the String is invalid (Not relative path)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static RelativePath fromString(String relativePathString) throws InvalidPathException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!isValidRelativePath(relativePathString)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            throw new InvalidPathException(\"Not a relative path\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return new RelativePath(relativePathString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Instantiate a relativePath from components."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param components to create a relativePath."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return a relativePath object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static RelativePath fromComponents(List\u003cString\u003e components) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return new RelativePath(components);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Convert from absolute path to relative path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param absolutePath to convert to relative path."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param currentWorkingPath of the current working directory."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return the converted relative path."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @throws InvalidPathException"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public static RelativePath fromAbsolutePath(AbsolutePath absolutePath,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            AbsolutePath currentWorkingPath) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        int sizeOfCurrent \u003d currentWorkingPath.getComponents().size();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        int sizeOfAbsolute \u003d absolutePath.getComponents().size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e componentsToRelative;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (sizeOfCurrent \u003e sizeOfAbsolute) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            componentsToRelative \u003d Collections.nCopies(sizeOfAbsolute - sizeOfCurrent, \"..\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            componentsToRelative \u003d absolutePath.getComponents().subList(sizeOfCurrent, sizeOfAbsolute);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return fromComponents(componentsToRelative);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * Convert relative path to absolute path."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @param currentWorkingPath of the current working directory."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "     * @return the absolute path of the relative path."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public AbsolutePath toAbsolutePath(AbsolutePath currentWorkingPath) throws InvalidPathException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return AbsolutePath.fromRelativePath(this, currentWorkingPath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public List\u003cString\u003e getComponents() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return this.components;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String getStringRepresentation() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return String.join(\"/\", this.components);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        if (!(object instanceof Path)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Path another \u003d (Path) object;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e anotherTemp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        for (String obj: this.getComponents()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            if (obj.equals(\"..\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                if (temp.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                    temp.add(obj);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                    temp.remove(temp.size() - 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            } else if (!obj.equals(\".\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                temp.add(obj);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        for (String obj: another.getComponents()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            if (obj.equals(\"..\")) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                if (anotherTemp.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                    anotherTemp.add(obj);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                    anotherTemp.remove(temp.size() - 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            } else if (!obj.equals(\".\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "                anotherTemp.add(obj);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return temp.equals(anotherTemp);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return Objects.hash(this.components);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return getStringRepresentation();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 39,
      "ljiazh3ng": 106
    }
  },
  {
    "path": "src/main/java/com/notably/commons/core/path/exceptions/InvalidPathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core.path.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * TODO: Add Javadoc"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class InvalidPathException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    // TODO: Add appropriate constructors"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public InvalidPathException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 9,
      "ljiazh3ng": 3
    }
  },
  {
    "path": "src/main/java/com/notably/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/com/notably/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/com/notably/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 67
    }
  },
  {
    "path": "src/main/java/com/notably/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @see com.notably.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void getFilteredPersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 6,
      "-": 38,
      "firzanarmani": 1,
      "ljiazh3ng": 1
    }
  },
  {
    "path": "src/main/java/com/notably/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void getFilteredPersonList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 10,
      "-": 59,
      "firzanarmani": 2,
      "ljiazh3ng": 1
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private final Object toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public AddCommand(Object person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 52,
      "firzanarmani": 1,
      "ljiazh3ng": 9
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 18,
      "firzanarmani": 1
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public abstract void execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 15,
      "firzanarmani": 1
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cObject\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            throw new CommandException(\"MESSAGE_INVALID_PERSON_DISPLAYED_INDEX\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        Object personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "kevinputera": 4,
      "-": 42,
      "firzanarmani": 1,
      "ljiazh3ng": 2
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cObject\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            throw new CommandException(\"MESSAGE_INVALID_PERSON_DISPLAYED_INDEX\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    private static void createEditedPerson(Object personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        public void isAnyFieldEdited() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        public void setName(Object name) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        public void getName() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        public void setPhone(Object phone) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        public void getPhone() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        public void setEmail(Object email) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        public void getEmail() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        public void setAddress(Object address) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        public void getAddress() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "kevinputera": 10,
      "-": 155,
      "firzanarmani": 1,
      "ljiazh3ng": 17
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // TODO: Handle exit command execution in MainWindow.executeCommand()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 15,
      "firzanarmani": 2
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // TODO: Handle help command execution in MainWindow.executeCommand()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 17,
      "firzanarmani": 2
    }
  },
  {
    "path": "src/main/java/com/notably/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/CorrectionEngine.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a correction engine."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public interface CorrectionEngine\u003cT\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Corrects a given item."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param uncorrected Uncorrected input"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Result of the correction"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    CorrectionResult\u003cT\u003e correct(T uncorrected);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 14
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/CorrectionResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents the result of a correction."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class CorrectionResult\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final CorrectionStatus correctionStatus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final T correctedItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a correction result without any corrected item."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param correctionStatus Status of the result"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionResult(CorrectionStatus correctionStatus) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this(correctionStatus, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Creates a correction result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param correctionStatus Status of the result"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param correctedItem Item after correction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionResult(CorrectionStatus correctionStatus, T correctedItem) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(correctionStatus);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.correctionStatus \u003d correctionStatus;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.correctedItem \u003d correctedItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Gets the status of the correction."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Status of the correction"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionStatus getCorrectionStatus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return correctionStatus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Gets the corrected item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * If no corrected item, {@code Optional.empty()} will be returned."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Corrected item, or {@code Optional.empty()} if there is none"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Optional\u003cT\u003e getCorrectedItem() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return Optional.ofNullable(correctedItem);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean equals(Object object) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (!(object instanceof CorrectionResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003c?\u003e another \u003d (CorrectionResult\u003c?\u003e) object;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return Objects.equals(correctionStatus, another.correctionStatus)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                \u0026\u0026 Objects.equals(correctedItem, another.correctedItem);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return Objects.hash(correctionStatus, correctedItem);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 70
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/CorrectionStatus.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents the status of a correction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public enum CorrectionStatus {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    UNCHANGED,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    CORRECTED,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    FAILED,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 10
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/StringCorrectionEngine.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.distance.EditDistanceCalculator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.correction.distance.LevenshteinDistanceCalculator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a correction engine that works on {@link String}s."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class StringCorrectionEngine implements CorrectionEngine\u003cString\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final EditDistanceCalculator editDistanceCalculator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final List\u003cString\u003e options;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private final int distanceThreshold;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public StringCorrectionEngine(List\u003cString\u003e options, int distanceThreshold) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this(new LevenshteinDistanceCalculator(), options, distanceThreshold);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public StringCorrectionEngine(EditDistanceCalculator editDistanceCalculator,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            List\u003cString\u003e options, int distanceThreshold) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(editDistanceCalculator);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(options);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (options.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new IllegalArgumentException(\"\\\"options\\\" must contain at least one element\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (distanceThreshold \u003c 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            throw new IllegalArgumentException(\"\\\"distanceThreshold\\\" must be greater than 0\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.editDistanceCalculator \u003d editDistanceCalculator;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.options \u003d options;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        this.distanceThreshold \u003d distanceThreshold;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Corrects a given string."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param uncorrected Uncorrected string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return Result of the correction"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public CorrectionResult\u003cString\u003e correct(String uncorrected) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(uncorrected);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        String closestString \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int closestDistance \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (String option : options) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            int distance \u003d editDistanceCalculator.calculateDistance(uncorrected, option);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            if (distance \u003c closestDistance) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                closestString \u003d option;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                closestDistance \u003d distance;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (closestDistance \u003e distanceThreshold) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new CorrectionResult\u003c\u003e(CorrectionStatus.FAILED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        if (closestString.equals(uncorrected)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            return new CorrectionResult\u003c\u003e(CorrectionStatus.UNCHANGED, uncorrected);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return new CorrectionResult\u003cString\u003e(CorrectionStatus.CORRECTED, closestString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 70
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/distance/EditDistanceCalculator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction.distance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Wrapper for an algorithm that calculates the edit distance of two {@link String}s."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public interface EditDistanceCalculator {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Calculates the edit distance between two {@link Strings}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param first First {@link String}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param second Second {@link String}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return The edit distance of {@code first} and {@code second}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    int calculateDistance(String first, String second);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 16
    }
  },
  {
    "path": "src/main/java/com/notably/logic/correction/distance/LevenshteinDistanceCalculator.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction.distance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * An implementation of the Levenshtein algorithm for calculating the edit distance of two {@link Strings}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Inspired by https://web.stanford.edu/class/cs124/lec/med.pdf."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class LevenshteinDistanceCalculator implements EditDistanceCalculator {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public int calculateDistance(String first, String second) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(first);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        Objects.requireNonNull(second);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        // Uses dynamic programming bottom-up approach in calculating the edit distance."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        // For each pair of i,j, distance[i][j] represents the edit distance between"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        // first[0...i] and second[0...j]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int[][] distance \u003d new int[first.length() + 1][second.length() + 1];"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d first.length(); i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            distance[i][0] \u003d i;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (int j \u003d 0; j \u003c\u003d second.length(); j++) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            distance[0][j] \u003d j;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d first.length(); i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            for (int j \u003d 1; j \u003c\u003d second.length(); j++) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                if (first.charAt(i - 1) \u003d\u003d second.charAt(j - 1)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    distance[i][j] \u003d min("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i - 1][j] + 1,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i][j - 1] + 1,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i - 1][j - 1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                    distance[i][j] \u003d min("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i - 1][j] + 1,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i][j - 1] + 1,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                            distance[i - 1][j - 1] + 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return distance[first.length()][second.length()];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Calculates the minimum value of three integers."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param a First integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param b Second integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @param c Third integer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @return The mininum of the three integers"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private int min(int a, int b, int c) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        return Math.min(a, Math.min(b, c));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 62
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            throw new ParseException(\"MESSAGE_INVALID_COMMAND_FORMAT\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        return new AddCommand(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 5,
      "kevinputera": 8,
      "-": 31,
      "ljiazh3ng": 1
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/AddressBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            throw new ParseException(\"MESSAGE_INVALID_COMMAND_FORMAT\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            throw new ParseException(\"MESSAGE_UNKNOWN_COMMAND\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 2,
      "kevinputera": 9,
      "-": 54
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/DeleteCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "                    \"MESSAGE_INVALID_COMMAND_FORMAT\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "kevinputera": 4,
      "-": 22
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            throw new ParseException(\"MESSAGE_INVALID_COMMAND_FORMAT\", pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "kevinputera": 11,
      "-": 61
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static void parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static void parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static void parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static void parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 95,
      "ljiazh3ng": 8
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/com/notably/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/SuggestionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents a particular strategy in generating suggestions."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public interface SuggestionCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Adds a list of generated suggestions to the app\u0027s model."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param model The app\u0027s model."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void execute(Model model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 14
    }
  },
  {
    "path": "src/main/java/com/notably/logic/suggestion/SuggestionEngine.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.logic.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents the Suggestion Engine instance."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * This is the class that manages the generation of suggestions."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public interface SuggestionEngine {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Generates suggestions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param input User\u0027s input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void suggest(String input);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 13
    }
  },
  {
    "path": "src/main/java/com/notably/model/AddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 70,
      "ljiazh3ng": 4
    }
  },
  {
    "path": "src/main/java/com/notably/model/BlockModel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.core.path.AbsolutePath;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Body;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * API of the BlockModel component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface BlockModel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the BlockTree currently in use by Notably."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    BlockTree getBlockTree();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the absolute path of the currently open block."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    AbsolutePath getCurrentlyOpenPath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@code Property\u003cAbsolutePath\u003e} of the currently open path."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Property\u003cAbsolutePath\u003e getCurrentlyOpenPathProperty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Check if currently open block has the specified child block."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    boolean hasPath(AbsolutePath p);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Opens the block at the specified path, if possible. (For open command)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void setCurrentlyOpenBlock(AbsolutePath p);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Adds a block to the specified path, if possible. (For add command)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void addBlockToCurrentPath(Block b);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Removes the block at the specified path, if possible. (For remove command)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void removeBlock(AbsolutePath p);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Sets the currently open block to a new block. (For edit command)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void updateCurrentlyOpenBlockBody(Body newBody);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    TODO: To implement after storage classes are ready"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void setBlockTree(List\u003cBlock\u003e blocks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void resetData(BlockModel newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 59
    }
  },
  {
    "path": "src/main/java/com/notably/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import com.notably.model.commandinput.CommandInputModel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface Model extends BlockModel, SuggestionModel, CommandInputModel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    Predicate\u003cObject\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void hasPerson(Object person);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void deletePerson(Object target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void addPerson(Object person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void setPerson(Object target, Object editedPerson);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    ObservableList\u003cObject\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cObject\u003e predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 1,
      "HemanshuGandhi": 2,
      "kevinputera": 1,
      "-": 76,
      "firzanarmani": 1,
      "ljiazh3ng": 8
    }
  },
  {
    "path": "src/main/java/com/notably/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.core.path.AbsolutePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.model.block.Body;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.commandinput.CommandInputModel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import com.notably.model.suggestion.SuggestionModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "// TODO: to update according to our Model classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private UserPrefs userPrefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private FilteredList\u003cObject\u003e filteredPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    // TODO: set the model variables to final after removing the AB3 attributes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private SuggestionModel suggestionModel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private CommandInputModel commandInputModel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private BlockModel blockModel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        this.filteredPersons \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    // TODO: to update constructor according to our Model classes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public ModelManager(SuggestionModel suggestionModel, CommandInputModel commandInputModel, BlockModel blockModel) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.suggestionModel \u003d suggestionModel;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.commandInputModel \u003d commandInputModel;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.blockModel \u003d blockModel;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void hasPerson(Object person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void deletePerson(Object target) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void addPerson(Object person) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void setPerson(Object target, Object editedPerson) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public ObservableList\u003cObject\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cObject\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Suggestion Model \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public ObservableList\u003cSuggestionItem\u003e getSuggestions() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return suggestionModel.getSuggestions();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void setSuggestions(List\u003cSuggestionItem\u003e suggestions) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestionModel.setSuggestions(suggestions);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Property\u003cOptional\u003cString\u003e\u003e responseTextProperty() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return suggestionModel.responseTextProperty();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void setResponseText(String responseText) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestionModel.setResponseText(responseText);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearResponseText() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestionModel.clearResponseText();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearSuggestions() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestionModel.clearSuggestions();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CommandInputModel\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public StringProperty inputProperty() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return commandInputModel.inputProperty();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return commandInputModel.getInput();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setInput(String input) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        commandInputModel.setInput(input);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d BlockModel\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockTree getBlockTree() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockModel.getBlockTree();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public AbsolutePath getCurrentlyOpenPath() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockModel.getCurrentlyOpenPath();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Property\u003cAbsolutePath\u003e getCurrentlyOpenPathProperty() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockModel.getCurrentlyOpenPathProperty();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean hasPath(AbsolutePath p) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockModel.hasPath(p);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void setCurrentlyOpenBlock(AbsolutePath p) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.setCurrentlyOpenBlock(p);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void addBlockToCurrentPath(Block b) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.addBlockToCurrentPath(b);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void removeBlock(AbsolutePath p) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.removeBlock(p);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void updateCurrentlyOpenBlockBody(Body newBody) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockModel.updateCurrentlyOpenBlockBody(newBody);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 52,
      "HemanshuGandhi": 17,
      "kevinputera": 2,
      "-": 127,
      "firzanarmani": 49,
      "ljiazh3ng": 14
    }
  },
  {
    "path": "src/main/java/com/notably/model/ReadOnlyAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/com/notably/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/com/notably/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/Block.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * API of the Block component."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface Block {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the title of a block."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Title getTitle();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the body content of a block."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Body getBody();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 16
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/BlockImpl.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Represents a Block in the Notably data structure."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class BlockImpl implements Block {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private Body body;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Initializes a block without the body."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Used when creating a root block or a block without the optional body argument."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockImpl(Title title) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this(title, new Body(\"\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Initializes a block with body content."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Used when creating a block with additional body argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public BlockImpl(Title title, Body body) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(body);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        this.body \u003d body;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Static method to create and return a root block"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static Block createRootBlock() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return new BlockImpl(new Title(\"Root\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Body getBody() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.body;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 47
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/BlockTree.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import com.notably.commons.core.path.AbsolutePath;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Custom tree-like data structure that uses the AbsolutePath object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * to obtain the BlockTreeItem needed for manipulation."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface BlockTree {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the root BlockTreeItem of the block tree."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return The root BlockTreeItem."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    BlockTreeItem getRootBlock();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the BlockTreeItem at the path specified."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path Full path of the block."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    BlockTreeItem get(AbsolutePath path);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Adds a new Block to the block at the path specified."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path Full path of the parent block."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param newBlock The block to be added."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void add(AbsolutePath path, Block newBlock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Sets the block at the specified path to a new block."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path Full path of the block."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param newBlock The new block to be set."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void set(AbsolutePath path, Block newBlock);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Remove the block at the specified path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param path Full path of the block to be removed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void remove(AbsolutePath path);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 43
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/BlockTreeItem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * API of the BlockNode component."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public interface BlockTreeItem extends Block {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the {@code TreeItem\u003cBlock\u003e} representation of the BlockTreeItem."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    TreeItem\u003cBlock\u003e getTreeItem();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the Block content contained in a BlockTreeItem."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    Block getBlock();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets the parent block of a block, if possible."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns an {@code Optional.empty()} if the block is the root block."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    BlockTreeItem getBlockParent();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Gets a list of children blocks of a block."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    List\u003cBlockTreeItem\u003e getBlockChildren();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Replaces all the children of the block with a new list of children."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void setBlockChildren(List\u003cBlockTreeItem\u003e newChildren);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Finds a child block of a block, with the given input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    BlockTreeItem getBlockChild(Title title);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Replaces a child block of a block, that matches the title, with a new child block."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void setBlockChild(Title title, Block newBlock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Adds a single new child to a block."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void addBlockChild(Block newBlock);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Removes a specified child block from a block."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    void removeBlockChild(Block toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Checks if a block is a root block."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    boolean isRootBlock();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 62
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/Body.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Represents a Block\u0027s body in Notably."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Guarantees: immutable; is non-null"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Body {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        \"Body should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    * The string can be empty (initialization of an empty body) but"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    * the body cannot contain only whitespace characters, e.g. \"  \" is invalid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?!^ +$)^.+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public final String blockBody;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Constructs a {@code Body}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param body A valid body."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Body(String body) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(body);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        checkArgument(isValidBody(body), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockBody \u003d body;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns true if a given string is a valid body."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param test The body string to test."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static boolean isValidBody(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return test.equals(\"\") || test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns a String of the Body contents."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Body text string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.blockBody;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 50
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/Title.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Represents a Block\u0027s title in Notably."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            \"Titles should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * The first character of the title must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}[\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public final String blockTitle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param title A valid title."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        blockTitle \u003d title;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @param test The title string to test."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * Returns a String of the Title content."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     * @return Title text string."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return this.blockTitle;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "                \u0026\u0026 blockTitle.equals(((Title) other).blockTitle)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        return blockTitle.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 63
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/exceptions/DuplicateBlockException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.model.block.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Signals that the operation will result in duplicate Block(Blocks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * parent and title)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "public class DuplicateBlockException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public DuplicateBlockException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        super(\"Operation would result in duplicate Block\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 11
    }
  },
  {
    "path": "src/main/java/com/notably/model/block/exceptions/NoSuchBlockException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " * Signals that the block with the specified title string does not exist."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class NoSuchBlockException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public NoSuchBlockException(String blockTitle) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        super(\"Block with the title \" + blockTitle + \" does not exist!\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 12
    }
  },
  {
    "path": "src/main/java/com/notably/model/commandinput/CommandInputModel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.model.commandinput;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * API for the CommandInputModel component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Represents the data that the user sees as text within the text field of the CommandInputView"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * as well as some supporting operations."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public interface CommandInputModel {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Represents the text data that the user currently sees within the text field of the CommandInputView."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return A javafx StringProperty object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    StringProperty inputProperty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Gets the text data saved in the CommandInputModel."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @return A string corresponding to the text data saved in the CommandInputModel."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    String getInput();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Sets the data for the text in the CommandInputModel."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @param input A String corresponding to the new text data in the CommandInputModel."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    void setInput(String input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 30
    }
  },
  {
    "path": "src/main/java/com/notably/model/commandinput/CommandInputModelImpl.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.model.commandinput;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Contains the data that the user sees as text within the text field of the CommandInputView"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * as well as some supporting operations."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * CommandInputModelImpl and CommandInputView both contain a String Property that have been"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * bidirectionally bound to each other."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * ie. When the user types text in the text field of CommandInputView, the changes are propagated"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * to CommandInputModelImpl. Conversely, changes to CommandInputModelImpl (e.g. when the user selects suggestions)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * are reflected within the text field of CommandInputView to achieve autofill functionality."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class CommandInputModelImpl implements CommandInputModel {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private final StringProperty input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public CommandInputModelImpl() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private CommandInputModelImpl(String initialInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.input \u003d new SimpleStringProperty(initialInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public StringProperty inputProperty() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return this.input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        return this.input.getValue();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public void setInput(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        this.input.setValue(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 43
    }
  },
  {
    "path": "src/main/java/com/notably/model/suggestion/SuggestionItem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.model.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents the instance of the suggested item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public interface SuggestionItem {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Gets a user-friendly text suggestion to be displayed to the user, e.g. \"open -t root/cs2103\"."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The suggestion."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    String getDisplayText();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Executes the action taken after the suggestion item is chosen."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * The action will be different depending on the type of SuggestionCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The action taken after the suggestion item is chosen."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    Runnable getAction();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 19
    }
  },
  {
    "path": "src/main/java/com/notably/model/suggestion/SuggestionItemImpl.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.model.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Implementation class for Suggestion Item."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SuggestionItemImpl implements SuggestionItem {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private String displayText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Runnable action;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public SuggestionItemImpl(String displayText, Runnable action) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.displayText \u003d displayText;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.action \u003d action;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public String getDisplayText() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return displayText;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Runnable getAction() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return action;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 24
    }
  },
  {
    "path": "src/main/java/com/notably/model/suggestion/SuggestionModel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.model.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * Represents the Suggestion Model instance."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * The UI will directly interact with this model to display the suggestions result."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public interface SuggestionModel {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Gets the list of suggestions saved in the model."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The Observable List of suggested items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    ObservableList\u003cSuggestionItem\u003e getSuggestions();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Saves the list of suggestions in the model."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param suggestions The list of paths or notes that match the user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void setSuggestions(List\u003cSuggestionItem\u003e suggestions);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Shows user the meaning of their input, e.g. \"Create a new note\"."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * When input cannot get corrected, the \"error\" message will be shown in commandTextProperty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * TODO: add logo."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @return The meaning of the user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    Property\u003cOptional\u003cString\u003e\u003e responseTextProperty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Updates the responseTextProperty."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * @param responseText The meaning of the \"command\" that the user inputs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void setResponseText(String responseText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Resets the command text when the user clears the input text field."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void clearResponseText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     * Resets the list of suggestions."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    void clearSuggestions();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 49
    }
  },
  {
    "path": "src/main/java/com/notably/model/suggestion/SuggestionModelImpl.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "package com.notably.model.suggestion;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " * The implementation class of SuggestionModel."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "johannagwan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "public class SuggestionModelImpl implements SuggestionModel {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private ObservableList\u003cSuggestionItem\u003e suggestions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    private Property\u003cOptional\u003cString\u003e\u003e responseTextProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public SuggestionModelImpl() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        responseTextProperty \u003d new SimpleObjectProperty(Optional.empty());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public ObservableList\u003cSuggestionItem\u003e getSuggestions() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void setSuggestions(List\u003cSuggestionItem\u003e suggestions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(suggestions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        this.suggestions.setAll(suggestions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public Property\u003cOptional\u003cString\u003e\u003e responseTextProperty() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        return responseTextProperty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void setResponseText(String responseText) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        Objects.requireNonNull(responseText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        responseTextProperty.setValue(Optional.of(responseText));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearResponseText() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        responseTextProperty.setValue(Optional.empty());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void clearSuggestions() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        suggestions.clear();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 55
    }
  },
  {
    "path": "src/main/java/com/notably/model/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/java/com/notably/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static void getSamplePersons() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 22,
      "ljiazh3ng": 10
    }
  },
  {
    "path": "src/main/java/com/notably/storage/AddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a storage for {@link com.notably.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 4,
      "-": 41
    }
  },
  {
    "path": "src/main/java/com/notably/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Jackson-friendly version of {@link Object}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public JsonAdaptedPerson(Object source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 43,
      "ljiazh3ng": 8
    }
  },
  {
    "path": "src/main/java/com/notably/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/com/notably/storage/JsonAddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 7,
      "-": 73
    }
  },
  {
    "path": "src/main/java/com/notably/storage/JsonSerializableAddressBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.AddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 4,
      "-": 47,
      "ljiazh3ng": 1
    }
  },
  {
    "path": "src/main/java/com/notably/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/com/notably/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/com/notably/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 6,
      "-": 71
    }
  },
  {
    "path": "src/main/java/com/notably/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Represents a storage for {@link com.notably.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * Saves the given {@link com.notably.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/com/notably/view/BlockContentEditView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class BlockContentEditView extends ViewPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String sampleText \u003d \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed eiusmod \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n\" + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"jumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox jumps over \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"the lazy dog. The quick brown fox jumps over the lazy dog.\\n\" + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            + \"qui officia deserunt mollit anim id est laborum.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String FXML \u003d \"BlockContentEditView.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private TextArea blockContentTextArea;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public BlockContentEditView() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        initializeBlockContent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void initializeBlockContent() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockContentTextArea.setText(sampleText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 40
    }
  },
  {
    "path": "src/main/java/com/notably/view/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * The VIEW component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class CommandBox extends ViewPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "         * @see com.notably.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        void execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 2,
      "kevinputera": 4,
      "-": 70,
      "firzanarmani": 1
    }
  },
  {
    "path": "src/main/java/com/notably/view/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class HelpWindow extends ViewPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 1,
      "kevinputera": 3,
      "-": 99
    }
  },
  {
    "path": "src/main/java/com/notably/view/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class MainWindow extends ViewPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    // Independent View parts residing in this View container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private SideBarTreeView sidebarTreeView;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private BlockContentEditView blockContentEditView;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private StackPane sideBarPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private StackPane blockContentPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        // Configure the VIEW"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, some accelerators (e.g F1)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "         * will not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "         * in CommandBox."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sidebarTreeView \u003d new SideBarTreeView();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarPlaceholder.getChildren().add(sidebarTreeView.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockContentEditView \u003d new BlockContentEditView();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        blockContentPlaceholder.getChildren().add(blockContentEditView.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "     * @see com.notably.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    private void executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            logic.execute(commandText);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            // logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            // if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            //     handleHelp();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            // }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            // if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            //     handleExit();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            // }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 16,
      "kevinputera": 7,
      "-": 152,
      "firzanarmani": 9,
      "ljiazh3ng": 1
    }
  },
  {
    "path": "src/main/java/com/notably/view/SideBarTreeView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.TreeItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.control.TreeView;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class SideBarTreeView extends ViewPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String FXML \u003d \"SideBarTreeView.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private TreeView\u003cString\u003e sideBarTreeViewRoot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public SideBarTreeView() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        loadTreeItems();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void loadTreeItems() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TreeItem\u003cString\u003e root \u003d new TreeItem\u003c\u003e(\"Root\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        root.setExpanded(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TreeItem\u003cString\u003e notably \u003d new TreeItem\u003c\u003e(\"Notably\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        notably.setExpanded(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        root.getChildren().add(notably);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        notably.getChildren().add(new TreeItem\u003c\u003e(\"Another Note\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        notably.getChildren().add(new TreeItem\u003c\u003e(\"CS2103\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        notably.getChildren().add(new TreeItem\u003c\u003e(\"ST2334\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        sideBarTreeViewRoot.setRoot(root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 38
    }
  },
  {
    "path": "src/main/java/com/notably/view/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * A view for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class StatusBarFooter extends ViewPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        setDummySaveLocationStatus();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setSaveLocationStatus(Path saveLocation) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private void setDummySaveLocationStatus() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        saveLocationStatus.setText(\"Notably v1.2\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 9,
      "kevinputera": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/com/notably/view/View.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * API of VIEW component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public interface View {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    /** Starts the VIEW (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 12,
      "kevinputera": 1
    }
  },
  {
    "path": "src/main/java/com/notably/view/ViewManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * The manager of the VIEW component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class ViewManager implements View {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ViewManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/notably_logo_48.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        logger.info(\"Starting VIEW...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            mainWindow.show(); //This should be called before creating other VIEW parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 7,
      "kevinputera": 6,
      "-": 74
    }
  },
  {
    "path": "src/main/java/com/notably/view/ViewPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": " * Represents a distinct part of the VIEW. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public abstract class ViewPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Constructs a ViewPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Constructs a ViewPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @see #ViewPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Constructs a ViewPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Constructs a ViewPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * @see #ViewPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    public ViewPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * Returns the root object of the scene graph of this ViewPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 13,
      "kevinputera": 2,
      "-": 74
    }
  },
  {
    "path": "src/main/resources/view/BlockContentEditView.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "  \u003cTextArea fx:id\u003d\"blockContentTextArea\" editable\u003d\"true\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "         title\u003d\"Notably\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    \u003cImage url\u003d\"@/images/notably_logo_48.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003cSplitPane VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "          \u003cStackPane fx:id\u003d\"sideBarPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" SplitPane.resizableWithParent\u003d\"false\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "                     minWidth\u003d\"180\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "          \u003cVBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"180\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"blockContentPlaceholder\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 11,
      "-": 43
    }
  },
  {
    "path": "src/main/resources/view/SideBarTreeView.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "\u003c?import javafx.scene.control.TreeView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "  \u003cTreeView fx:id\u003d\"sideBarTreeViewRoot\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/java/com/notably/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/com/notably/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/com/notably/commons/core/Path/AbsolutePathTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.commons.core.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.core.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class AbsolutePathTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void fromString_validInputString_generateAbsolutePath() throws InvalidPathException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath testInput \u003d AbsolutePath.fromString(\"/CS2103/notes\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        paths.add(\"CS2103\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        paths.add(\"notes\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(paths, testInput.getComponents());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void fromString_validEmptyString_generateAbsolutePath() throws InvalidPathException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath testInput \u003d AbsolutePath.fromString(\"/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(paths, testInput.getComponents());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void fromString_invalidInputString1_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(InvalidPathException.class, () -\u003e AbsolutePath.fromString(\"CS2103/notes\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void fromString_invalidInputString2_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(InvalidPathException.class, () -\u003e AbsolutePath.fromString(\"/../CS2103/notes\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void toRelativePath_validInput_correctedPath() throws InvalidPathException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath inputAbsolutePath \u003d AbsolutePath.fromString(\"/CS2103/notes/hello\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath inputCurrPath \u003d AbsolutePath.fromString(\"/CS2103\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath expectedOutput \u003d RelativePath.fromString(\"notes/hello\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedOutput, inputAbsolutePath.toRelativePath(inputCurrPath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void fromRelativePath_validInput_convertedAbsolutePath() throws InvalidPathException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath inputRelPath \u003d RelativePath.fromString(\"../../hello\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath inputCurrPath \u003d AbsolutePath.fromString(\"/CS2103/filler\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e expectedPaths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        expectedPaths.add(\"hello\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedPaths, AbsolutePath.fromRelativePath(inputRelPath, inputCurrPath).getComponents());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void fromRelativePath_invalidInput_exceptionThrown() throws InvalidPathException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath inputRelPath \u003d RelativePath.fromString(\"../../hello\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath inputCurrPath \u003d AbsolutePath.fromString(\"/CS2103\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(InvalidPathException.class, () -\u003e AbsolutePath.fromRelativePath(inputRelPath, inputCurrPath));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 73
    }
  },
  {
    "path": "src/test/java/com/notably/commons/core/Path/RelativePathTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "package com.notably.commons.core.path;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import com.notably.commons.core.path.exceptions.InvalidPathException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " * Test for RelativePath."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "class RelativePathTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void fromString_validInputString_generateAbsolutePath() throws InvalidPathException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath testInput \u003d RelativePath.fromString(\"CS2103/notes\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        List\u003cString\u003e paths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        paths.add(\"CS2103\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        paths.add(\"notes\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(paths, testInput.getComponents());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void fromString_invalidInputString_exceptionThrown() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(InvalidPathException.class, () -\u003e RelativePath.fromString(\"/CS2103/notes\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void toAbsolutePath_validInput_correctedPath() throws InvalidPathException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath inputRelativePath \u003d RelativePath.fromString(\"CS2103/notes/hello\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath inputCurrPath \u003d AbsolutePath.fromString(\"/CS2103\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath expectedOutput \u003d AbsolutePath.fromString(\"/CS2103/CS2103/notes/hello\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(expectedOutput, inputRelativePath.toAbsolutePath(inputCurrPath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void toAbsolutePath_invalidInput_exceptionThrown() throws InvalidPathException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath inputRelativePath \u003d RelativePath.fromString(\"../../notes/hello\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final AbsolutePath inputCurrPath \u003d AbsolutePath.fromString(\"/CS2103\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertThrows(InvalidPathException.class, () -\u003e inputRelativePath.toAbsolutePath(inputCurrPath));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public void equals_similarPath_pathAreEqual() throws InvalidPathException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath inputRelativePath1 \u003d RelativePath.fromString(\"CS2103/../CS2103\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        final RelativePath inputRelativePath2 \u003d RelativePath.fromString(\"CS2103\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "        assertEquals(inputRelativePath2, inputRelativePath1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 57
    }
  },
  {
    "path": "src/test/java/com/notably/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/com/notably/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/notably_logo_48.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 1,
      "kevinputera": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/com/notably/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/com/notably/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//TODO: To be enabled or changed when refactoring is completed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//package com.notably.logic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//public class LogicManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public Path temporaryFolder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // Execute add command"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * Executes the command and confirms that"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            super(filePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 150
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 25
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//TODO: To be enabled or changed when refactoring is completed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//package com.notably.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//public class ClearCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 26
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /* TODO: Fix test after refactoring is complete"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    /* TODO: Fix test after refactoring is complete"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    } */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 5,
      "-": 95,
      "firzanarmani": 4,
      "ljiazh3ng": 8
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 7,
      "-": 72
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//TODO: To be enabled or changed when refactoring is completed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//package com.notably.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "///**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// * Contains integration tests (interaction with the Model,UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "// */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//public class EditCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 67
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//TODO: To be enabled or changed when refactoring is completed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//package com.notably.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//public class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_exit_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 22
    }
  },
  {
    "path": "src/test/java/com/notably/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//TODO: To be enabled or changed when refactoring is completed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//package com.notably.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 21
    }
  },
  {
    "path": "src/test/java/com/notably/logic/correction/StringCorrectionEngineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class StringCorrectionEngineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final List\u003cString\u003e OPTIONS \u003d List.of(\"open\", \"new\", \"help\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_constructWithEmptyOptions_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final List\u003cString\u003e emptyOptions \u003d List.of();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new StringCorrectionEngine(emptyOptions, distanceThreshold));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_constructWithNegativeDistanceThreshold_exceptionThrown() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int negativeDistanceThreshold \u003d -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                new StringCorrectionEngine(OPTIONS, negativeDistanceThreshold));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_withinDistanceThreshold_correctionDone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 2;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final StringCorrectionEngine correctionEngine \u003d new StringCorrectionEngine(OPTIONS, distanceThreshold);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String uncorrectedInput \u003d \"nrw\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String expectedCorrectedItem \u003d \"new\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectedStatus \u003d CorrectionStatus.CORRECTED;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cString\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectedStatus, expectedCorrectedItem);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_exceedDistanceThreshold_correctionFailed() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final StringCorrectionEngine correctionEngine \u003d new StringCorrectionEngine(OPTIONS, distanceThreshold);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String uncorrectedInput \u003d \"opne\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectedStatus \u003d CorrectionStatus.FAILED;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cString\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e(expectedCorrectedStatus);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void correct_exactlyMatchOption_noCorrection() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int distanceThreshold \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final StringCorrectionEngine correctionEngine \u003d new StringCorrectionEngine(OPTIONS, distanceThreshold);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String uncorrectedInput \u003d \"help\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String expectedCorrectedItem \u003d \"help\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionStatus expectedCorrectionStatus \u003d CorrectionStatus.UNCHANGED;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final CorrectionResult\u003cString\u003e expectedCorrectionResult \u003d new CorrectionResult\u003c\u003e("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "                expectedCorrectionStatus, expectedCorrectedItem);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        CorrectionResult\u003cString\u003e correctionResult \u003d correctionEngine.correct(uncorrectedInput);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedCorrectionResult, correctionResult);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 73
    }
  },
  {
    "path": "src/test/java/com/notably/logic/correction/distance/LevenshteinDistanceCalculatorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.correction.distance;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class LevenshteinDistanceCalculatorTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    private static final LevenshteinDistanceCalculator calculator \u003d new LevenshteinDistanceCalculator();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void calculateDistance() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String first \u003d \"intention\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final String second \u003d \"execution\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        final int expectedDistance \u003d 8;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        int distance \u003d calculator.calculateDistance(first, second);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        assertEquals(expectedDistance, distance);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 21
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/AddressBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(ParseException.class, \"MESSAGE_INVALID_COMMAND_FORMAT\", ()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "johannagwan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertThrows(ParseException.class, \"MESSAGE_UNKNOWN_COMMAND\", () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 12,
      "kevinputera": 7,
      "-": 44,
      "ljiazh3ng": 2
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "import static com.notably.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "johannagwan"
        },
        "content": "        assertParseFailure(parser, \"a\", \"MESSAGE_INVALID_COMMAND_FORMAT\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "johannagwan": 2,
      "kevinputera": 4,
      "-": 25
    }
  },
  {
    "path": "src/test/java/com/notably/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//TODO: To be enabled or changed when refactoring is completed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//package com.notably.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//public class EditCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // no index specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // no field specified"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // no index and no field specified"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // negative index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // zero index"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // no other valid values specified"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 105
    }
  },
  {
    "path": "src/test/java/com/notably/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//TODO: To be enabled or changed when refactoring is completed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//package com.notably.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//public class ModelManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 89
    }
  },
  {
    "path": "src/test/java/com/notably/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/com/notably/model/block/BodyTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class BodyTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Body(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void isValidBody() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Null body"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Body.isValidBody(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Invalid body"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Body.isValidBody(\" \")); //Single whitespace character"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Body.isValidBody(\"     \")); //Multiple whitespace character"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // TODO: By v1.3, identify any narrowing scopes for Body content, if body is to contain markdown"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Valid body"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Body.isValidBody(\"\")); // Empty body (for Body initialization without content)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Body.isValidBody(\"01032020\")); // Numbers only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Body.isValidBody(\"This is \")); // Letters only (Upper and lower case)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Body.isValidBody(\"lecture 2 begins with 4 examples\")); // Alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Body.isValidBody(\"  Today is another day\")); // Leading whitespace"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Body.isValidBody(\"Lorem ipsum dolor sit amet, consectetur 44 adipiscing elit, sed do \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "            + \"eiusmod! Tempor \u0026 incididunt ut labore et aliqua.\")); // Long body with non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 35
    }
  },
  {
    "path": "src/test/java/com/notably/model/block/TitleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "package com.notably.model.block;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "public class TitleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void constructor_invalidTitle_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Null title"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Invalid title"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // Empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // Spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\" Week 2 Lecture\")); // Leading whitespace"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertFalse(Title.isValidTitle(\"Week 2: Lecture\")); // Contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        // Valid title"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"25\")); // Numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"weekly notes\")); // Letters only (and non-leading whitespace)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"lecture 2\")); // Alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"Lecture Week 2\")); // With uppercase characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "        assertTrue(Title.isValidTitle(\"2018 Year 1 Semester 1 CS2103 Week 2 Lecture Notes\")); // Long title"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "firzanarmani"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "firzanarmani": 40
    }
  },
  {
    "path": "src/test/java/com/notably/model/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/com/notably/storage/JsonAdaptedPersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 52,
      "ljiazh3ng": 11
    }
  },
  {
    "path": "src/test/java/com/notably/storage/JsonAddressBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//TODO: To be enabled or changed when refactoring is completed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//package com.notably.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                : null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 86
    }
  },
  {
    "path": "src/test/java/com/notably/storage/JsonSerializableAddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//TODO: To be enabled or changed when refactoring is completed"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//package com.notably.storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//import com.notably.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ljiazh3ng": 45
    }
  },
  {
    "path": "src/test/java/com/notably/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 5,
      "-": 118
    }
  },
  {
    "path": "src/test/java/com/notably/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 58,
      "ljiazh3ng": 1
    }
  },
  {
    "path": "src/test/java/com/notably/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/com/notably/testutil/ModelStubBase.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.path.AbsolutePath;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.Block;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.BlockTree;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.block.Body;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.suggestion.SuggestionItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import javafx.beans.property.Property;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * Base {@link Model} stub that overrides all methods from {@link Model}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " * to throw {@link UnsupportedOperationException}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kevinputera"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "public class ModelStubBase implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void hasPerson(Object person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void deletePerson(Object target) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void addPerson(Object person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void setPerson(Object target, Object editedPerson) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ObservableList\u003cObject\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cObject\u003e predicate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public ObservableList\u003cSuggestionItem\u003e getSuggestions() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void setSuggestions(List\u003cSuggestionItem\u003e suggestions) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Property\u003cOptional\u003cString\u003e\u003e responseTextProperty() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void setResponseText(String responseText) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void clearResponseText() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void clearSuggestions() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public StringProperty inputProperty() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void setInput(String input) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public BlockTree getBlockTree() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public AbsolutePath getCurrentlyOpenPath() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public Property\u003cAbsolutePath\u003e getCurrentlyOpenPathProperty() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public boolean hasPath(AbsolutePath p) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void setCurrentlyOpenBlock(AbsolutePath p) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void addBlockToCurrentPath(Block b) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void removeBlock(AbsolutePath p) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    public void updateCurrentlyOpenBlockBody(Body newBody) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "        throw new UnsupportedOperationException();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kevinputera"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kevinputera": 182
    }
  },
  {
    "path": "src/test/java/com/notably/testutil/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/com/notably/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ljiazh3ng"
        },
        "content": "    public static void getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 3,
      "-": 49,
      "ljiazh3ng": 1
    }
  },
  {
    "path": "src/test/java/com/notably/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 2,
      "-": 10
    }
  },
  {
    "path": "src/test/java/com/notably/view/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/com/notably/view/ViewPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "package com.notably.view;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import static com.notably.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "import com.notably.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "public class ViewPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"ViewPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"ViewPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"ViewPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"ViewPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestViewPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestViewPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestViewPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestViewPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "     * ViewPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "    private static class TestViewPart\u003cT\u003e extends ViewPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TestViewPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TestViewPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TestViewPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "HemanshuGandhi"
        },
        "content": "        TestViewPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "HemanshuGandhi": 25,
      "kevinputera": 3,
      "-": 87
    }
  },
  {
    "path": "src/test/resources/view/ViewPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003c?import com.notably.view.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/ViewPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kevinputera"
        },
        "content": "\u003cfx:root type\u003d\"com.notably.view.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kevinputera": 1,
      "-": 5
    }
  }
]
