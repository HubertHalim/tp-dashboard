[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "    // archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "    archiveName \u003d \u0027flashspeed.jar\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            linkcss: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            experimental: true,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            sectlinks: true,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amrl"
        },
        "content": "            // \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \u0027site-name\u0027: \u0027FlashSpeed\u0027,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amrl"
        },
        "content": "            // \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W17-1/main\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 6,
      "amrl": 6,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.storage.LibraryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.storage.JsonLibraryStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 1, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing FlashSpeed ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "        LibraryStorage libraryStorage \u003d new JsonLibraryStorage(userPrefs.getLibraryFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "        storage \u003d new StorageManager(libraryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s library and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The data from the sample library will be used instead if {@code storage}\u0027s library is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * or an empty library will be used instead if errors occur when reading {@code storage}\u0027s library."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Optional\u003cReadOnlyLibrary\u003e libraryOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ReadOnlyLibrary initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "            libraryOptional \u003d storage.readLibrary();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (!libraryOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample library\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "            initialData \u003d libraryOptional.orElseGet(SampleDataUtil::getSampleLibrary);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty library\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            initialData \u003d new Library();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty library\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            initialData \u003d new Library();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amrl"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty library\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amrl"
        },
        "content": "        logger.info(\"Starting FlashSpeed \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "amrl"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping FlashSpeed ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 5,
      "amrl": 20,
      "-": 159
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String LOG_FILE \u003d \"flashspeed.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command!\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_INPUT_CONTAINS_COLON \u003d \"Card face value(s) should not contain colon(s)!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_INVALID_DECK_DISPLAYED_INDEX \u003d \"The deck index provided is invalid!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_INVALID_CARD_DISPLAYED_INDEX \u003d \"The card index provided is invalid!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_DECKS_LISTED_OVERVIEW \u003d \"%1$d decks listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_NOT_IN_DECK_VIEW \u003d \"Currently not in a deck!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_NOT_IN_LIBRARY_VIEW \u003d \"Currently not in library mode!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 2,
      "amrl": 5,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": " * API of the Logic component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of decks. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Get the selected deck"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Deck getCurrentDeck();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cCard\u003e playingCardProperty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cMode\u003e currentModeProperty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cBoolean\u003e flippedProperty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the mode of the model manager."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Mode getMode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setSelectedDeck(Deck deck);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 1,
      "kschiew": 1,
      "lacedaemon98": 27,
      "amrl": 5,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.MasterParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final MasterParser masterParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.masterParser \u003d new MasterParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        command \u003d masterParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "            storage.saveLibrary(model.getLibrary());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return model.getLibrary();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return model.getFilteredDeckList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return model.getLibraryFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.getCurrentDeck();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.selectedDeckProperty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.playingCardProperty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cMode\u003e currentModeProperty() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.currentModeProperty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.flippedProperty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.cardAttemptedProperty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.cardRemainingProperty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        model.setSelectedDeck(deck);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return model.getMode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 4,
      "kschiew": 3,
      "lacedaemon98": 48,
      "amrl": 7,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /** The play mode is stopped */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final boolean stop;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean stop, Statistics statistics) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this.stop \u003d stop;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this(feedbackToUser, false, false, false, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public boolean isStop() {return stop; }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public Statistics getStatistics(){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, stop, statistics);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 18,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting FlashSpeed...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 1,
      "amrl": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Shows full help instructions for every command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false, null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 1,
      "amrl": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ResetLibraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Clears the library."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class ResetLibraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reset\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Library has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot reset library in the play view\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.PLAY) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        model.setLibrary(new Library());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        model.returnToLibrary();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 12,
      "kschiew": 3,
      "ncslzh": 1,
      "lacedaemon98": 1,
      "amrl": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ReturnToLibraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.util.View;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Returns to the library view."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class ReturnToLibraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"return\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Returns to library view.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Returned to library view.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_ALREADY_IN_LIBRARY \u003d \"Already in library view!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot return to library in the play view\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.PLAY) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (model.getView().equals(View.LIBRARY)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_IN_LIBRARY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        model.returnToLibrary();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof ReturnToLibraryCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 5,
      "kschiew": 33,
      "amrl": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/AddCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.util.View;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Adds a card to the deck."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class AddCardCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \": Adds a card to the current deck.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"FRONT:BACK\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"ありがとう:thanks\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New card added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CARD \u003d \"This card already exists in the deck\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot add card in the play view\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private final Card toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Card}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public AddCardCommand(Card card) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "        toAdd \u003d card;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.PLAY) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (model.getView() !\u003d View.DECK) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_IN_DECK_VIEW);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.hasCard(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CARD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        model.addCard(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof AddCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCardCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 9,
      "ncslzh": 14,
      "kschiew": 3,
      "lacedaemon98": 1,
      "amrl": 11,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/DeleteCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.util.View;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Deletes a card from the current deck."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class DeleteCardCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Deletes a card from the current deck.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deleted Card: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot delete card in the play view\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DeleteCardCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.PLAY) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (model.getView() !\u003d View.DECK) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_IN_DECK_VIEW);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getCurrentDeck().getSize()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Card cardToDelete \u003d model.getCard(targetIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        model.deleteCard(cardToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, cardToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof DeleteCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 8,
      "ncslzh": 10,
      "kschiew": 5,
      "amrl": 15,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cardcommands/EditCardCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.logic.commands.cardcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.util.View;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Edits a card in the current deck."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class EditCardCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \": Edits a card in the current deck.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Either FRONT or BACK can be omitted.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"INDEX (must be a positive integer) FRONT:BACK\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"or \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"INDEX (must be a positive integer) :BACK\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"or \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"INDEX (must be a positive integer) FRONT:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Example 1: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"ありがとう:thanks\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Example 2: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"ありがとう:\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Example 3: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \":thanks\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Card edited: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot edit card in the play view\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final FrontFace front;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final BackFace back;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private Card editedCard;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public EditCardCommand(Index targetIndex, FrontFace front, BackFace back) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.front \u003d front;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.back \u003d back;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.PLAY) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (model.getView() !\u003d View.DECK) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NOT_IN_DECK_VIEW);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getCurrentDeck().getSize()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CARD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Card oldCard \u003d model.getCard(targetIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (front.toString().isBlank()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            FrontFace newFront \u003d new FrontFace(oldCard.getFrontFace().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            editedCard \u003d new Card(newFront, back);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } else if (back.toString().isBlank()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            BackFace newBack \u003d new BackFace(oldCard.getBackFace().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            editedCard \u003d new Card(front, newBack);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            editedCard \u003d new Card(front, back);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "        model.replaceCard(oldCard, editedCard);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, editedCard));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "                || (other instanceof EditCardCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((EditCardCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 6,
      "ncslzh": 34,
      "kschiew": 2,
      "amrl": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deckcommands/CreateDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * Creates a deck in the library."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CreateDeckCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Creates a deck in the library.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"NAME\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Japanese 2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New deck added: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck already exists in the library.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot create deck in the play view\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final Deck toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Creates an CreateDeckCommand to add the specified {@code Deck}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CreateDeckCommand(Deck deck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        toAdd \u003d deck;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.PLAY) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.hasDeck(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        model.createDeck(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof CreateDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CreateDeckCommand) other).toAdd));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 11,
      "ncslzh": 8,
      "kschiew": 12,
      "amrl": 3,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deckcommands/RemoveDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.util.View;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Removes a deck from the library."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class RemoveDeckCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Removes a deck from the library.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \"Example:\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_DELETE_DECK_SUCCESS \u003d \"Deleted Deck: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot remove deck in the play view\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public RemoveDeckCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.PLAY) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck deckToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        model.deleteDeck(deckToDelete);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DECK_SUCCESS, deckToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof RemoveDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((RemoveDeckCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 19,
      "ncslzh": 10,
      "kschiew": 4,
      "amrl": 5,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deckcommands/RenameDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_DECKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.util.View;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Renames the name of a deck in the library."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class RenameDeckCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"rename\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Renames the name of a deck in the library.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Existing name will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"NAME \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Japanese 2\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_RENAME_DECK_SUCCESS \u003d \"Edited Deck: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"New deck name must be provided.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"This deck name already exists in the library.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot rename deck in the play view\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @param index of the deck in the library list to edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @param name new name to edit the deck with"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public RenameDeckCommand(Index index, Name name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireAllNonNull(index, name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    // need to remake this method"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.PLAY) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        boolean result \u003d model.renameDeck(index, name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (!result) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck editedDeck \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "        model.updateFilteredDeckList(PREDICATE_SHOW_ALL_DECKS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_RENAME_DECK_SUCCESS, editedDeck));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof RenameDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 index.equals(((RenameDeckCommand) other).index)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 index.equals(((RenameDeckCommand) other).name));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 8,
      "ncslzh": 67,
      "amrl": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deckcommands/SelectDeckCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.commands.deckcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Selects a deck in the library."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class SelectDeckCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Selects a deck in the library.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"Example:\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deck selected: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_IN_VIEW_MODE \u003d \"Cannot select deck in the play view\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final Index targetIdx;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Deck}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public SelectDeckCommand(Index targetIdx) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(targetIdx);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.targetIdx \u003d targetIdx;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.PLAY) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_IN_VIEW_MODE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        List\u003cDeck\u003e lastShownList \u003d model.getFilteredDeckList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (targetIdx.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DECK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        model.selectDeck(targetIdx);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Deck selectedDeck \u003d model.getDeck(targetIdx);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, selectedDeck));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof SelectDeckCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \u0026\u0026 targetIdx.equals(((SelectDeckCommand) other).targetIdx));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 5,
      "ncslzh": 10,
      "kschiew": 39,
      "lacedaemon98": 1,
      "amrl": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Represents an error which occurs during execution of a command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/AnswerNoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class AnswerNoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"no\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \": Answer no if you have the wrong answer.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Oops, you got it wrong!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_PLAY_MODE \u003d \"Cannot answer card in non-play view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_FLIPPED \u003d \"Card has not flipped yet!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_END_GAME \u003d \"Session completed!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Statistics statistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public AnswerNoCommand() { }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.VIEW) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_PLAY_MODE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!model.getGame().isFlipped()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_FLIPPED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Card nextCard \u003d model.answerNo();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (nextCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statistics \u003d model.stop();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_END_GAME), false, false, true, statistics);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                || (other instanceof FlipCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 41,
      "lacedaemon98": 5,
      "amrl": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/AnswerYesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class AnswerYesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"yes\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \": Answer yes if you have the correct answer.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Nice, you got it right!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_PLAY_MODE \u003d \"Cannot answer card in non-play view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_FLIPPED \u003d \"Card has not flipped yet!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_END_GAME \u003d \"Session completed!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Statistics statistics;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public AnswerYesCommand() { }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.VIEW) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_PLAY_MODE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!model.getGame().isFlipped()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_FLIPPED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Card nextCard \u003d model.answerYes();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (nextCard \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statistics \u003d model.stop();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_END_GAME), false, false, true, statistics);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                || (other instanceof FlipCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 39,
      "ncslzh": 2,
      "lacedaemon98": 5,
      "amrl": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/FlipCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class FlipCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"flip\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Flips the card to see the back face.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Did you get your answer right?\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_PLAY_MODE \u003d \"Cannot flip card in non-play view\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_ALREADY_FLIPPED \u003d \"Card already flipped!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private BackFace backFace;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Creates an FlipCommand with a specific {@code Deck}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public FlipCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.backFace \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.VIEW) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_PLAY_MODE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        BackFace backFace \u003d model.flip();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (backFace \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_FLIPPED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                || (other instanceof FlipCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                \u0026\u0026 backFace.equals(((FlipCommand) other).backFace));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 45,
      "ncslzh": 2,
      "amrl": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/PlayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class PlayCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"play\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "            + \": Plays a review session with a deck.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \"Example:\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Selected deck: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_DECK_NOT_FOUND \u003d \"Deck not found in the library!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_NO_CARD \u003d \"Oops, there are no cards in the selected deck.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_ALREADY_PLAY \u003d \"You should complete or end this session before playing a new one.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private final Index targetIdx;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Creates an PlayCommand with a specific {@code Deck}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public PlayCommand(Index targetIdx) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(targetIdx);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.targetIdx \u003d targetIdx;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck deck \u003d model.getDeck(targetIdx);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getGame() !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_ALREADY_PLAY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d model.play(targetIdx);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (card \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_DECK_NOT_FOUND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (card.getFrontFace() \u003d\u003d null \u0026\u0026 card.getBackFace() \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_CARD));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, deck));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                || (other instanceof PlayCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                \u0026\u0026 targetIdx.equals(((PlayCommand) other).targetIdx));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 46,
      "ncslzh": 2,
      "lacedaemon98": 7,
      "amrl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/gamecommands/StopCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.logic.commands.gamecommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class StopCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stop\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            + \": Stop the current game session.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Session stopped!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public static final String MESSAGE_NOT_PLAY_MODE \u003d \"You have not started a new game session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    Statistics statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Creates an StopCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public StopCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (model.getMode() \u003d\u003d Mode.VIEW) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_PLAY_MODE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        statistics \u003d model.stop();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //return new CommandResult(String.format(MESSAGE_SUCCESS, statistics));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS), false, false, true, statistics);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                || (other instanceof StopCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                \u0026\u0026 statistics.equals(((StopCommand) other).statistics));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 42,
      "lacedaemon98": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MasterParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.ResetLibraryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.ReturnToLibraryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.cardcommands.AddCardCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.cardcommands.DeleteCardCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCardCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.deckcommands.CreateDeckCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.deckcommands.RemoveDeckCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.deckcommands.RenameDeckCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.deckcommands.SelectDeckCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.gamecommands.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.cardparsers.AddCardCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.cardparsers.DeleteCardCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.cardparsers.EditCardCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.deckparsers.CreateDeckCommandParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.deckparsers.RemoveDeckCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.deckparsers.RenameDeckCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.deckparsers.SelectDeckCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.parser.gameparsers.PlayCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parses input for FlashSpeed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class MasterParser {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // to handle get of commandWord and args"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        /* List of commands:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - CreateDeck"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - RemoveDeck"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - RenameDeck"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - SelectDeck"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - AddCard"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - DeleteCard"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - EditCard"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Game:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "          - Play"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "          - Flip"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "          - AnswerYes"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "          - AnswerNO"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "          - Stop"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        General:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - Help"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - Exit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "          - ReturnToLibrary"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            // Deck functions"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case CreateDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new CreateDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case RemoveDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new RemoveDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case RenameDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new RenameDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case SelectDeckCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new SelectDeckCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            // Card functions"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case AddCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new AddCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case DeleteCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new DeleteCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case EditCardCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new EditCardCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            // Game functions"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            case PlayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                return new PlayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            case FlipCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                return new FlipCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            case AnswerYesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                return new AnswerYesCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            case AnswerNoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                return new AnswerNoCommand();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            case StopCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                return new StopCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            // General"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case ResetLibraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new ResetLibraryCommand();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            case ReturnToLibraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                return new ReturnToLibraryCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 23,
      "ncslzh": 114,
      "amrl": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String strippedName \u003d name.strip();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!Name.isValidName(strippedName)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new Name(strippedName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 1,
      "amrl": 5,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cardparsers/AddCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INPUT_CONTAINS_COLON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.cardcommands.AddCardCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parses input arguments and creates a new AddCardCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class AddCardCommandParser implements Parser\u003cAddCardCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets pattern FRONT:BACK, spaces before and after \":\" are handled."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final Pattern COMMAND_FORMAT \u003d Pattern.compile("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            \"(?\u003cfront\u003e.*)\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            \"(\\\\s*[\\u003a\\u02d0\\u02d1\\u02f8\\u05c3\\u2236\\u2360\\ua789\\ufe13\\uff1a\\ufe55]\\\\s*)\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            \"(?\u003cback\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCardCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * and returns an AddCardCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public AddCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        final Matcher matcher \u003d COMMAND_FORMAT.matcher(args.strip());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String frontValue \u003d matcher.group(\"front\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String backValue \u003d matcher.group(\"back\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (frontValue.isBlank() || backValue.isBlank()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (frontValue.contains(\":\") || backValue.contains(\":\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INPUT_CONTAINS_COLON, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "        FrontFace front \u003d new FrontFace(frontValue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "        BackFace back  \u003d new BackFace(backValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Card card \u003d new Card(front, back);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new AddCardCommand(card);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 22,
      "amrl": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cardparsers/DeleteCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.cardcommands.DeleteCardCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parses input arguments and creates a new DeleteCardCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DeleteCardCommandParser implements Parser\u003cDeleteCardCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCardCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * and returns a DeleteCardCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DeleteCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return new DeleteCardCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 3,
      "kschiew": 12,
      "amrl": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cardparsers/EditCardCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INPUT_CONTAINS_COLON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCardCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parses input arguments and creates a new EditCardCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class EditCardCommandParser implements Parser\u003cEditCardCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets pattern INDEX FRONT:BACK, spaces before and after \":\" is handled."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Also, can choose whether to allow no space between INDEX and FRONT:BACK."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Allows for fast edit (INDEX :BACK) or (INDEX FRONT:)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cindex\u003e\\\\d+)(\\\\s+)(?\u003cfront\u003e.*)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"(\\\\s*[\\u003a\\u02d0\\u02d1\\u02f8\\u05c3\\u2236\\u2360\\ua789\\ufe13\\uff1a\\ufe55]\\\\s*)\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            + \"(?\u003cback\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCardCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * and returns a DeleteCardCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public EditCardCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        final Matcher matcher \u003d COMMAND_FORMAT.matcher(args.strip());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String indexStr \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String frontValue \u003d matcher.group(\"front\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String backValue \u003d matcher.group(\"back\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (frontValue.isBlank() \u0026\u0026 backValue.isBlank()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (frontValue.contains(\":\") || backValue.contains(\":\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INPUT_CONTAINS_COLON, EditCardCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        FrontFace front \u003d new FrontFace(frontValue);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        BackFace back  \u003d new BackFace(backValue);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(indexStr);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new EditCardCommand(index, front, back);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 42,
      "amrl": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deckparsers/CreateDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.deckcommands.CreateDeckCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Parses input arguments and creates a new CreateDeckCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CreateDeckCommandParser implements Parser\u003cCreateDeckCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateDeckCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * and returns an CreateDeckCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CreateDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "        String strippedArgs \u003d args.strip();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (strippedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Name name \u003d ParserUtil.parseName(strippedArgs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Deck deck \u003d new Deck(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new CreateDeckCommand(deck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 12,
      "kschiew": 18,
      "amrl": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deckparsers/RemoveDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.deckcommands.RemoveDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Parses input arguments and creates a new RemoveDeckCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class RemoveDeckCommandParser implements Parser\u003cRemoveDeckCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemoveDeckCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * and returns an RemoveDeckCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public RemoveDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new RemoveDeckCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 17,
      "kschiew": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deckparsers/RenameDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.deckcommands.RenameDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Parses input arguments and creates a new RenameDeckCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class RenameDeckCommandParser implements Parser\u003cRenameDeckCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Gets pattern INDEX NAME, spaces between INDEX and NAME is handled."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003cindex\u003e\\\\d+)(\\\\s+)(?\u003cname\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RenameDeckCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * and returns an RenameDeckCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public RenameDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final Matcher matcher \u003d COMMAND_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String indexStr \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final String newName \u003d matcher.group(\"name\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (newName.isBlank()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Name name \u003d new Name(newName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(indexStr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new RenameDeckCommand(index, name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 54,
      "amrl": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deckparsers/SelectDeckCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.commands.deckcommands.SelectDeckCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class SelectDeckCommandParser implements Parser\u003cSelectDeckCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectDeckCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * and returns an SelectDeckCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public SelectDeckCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return new SelectDeckCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 14,
      "kschiew": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/gameparsers/PlayCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.logic.parser.gameparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.gamecommands.PlayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * Parses input arguments and creates a new PlayCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class PlayCommandParser implements Parser\u003cPlayCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PlayCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * and returns an PlayCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public PlayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return new PlayCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlayCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 11,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/GameManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * Represents the model of the game session."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class GameManager {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private Random randGen;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private boolean flipped;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private ObservableList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private int deckSize;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private int currCardIdx;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private int cardAttempted;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private int cardRemaining;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Initializes a GameManager with the given deck."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public GameManager(Deck deck) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        randGen \u003d new Random();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.flipped \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.cards \u003d deck.asObservableList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.statistics \u003d new Statistics(cards);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.deckSize \u003d this.cards.size();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.currCardIdx \u003d randGen.nextInt(this.deckSize);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this.cardAttempted \u003d 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public boolean isFlipped() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.flipped;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Flips the card to the back face."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return true if the card has not been flipped, false otherwise"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public BackFace flip() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (flipped) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        flipped \u003d true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return cards.get(currCardIdx).getBackFace();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Returns a random next card after user answers Yes."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Removes the correct card from the deck."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Card answerYes() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        statistics.incrementCorrectAttempt(cards.get(currCardIdx));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        cards.remove(currCardIdx);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.deckSize -\u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        flipped \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (this.deckSize \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.currCardIdx \u003d randGen.nextInt(this.deckSize);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardAttempted++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return cards.get(currCardIdx);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the next card after user answers No."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Adds a duplicate wrong card to the deck."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Card answerNo() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        boolean hasTwoCards \u003d statistics.incrementWrongAttempt(cards.get(currCardIdx));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!hasTwoCards) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            Card currCard \u003d cards.get(currCardIdx);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cards.add(currCard);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            this.deckSize +\u003d 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        flipped \u003d false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.currCardIdx \u003d randGen.nextInt(this.deckSize);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardAttempted++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return cards.get(currCardIdx);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the statistics report when user stops the sessions."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Statistics stop() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.statistics;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public int getCurrCardIdx() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.currCardIdx;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public int getCardAttempted() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return cardAttempted;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public int getDeckSize() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return deckSize;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the card list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public ObservableList\u003cCard\u003e getCards() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.cards;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 61,
      "ncslzh": 33,
      "kschiew": 2,
      "lacedaemon98": 14,
      "amrl": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Library.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.UniqueDeckList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Wraps all data at the library level."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Duplicates are not allowed (by .isSameDeck comparison)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class Library implements ReadOnlyLibrary {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final UniqueDeckList decks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        decks \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Library() {}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Creates an Library using the Decks in {@code toBeCopied}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Library(ReadOnlyLibrary toBeCopied) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the contents of the deck list with {@code decks}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.decks.setDecks(decks);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Resets the existing data of this {@code Library} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void resetData(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        setDecks(newData.getDeckList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "    //// deck-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the Library."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return decks.contains(deck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Deck getDeck(Index index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        int idxInInt \u003d index.getZeroBased();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return decks.get(idxInInt);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Adds a deck to the library."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The deck must not already exist in the library."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void addDeck(Deck p) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        decks.add(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void createDeck(Deck p) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        decks.add(p);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Replaces the given deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the library."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireNonNull(editedDeck);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amrl"
        },
        "content": "        decks.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Removes {@code key} from this {@code Library}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * {@code key} must exist in the library ."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void deleteDeck(Deck key) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        decks.remove(key);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amrl"
        },
        "content": "    // TODO: refine"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return decks.asUnmodifiableObservableList().size() + \" decks\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public ObservableList\u003cDeck\u003e getDeckList() { // remove the code at the end"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return decks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof Library // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \u0026\u0026 decks.equals(((Library) other).decks));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return decks.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return decks.getSize();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 22,
      "kschiew": 24,
      "ncslzh": 1,
      "amrl": 15,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.util.View;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Predicate\u003cDeck\u003e PREDICATE_SHOW_ALL_DECKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Sets the user prefs\u0027 library file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void setLibraryFilePath(Path libraryFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces library data with the data in {@code library}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void setLibrary(ReadOnlyLibrary library);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /** Returns the library */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    ReadOnlyLibrary getLibrary();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns true if a deck with the same identity as {@code deck} exists in the library."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    boolean hasDeck(Deck deck);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Deletes the given deck."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The deck must exist in the library."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    void deleteDeck(Deck target);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Adds the given deck."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * {@code deck} must not already exist in the library."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    void createDeck(Deck deck);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Selects a deck."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void selectDeck(Index targetIdx);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the current deck;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    Deck getCurrentDeck();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the deck at index of library;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Deck getDeck(Index index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrl"
        },
        "content": "     /** Renames the deck at index in library."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "      *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrl"
        },
        "content": "      * @return true if there is no deck with the same name, false otherwise"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "      */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    boolean renameDeck(Index targetIndex, Name name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the readonly property."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the readonly property."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cMode\u003e currentModeProperty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the readonly property."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cCard\u003e playingCardProperty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the readonly property."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cBoolean\u003e flippedProperty();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the readonly property."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns the readonly property."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Brings the user from deck view to library view."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    void returnToLibrary();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Checks if a card with the same identity as {@code card} exists in the deck."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return true if {@code card} exists in the deck"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    boolean hasCard(Card card);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Deletes the given card."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * {@code target} must exist in the deck."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    void deleteCard(Card target);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Adds the given card to the deck."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * {@code card} must not already exist in the deck."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    void addCard(Card card);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the given old card with the new card."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * {@code target} must exist in the deck."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * {@code card} must not already exist in the deck."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void replaceCard(Card target, Card card);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Gets the current view of the model."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return The current view of the model."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amrl"
        },
        "content": "    View getView();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the given deck {@code target} with {@code editedDeck}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * {@code target} must exist in the library."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the library."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void setDeck(Deck target, Deck editedDeck);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered deck list. */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    ObservableList\u003cDeck\u003e getFilteredDeckList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /** Returns an unmodifiable view of the filtered card list. */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    ObservableList\u003cCard\u003e getFilteredCardList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Updates the filter of the filtered deck list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Sets the selected deck in the filtered deck list."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setSelectedDeck(Deck deck);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setFlipped(Boolean value);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setCardAttempted(int value);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setCardRemaining(int value);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setCurrentMode(Mode mode);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    void setPlayingCard(Card card);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    Card getCard(Index index);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Changes the mode to play mode."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Card play(Index index);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Flips the card to the back face."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return true if the card has not been flipped, false otherwise"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    BackFace flip();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the next card after user answers Yes."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    Card answerYes();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the statistics report when user stop the game session."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return the statistics object."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    Statistics stop();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "amrl"
        },
        "content": "    GameManager getGame();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the next card after user answers No."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    Card answerNo();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the current mode of the model"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    Mode getMode();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 65,
      "kschiew": 17,
      "lacedaemon98": 44,
      "amrl": 53,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.util.View;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Represents the in-memory model of the library data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final Library library;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final FilteredList\u003cDeck\u003e filteredDecks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private View view;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private Mode mode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private Optional\u003cIndex\u003e deckIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cDeck\u003e selectedDeck \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cMode\u003e currentMode \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cCard\u003e playingCard \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cBoolean\u003e flipped \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cInteger\u003e cardAttempted \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final SimpleObjectProperty\u003cInteger\u003e cardRemaining \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private GameManager game;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Initializes a ModelManager with the given library and userPrefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public ModelManager(ReadOnlyLibrary library, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireAllNonNull(library, userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "        logger.fine(\"Initializing with library: \" + library + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.library \u003d new Library(library);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        filteredDecks \u003d new FilteredList\u003c\u003e(this.library.getDeckList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.deckIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.view \u003d View.LIBRARY; // 1st view will always be in library"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.mode \u003d Mode.VIEW; // 1st mode will always be in view mode"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCurrentMode(Mode.VIEW);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.game \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this(new Library(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Gets the current view of the model."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return The current view of the model."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public View getView() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return view;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Optional\u003cIndex\u003e getDeckIndex() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.deckIndex;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cDeck\u003e selectedDeckProperty() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return selectedDeck;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cMode\u003e currentModeProperty() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return currentMode;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cCard\u003e playingCardProperty() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return playingCard;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cBoolean\u003e flippedProperty() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return flipped;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e cardAttemptedProperty() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return cardAttempted;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public ReadOnlyProperty\u003cInteger\u003e cardRemainingProperty() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return cardRemaining;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return userPrefs.getLibraryFilePath();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(libraryFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amrl"
        },
        "content": "        userPrefs.setLibraryFilePath(libraryFilePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amrl"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Library \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void setLibrary(ReadOnlyLibrary library) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.library.resetData(library);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean hasDeck(Deck deck) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(deck);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return library.hasDeck(deck);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void deleteDeck(Deck target) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        library.deleteDeck(target);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (library.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "amrl"
        },
        "content": "            returnToLibrary();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void createDeck(Deck deck) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        library.createDeck(deck);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Index currIndex \u003d Index.fromZeroBased(library.getDeckList().indexOf(deck));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        selectDeck(currIndex);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setSelectedDeck(deck);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void selectDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        deckIndex \u003d Optional.of(targetIdx);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.view \u003d View.DECK;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amrl"
        },
        "content": "        setSelectedDeck(library.getDeck(targetIdx));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean renameDeck(Index targetIndex, Name name) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck deck \u003d library.getDeck(targetIndex);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck temp \u003d new Deck(name);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (library.hasDeck(temp)) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            deck.setName(name);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            selectDeck(targetIndex);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            returnToLibrary();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            setSelectedDeck(deck);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Deck getCurrentDeck() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (deckIndex.equals(Optional.empty())) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck deck \u003d library.getDeck(deckIndex.get());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setSelectedDeck(deck);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setSelectedDeck(Deck deck) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (deck !\u003d null) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            selectedDeck.setValue(deck);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            Index currIndex \u003d Index.fromZeroBased(library.getDeckList().indexOf(deck));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            deckIndex \u003d Optional.of(currIndex);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            this.view \u003d View.DECK;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setFlipped(Boolean value) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        flipped.setValue(value);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setCardAttempted(int value) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardAttempted.setValue(value);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setCardRemaining(int value) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardRemaining.setValue(value);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setPlayingCard(Card card) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        playingCard.setValue(card);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setCurrentMode(Mode mode) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        currentMode.setValue(mode);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Deck getDeck(Index targetIdx) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return library.getDeck(targetIdx);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void returnToLibrary() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "amrl"
        },
        "content": "        selectedDeck.setValue(null);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        deckIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.view \u003d View.LIBRARY;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean hasCard(Card card) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d library.getDeck(deckIndex.get());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(card);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return deck.contains(card);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Card getCard(Index index) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return library.getDeck(deckIndex.get()).getCard(index);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void deleteCard(Card cardToDelete) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d library.getDeck(deckIndex.get());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        deck.remove(cardToDelete);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        returnToLibrary();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //setSelectedDeck(null);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        setSelectedDeck(deck);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void addCard(Card card) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d library.getDeck(deckIndex.get());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        deck.add(card);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //setSelectedDeck(null);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        returnToLibrary();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setSelectedDeck(deck);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void replaceCard(Card target, Card card) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Deck deck \u003d library.getDeck(deckIndex.get());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deck.replace(target, card);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        // refresh UI view"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //setSelectedDeck(null);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        returnToLibrary();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        setSelectedDeck(deck);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "amrl"
        },
        "content": "        library.setDeck(target, editedDeck);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "amrl"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Deck List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Deck} backed by the internal list."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public ObservableList\u003cDeck\u003e getFilteredDeckList() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return filteredDecks;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Card} backed by the internal list."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public ObservableList\u003cCard\u003e getFilteredCardList() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return filteredDecks.get(deckIndex.get().getZeroBased()).asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void updateFilteredDeckList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        filteredDecks.setPredicate(predicate);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Starts a game session with a given deck index."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @param index index of the deck to play with."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     *"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return a randomly selected card from the deck"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Card play(Index index) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Deck deck \u003d library.getDeck(index);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (deck.asUnmodifiableObservableList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return new Card(null, null);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.game \u003d new GameManager(deck);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.mode \u003d Mode.PLAY;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCurrentMode(Mode.PLAY);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d deck.asUnmodifiableObservableList().get(game.getCurrCardIdx());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setPlayingCard(card);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardAttempted(0);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardRemaining(game.getDeckSize());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setFlipped(false);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Flips the card to the back face."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return true if the card has not been flipped, false otherwise"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public BackFace flip() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setFlipped(true);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.game.flip();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the next card after user answers Yes."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Card answerYes() {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d this.game.answerYes();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (card \u003d\u003d null) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            //Statistics statistics \u003d stop();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setPlayingCard(card);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setFlipped(false);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardAttempted(game.getCardAttempted());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardRemaining(game.getDeckSize());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public GameManager getGame() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return this.game;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns the next card after user answers No."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @return the next card or null if card list is empty"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Card answerNo() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d this.game.answerNo();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (card \u003d\u003d null) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            //Statistics statistics \u003d stop();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setPlayingCard(card);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setFlipped(false);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardAttempted(game.getCardAttempted());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setCardRemaining(game.getDeckSize());"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return card;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Stops the game session."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     *"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return the statistics report."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Statistics stop() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Statistics statistics \u003d this.game.stop();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.game \u003d null;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.mode \u003d Mode.VIEW;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        setCurrentMode(Mode.VIEW);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        setPlayingCard(null);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        returnToLibrary();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.view \u003d View.LIBRARY;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the mode of the model."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * @return the mode of the model."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.mode;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return library.equals(other.library)"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \u0026\u0026 filteredDecks.equals(other.filteredDecks);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 137,
      "kschiew": 55,
      "ncslzh": 15,
      "lacedaemon98": 91,
      "amrl": 48,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyLibrary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Unmodifiable view of a library."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public interface ReadOnlyLibrary {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns an unmodifiable view of the decks list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * This list will not contain any duplicate decks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    ObservableList\u003cDeck\u003e getDeckList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 1,
      "kschiew": 2,
      "amrl": 3,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * Represents statistics report for one game session."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class Statistics {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    // number of correct answers"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private int correctAns;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    // number of wrong answer"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private int wrongAns;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    //Total number of questions played"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private int totalQns;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    // hash map to keep track the number of attempts to get the correct answer for each card"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private HashMap\u003cCard, Integer\u003e totalAttempts;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private HashMap\u003cCard, Integer\u003e correctAttempts;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private HashMap\u003cCard, Integer\u003e wrongAttempts;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private HashMap\u003cCard, Integer\u003e cardTracker;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Statistics(ObservableList\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.correctAns \u003d 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.wrongAns \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.totalQns \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.totalAttempts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.correctAttempts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.wrongAttempts \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.cardTracker \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        // initialize the number of attempt for each card as 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size(); i++) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            totalAttempts.put(cards.get(i), 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            correctAttempts.put(cards.get(i), 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            wrongAttempts.put(cards.get(i), 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardTracker.put(cards.get(i), 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the number of correct answers so far."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public int getCorrectAns() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.correctAns;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the number of incorrect answers so far."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public int getWrongAns() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this.wrongAns;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the total number of cards played so far."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public int getTotalQns() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this.totalQns;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Calculates the current score of the game."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return the current score of the game thus far."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public long getScore() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return Math.round(Double.valueOf(correctAns) / Double.valueOf(totalQns) * 100);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Increments the number of attempts of a certain card."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private void incrementAttempt(Card card) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        totalAttempts.merge(card, 1, Integer::sum);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Increments the number of correct attempts of a certain card."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void incrementCorrectAttempt(Card card) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ++correctAns;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ++totalQns;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        correctAttempts.merge(card, 1, Integer::sum);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        cardTracker.merge(card, -1, Integer::sum);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        incrementAttempt(card);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Increments the number of correct attempts of a certain card."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * @return whether there are 2 cards in the current game"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public boolean incrementWrongAttempt(Card card) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ++wrongAns;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ++totalQns;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        wrongAttempts.merge(card, 1, Integer::sum);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        incrementAttempt(card);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        int numCardsInDeck \u003d cardTracker.get(card);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (numCardsInDeck \u003e 2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            // should never happen, but reset to 2 so no cards can be added."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            numCardsInDeck \u003d 2;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (numCardsInDeck \u003c 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            cardTracker.merge(card, 1, Integer::sum);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        int wrongCounter \u003d 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        String output \u003d \"Cards Attempted: \" + this.totalQns + \"\\n\" +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \"Correct Attempts: \" + this.correctAns + \"\\n\" +"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \"Wrong Attempts: \" + this.wrongAns + \"\\n\" +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                \"Score: \" + String.format(\"%2d\", getScore()) + \"% \\n\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        for (Map.Entry\u003cCard, Integer\u003e entry: wrongAttempts.entrySet()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            if (entry.getValue() \u003e 0) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                wrongCounter++;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (this.totalQns \u003d\u003d 0) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            output +\u003d \"You did not attempt any card!\"+\"\\n\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        else if (wrongCounter \u003e 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            output +\u003d \"Here is a list of cards you guessed incorrectly:\" + \"\\n\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            for (Map.Entry\u003cCard, Integer\u003e entry: wrongAttempts.entrySet()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                if (entry.getValue() \u003e 0) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                    output +\u003d String.format(\"%s : %s (%d %s)\\n\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                            entry.getKey().getFrontFace().getValue(),"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                            entry.getKey().getBackFace().getValue(),"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amrl"
        },
        "content": "                            entry.getValue(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amrl"
        },
        "content": "                            entry.getValue() \u003d\u003d 1 ? \"time\" : \"times\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            output +\u003d \"Congratulations! You got them all correct!\" +\"\\n\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 51,
      "ncslzh": 21,
      "kschiew": 62,
      "lacedaemon98": 20,
      "amrl": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Path libraryFilePath \u003d Paths.get(\"data\" , \"library.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        setLibraryFilePath(newUserPrefs.getLibraryFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return libraryFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setLibraryFilePath(Path libraryFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(libraryFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.libraryFilePath \u003d libraryFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null as well"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u0026\u0026 libraryFilePath.equals(o.libraryFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return Objects.hash(guiSettings, libraryFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + libraryFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 11,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Deck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.UniqueCardList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Represents a Deck in the library."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class Deck {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private  Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private UniqueCardList cards \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Deck(Name name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return cards.getSize();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns true if the list contains an equivalent card as the given argument."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return cards.contains(toCheck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Card getCard(Index index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return cards.getCard(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Adds a card to the deck."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The card must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void add(Card toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        cards.add(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void remove(Card toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        cards.remove(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setName(Name newName) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.name \u003d newName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the equivalent card from the list with the new card."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The old card must exist in the list and the new card must not already exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void replace(Card toRemove, Card toAdd) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "        cards.replace(toRemove, toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if both decks have the same name."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * This defines a weaker notion of equality between two decks."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean isSameDeck(Deck otherDeck) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        if (otherDeck \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return otherDeck !\u003d null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u0026\u0026 otherDeck.getName().equalsLowerCase(getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return cards.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public ObservableList\u003cCard\u003e asObservableList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return cards.asObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if both decks have the same identity and data fields."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * This defines a stronger notion of equality between two decks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        if (!(other instanceof Deck)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck otherDeck \u003d (Deck) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return otherDeck.getName().equalsLowerCase(getName());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amrl"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 35,
      "kschiew": 18,
      "ncslzh": 4,
      "amrl": 26,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Represents a Deck\u0027s name in FlashSpeed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \"Names should contain at least one (non-whitespace) character, i.e. should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        name \u003d name.strip();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return !test.isEmpty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public boolean equalsLowerCase(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "                \u0026\u0026 name.toLowerCase().equals(((Name) other).name.toLowerCase())); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 7,
      "amrl": 7,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/UniqueDeckList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.exceptions.DeckNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateDeckException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A list of decks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A deck is considered unique by comparing using {@code Deck#isSameDeck(Deck)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": " * decks uses Deck#isSameDeck(Deck) for equality so as to ensure that the deck being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * unique in terms of identity in the UniqueDeckList. However, the removal of a deck uses Deck#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": " * as to ensure that the deck with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * @see Deck#isSameDeck(Deck)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class UniqueDeckList implements Iterable\u003cDeck\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final ObservableList\u003cDeck\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if the list contains an equivalent deck as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean contains(Deck toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDeck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Returns deck with the given index."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Deck get(int index) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d internalList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Adds a deck to the library."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The deck must not already exist in the library."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void add(Deck toAdd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the deck {@code target} in the list with {@code editedDeck}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The deck identity of {@code editedDeck} must not be the same as another existing deck in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setDeck(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        requireAllNonNull(target, editedDeck);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        if (!target.isSameDeck(editedDeck) \u0026\u0026 contains(editedDeck)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        internalList.set(index, editedDeck);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Removes the equivalent deck from the library."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * The deck must exist in the library."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void remove(Deck toRemove) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DeckNotFoundException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setDecks(UniqueDeckList replacement) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Replaces the contents of the library with {@code decks}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * {@code decks} must not contain duplicate decks."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setDecks(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        requireAllNonNull(decks);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!decksAreUnique(decks)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DuplicateDeckException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        internalList.setAll(decks);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public ObservableList\u003cDeck\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Iterator\u003cDeck\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                || (other instanceof UniqueDeckList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueDeckList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if {@code decks} contains only unique decks."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private boolean decksAreUnique(List\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (int i \u003d 0; i \u003c decks.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            for (int j \u003d i + 1; j \u003c decks.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                if (decks.get(i).isSameDeck(decks.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 30,
      "kschiew": 19,
      "amrl": 24,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/card/BackFace.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Represents the back face of a card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class BackFace extends Face {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public BackFace(String value) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 10,
      "amrl": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/card/Card.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Represents a Card in the deck."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class Card {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final FrontFace frontFace;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final BackFace backFace;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public Card(FrontFace frontFace, BackFace backFace) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.frontFace \u003d frontFace;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        this.backFace \u003d backFace;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public FrontFace getFrontFace() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return this.frontFace;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public BackFace getBackFace() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return this.backFace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Returns true if both cards have the same front and back faces."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!(other instanceof Card)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        Card otherCard \u003d (Card) other;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return otherCard.getFrontFace().equals(getFrontFace())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 otherCard.getBackFace().equals(getBackFace());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return Objects.hash(frontFace, backFace);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        builder.append(getFrontFace())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                .append(\" : \")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                .append(getBackFace());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 22,
      "ncslzh": 37,
      "amrl": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/card/Face.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Represents a face of a card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public abstract class Face {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Face(String value) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if both faces have the same value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!(other instanceof Face)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Face otherFace \u003d (Face) other;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return otherFace.getValue().equals(getValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 10,
      "ncslzh": 11,
      "lacedaemon98": 5,
      "amrl": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/card/FrontFace.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "package seedu.address.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Represents the front face of a card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class FrontFace extends Face {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public FrontFace(String value) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        super(value);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/card/UniqueCardList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * A list of cards that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * A card is considered unique by comparing using {@code Card#equals(Object)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * cards uses Card#equals(Object) for equality so as to ensure that the card being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * unique in terms of content in the UniqueCardList. The removal of a card also uses Card#equals(Object)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " * @see Card#equals(Object)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ncslzh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "public class UniqueCardList implements Iterable\u003cCard\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private final ObservableList\u003cCard\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Returns true if the list contains an equivalent card as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public boolean contains(Card toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Adds a card to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The card must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void add(Card toAdd) throws DuplicateCardException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Card getCard(Index index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Removes the equivalent card from the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * The card must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void remove(Card toRemove) throws DuplicateCardException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Replaces the card {@code toRemove} in the list with {@code toAdd}. {@code toRemove} must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * The card identity of {@code toAdd} must not be the same as another existing card in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void replace(Card toRemove, Card toAdd) throws CardNotFoundException, DuplicateCardException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireAllNonNull(toRemove, toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "        int idx \u003d internalList.indexOf(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (idx \u003d\u003d -1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new CardNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!toRemove.equals(toAdd) \u0026\u0026 contains(toAdd)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "            throw new DuplicateCardException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "        internalList.set(idx, toAdd);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void setCards(UniqueCardList replacement) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public ObservableList\u003cCard\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public ObservableList\u003cCard\u003e asObservableList() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return FXCollections.observableArrayList(internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public Iterator\u003cCard\u003e iterator() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                || (other instanceof UniqueCardList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCardList) other).internalList));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns true if {@code cards} contains only unique cards."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private boolean cardsAreUnique(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (int i \u003d 0; i \u003c cards.size() - 1; i++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amrl"
        },
        "content": "            for (int j \u003d i + 1; j \u003c cards.size(); j++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amrl"
        },
        "content": "                if (cards.get(i).equals(cards.get(j))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 11,
      "ncslzh": 86,
      "amrl": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/CardNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Signals that the operation is unable to find the specified card."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class CardNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "amrl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DeckNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Signals that the operation is unable to find the specified deck."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DeckNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "amrl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DuplicateCardException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Signals that the operation will result in duplicate Cards (Cards are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DuplicateCardException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DuplicateCardException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(\"Operation would result in duplicate cards\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/deck/exceptions/DuplicateDeckException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.model.deck.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Signals that the operation will result in duplicate Decks (Decks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DuplicateDeckException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DuplicateDeckException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(\"Operation would result in duplicate decks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/Mode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public enum Mode {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    VIEW,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    PLAY"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Contains utility methods for populating {@code Library} with sample data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static Deck[] getSampleDecks() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck sampleDeck \u003d new Deck(new Name(\"Sample Deck 1\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        sampleDeck.add(new Card(new FrontFace(\"front\"), new BackFace(\"back\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new Deck[] {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            sampleDeck"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static ReadOnlyLibrary getSampleLibrary() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Library sampleLib \u003d new Library();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (Deck sampleDeck : getSampleDecks()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "            sampleLib.addDeck(sampleDeck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return sampleLib;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 10,
      "ncslzh": 1,
      "amrl": 7,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/View.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "public enum View {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "    LIBRARY,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "    DECK"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Jackson-friendly version of {@link Card}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "class JsonAdaptedCard {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Card name is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final String frontFace;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final String backFace;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a {@code JsonAdaptedCard} with the given deck details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonAdaptedCard(@JsonProperty(\"frontFace\") String frontFace, @JsonProperty(\"backFace\") String backFace) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.frontFace \u003d frontFace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.backFace \u003d backFace;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts a given {@code Card} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonAdaptedCard(Card card) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.frontFace \u003d card.getFrontFace().getValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.backFace \u003d card.getBackFace().getValue();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Getters for front face value."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public String getFrontFace() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return frontFace;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Getters for Back face value."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public String getBackFace() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return backFace;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts this Jackson-friendly adapted deck object into the model\u0027s {@code Card} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted deck."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Card toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        if (frontFace \u003d\u003d null || backFace \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        final FrontFace front \u003d new FrontFace(frontFace);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        final BackFace back \u003d new BackFace(backFace);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new Card(front, back);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 64,
      "amrl": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDeck.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Jackson-friendly version of {@link Deck}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "class JsonAdaptedDeck {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Deck\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private List\u003cJsonAdaptedCard\u003e cards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a {@code JsonAdaptedDeck} with the given deck details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonAdaptedDeck(@JsonProperty(\"name\") String name, @JsonProperty(\"cards\") List\u003cJsonAdaptedCard\u003e cards) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.cards.addAll(cards);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts a given {@code Deck} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public JsonAdaptedDeck(Deck source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.cards \u003d source.asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .map(card -\u003e new JsonAdaptedCard(card))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts this Jackson-friendly adapted deck object into the model\u0027s {@code Deck} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted deck."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Deck toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck modelDeck \u003d new Deck(new Name(name));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (JsonAdaptedCard card : cards) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            FrontFace newFrontFace \u003d new FrontFace(card.getFrontFace());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            BackFace newBackFace \u003d new BackFace(card.getBackFace());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            modelDeck.add(new Card(newFrontFace, newBackFace));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return modelDeck;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 22,
      "ncslzh": 2,
      "amrl": 8,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonLibraryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A class to access Library data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class JsonLibraryStorage implements LibraryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonLibraryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public JsonLibraryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return readLibrary(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Similar to {@link #readLibrary()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Optional\u003cJsonSerializableLibrary\u003e jsonLibrary \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                filePath, JsonSerializableLibrary.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!jsonLibrary.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "            return Optional.of(jsonLibrary.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "        saveLibrary(library, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Similar to {@link #saveLibrary(ReadOnlyLibrary)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "        requireNonNull(library);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableLibrary(library), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "amrl": 18,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableLibrary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": " * An Immutable Library that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "@JsonRootName(value \u003d \"decks\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "class JsonSerializableLibrary {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_DECK \u003d \"Decks list contains duplicate deck(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final List\u003cJsonAdaptedDeck\u003e decks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Constructs a {@code JsonSerializableLibrary} with the given decks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonSerializableLibrary(@JsonProperty(\"decks\") List\u003cJsonAdaptedDeck\u003e decks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.decks.addAll(decks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts a given {@code ReadOnlyLibrary} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableLibrary}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public JsonSerializableLibrary(ReadOnlyLibrary source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        decks.addAll(source.getDeckList().stream().map(JsonAdaptedDeck::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Converts this library into the model\u0027s {@code Library} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Library toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library library \u003d new Library();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "        for (JsonAdaptedDeck jsonAdaptedDeck : decks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "            Deck deck \u003d jsonAdaptedDeck.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (library.hasDeck(deck)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_DECK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "            library.addDeck(deck);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 13,
      "amrl": 11,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 1,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/LibraryStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * Represents a storage for {@link Library}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "public interface LibraryStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Returns Library data as a {@link ReadOnlyLibrary}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @see #getLibraryFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Saves the given {@link ReadOnlyLibrary} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @param library cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * @see #saveLibrary(ReadOnlyLibrary)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 4,
      "amrl": 10,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "public interface Storage extends LibraryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Path getLibraryFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void saveLibrary(ReadOnlyLibrary library) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 4,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Manages storage of library data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private LibraryStorage libraryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public StorageManager(LibraryStorage libraryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "        this.libraryStorage \u003d libraryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Library methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Path getLibraryFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return libraryStorage.getLibraryFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return readLibrary(libraryStorage.getLibraryFilePath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public Optional\u003cReadOnlyLibrary\u003e readLibrary(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return libraryStorage.readLibrary(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "        saveLibrary(library, libraryStorage.getLibraryFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public void saveLibrary(ReadOnlyLibrary library, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "        libraryStorage.saveLibrary(library, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "amrl": 15,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CardListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "public class CardListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private static final String FXML \u003d \"CardListPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Label defaultText;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    TableView itemTbl;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public CardListPanel(ObservableValue\u003cDeck\u003e selectedDeck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        TableColumn\u003cDeck, Number\u003e indexColumn \u003d new TableColumn\u003cDeck, Number\u003e(\"ID\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "        indexColumn.setCellValueFactory(column-\u003e new ReadOnlyObjectWrapper\u003cNumber\u003e("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "                itemTbl.getItems().indexOf(column.getValue()) + 1));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        TableColumn frontColumn \u003d new TableColumn(\"Front\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        frontColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"frontFace\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        TableColumn backColumn \u003d new TableColumn(\"Back\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        backColumn.setCellValueFactory(new PropertyValueFactory\u003c\u003e(\"backFace\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        itemTbl.getColumns().addAll(indexColumn, frontColumn, backColumn);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        indexColumn.prefWidthProperty().bind(itemTbl.widthProperty().multiply(0.2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        frontColumn.prefWidthProperty().bind(itemTbl.widthProperty().multiply(0.4));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        backColumn.prefWidthProperty().bind(itemTbl.widthProperty().multiply(0.4));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        indexColumn.setSortable(false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        frontColumn.setSortable(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        backColumn.setSortable(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        indexColumn.setResizable(false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        frontColumn.setResizable(false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        backColumn.setResizable(false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "        // Load deck page when selected deck changes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "        selectedDeck.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "                itemTbl.getItems().clear();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                defaultText.setText(\"No deck selected\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                getCardList(newValue);   "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private void getCardList(Deck deck) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        itemTbl.getItems().clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        ObservableList\u003cCard\u003e cardList \u003d deck.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (cardList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            defaultText.setText(\"Selected deck is empty\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        for (int i \u003d 0; i \u003c cardList.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            Card card \u003d cardList.get(i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            itemTbl.getItems().add(card);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private void printCard(Card card) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        itemTbl.getItems().add(card);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 88,
      "amrl": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Platform.runLater(()-\u003ecommandTextField.requestFocus());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeckCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": " * An UI component that displays information of a {@code Deck}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DeckCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String FXML \u003d \"DeckListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public final Deck deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private Label cardNo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DeckCard(Deck deck, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.deck \u003d deck;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        name.setText(deck.getName().name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardNo.setText(String.valueOf(deck.asUnmodifiableObservableList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "        if (!(other instanceof DeckCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "        DeckCard card \u003d (DeckCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                \u0026\u0026 deck.equals(card.deck);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 4,
      "ncslzh": 1,
      "lacedaemon98": 3,
      "amrl": 6,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DeckListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": " * Panel containing the list of decks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "public class DeckListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String FXML \u003d \"DeckListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DeckListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private ListView\u003cDeck\u003e deckListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DeckListPanel(ObservableList\u003cDeck\u003e deckList, ObservableValue\u003cDeck\u003e selectedDeck,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "                         Consumer\u003cDeck\u003e onSelectedDeckChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deckListView.setItems(deckList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deckListView.setCellFactory(listView -\u003e new DeckListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "//        deckListView.getSelectionModel().clearAndSelect(2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deckListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "            logger.fine(\"Selection in deck list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "            onSelectedDeckChange.accept(newValue);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        selectedDeck.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "            logger.fine(\"Selected deck changed to: \" + newValue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected deck,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "//            if (Objects.equals(deckListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "//                return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "                deckListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "                int index \u003d deckListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": "                deckListView.scrollTo(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "                deckListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Deck} using a {@code DeckCard}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "    class DeckListViewCell extends ListCell\u003cDeck\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "        protected void updateItem(Deck deck, boolean empty) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "            super.updateItem(deck, empty);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (empty || deck \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": "                setGraphic(new DeckCard(deck, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ncslzh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //String userGuideUrl \u003d \"https://ay1920s2-cs2103t-w17-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "//        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 6,
      "lacedaemon98": 3,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.logic.commands.gamecommands.StopCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private CardListPanel cardListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private PlayPanel playPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private DeckListPanel deckListPanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private StatisticsPopUp statisticsPopUp;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private StackPane rightPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private StackPane deckListPanelPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setX(primaryScreenBounds.getMinX());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setY(primaryScreenBounds.getMinY());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setWidth(primaryScreenBounds.getWidth());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setHeight(primaryScreenBounds.getHeight());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setMinWidth(primaryScreenBounds.getWidth());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setMinHeight(primaryScreenBounds.getHeight());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setMaxWidth(primaryScreenBounds.getWidth());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        primaryStage.setMaxHeight(primaryScreenBounds.getHeight());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        statisticsPopUp \u003d new StatisticsPopUp(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (logic.getMode() \u003d\u003d Mode.VIEW) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            cardListPanel \u003d new CardListPanel(logic.selectedDeckProperty());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            rightPlaceholder.getChildren().add(cardListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        } else if (logic.getMode() \u003d\u003d Mode.PLAY) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            playPanel \u003d new PlayPanel(logic.playingCardProperty(), logic.flippedProperty(), logic.cardAttemptedProperty(), logic.cardRemainingProperty());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            rightPlaceholder.getChildren().add(playPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amrl"
        },
        "content": "        "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deckListPanel \u003d new DeckListPanel(logic.getFilteredDeckList(), logic.selectedDeckProperty(), logic::setSelectedDeck);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amrl"
        },
        "content": "        deckListPanelPlaceholder.getChildren().add(deckListPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amrl"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getLibraryFilePath());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void handleStop(Statistics statistics) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (statistics \u003d\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (!statisticsPopUp.isShowing()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statisticsPopUp \u003d new StatisticsPopUp(statistics);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statisticsPopUp.show();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statisticsPopUp.hide();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statisticsPopUp \u003d new StatisticsPopUp(statistics);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            statisticsPopUp.show();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        statisticsPopUp.hide();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "amrl"
        },
        "content": "    public DeckListPanel getDeckListPanel() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return deckListPanel;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            if (commandResult.isStop()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                handleStop(commandResult.getStatistics());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 53,
      "amrl": 8,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PlayPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "public class PlayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private static final String FXML \u003d \"PlayPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private int attempted;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private int remaining;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Label front;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Label back;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Label noAttempted;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Label noRemaining;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    ProgressBar progress;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Label progressPercent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    VBox progressRoot;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    Label instruction;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public PlayPanel(ObservableValue\u003cCard\u003e playingCard, ObservableValue\u003cBoolean\u003e flipped, ObservableValue\u003cInteger\u003e cardAttempted, ObservableValue\u003cInteger\u003e cardRemaining) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "        back.setVisible(false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        progress.setProgress(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        progressPercent.setText(\"0.0%\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        progress.prefWidthProperty().bind(progressRoot.widthProperty().subtract(40));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //Load playing card"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        playingCard.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                showPlayingCard(newValue);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        //Show back face when flipped"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        flipped.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "            if (newValue) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                back.setVisible(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                instruction.setText(\"Did you get your answer right? Answer \u0027yes\u0027 or \u0027no\u0027\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "                back.setVisible(false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                instruction.setText(\"Type \u0027flip\u0027 to reveal back face\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardAttempted.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                attempted \u003d newValue;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                setProgress();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                noAttempted.setText(String.valueOf(newValue));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        cardRemaining.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                remaining \u003d newValue;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                setProgress();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                noRemaining.setText(String.valueOf(newValue));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private void showPlayingCard(Card card) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        front.setText(card.getFrontFace().toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        front.setWrapText(true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        back.setText(card.getBackFace().toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        back.setWrapText(true);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        instruction.setText(\"Type \u0027flip\u0027 to reveal back face\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private void setProgress() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        double currentProgress \u003d Double.valueOf(attempted)/(attempted+remaining);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        double prog \u003d currentProgress * 100;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        progressPercent.setText(String.format(\"%.1f\", prog)+\"%\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        progress.setProgress(currentProgress);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 117,
      "amrl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A UI for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticsPopUp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " * Controller for a statistics page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "public class StatisticsPopUp extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatisticsPopUp.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private static final String FXML \u003d \"StatisticsPopUp.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private Label stats;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public StatisticsPopUp(Stage root, Statistics statistics) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        if (statistics !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            stats.setText(statistics.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public StatisticsPopUp(Statistics statistics) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this(new Stage(), statistics);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Shows the statistics window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        logger.fine(\"Showing statistics of the previous play session\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns true if the statistics window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Hides the statistics window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Focuses on the statistics window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\"Data saved to .\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/flashspeed_logo.png\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    private ObservableValue\u003cMode\u003e mode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        this.mode \u003d logic.currentModeProperty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "            mainWindow.show(); // this should be called before creating other UI parts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            this.mode.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 1,
      "lacedaemon98": 8,
      "amrl": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/resources/view/CardListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.collections.FXCollections?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003cStackPane  xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "   \u003cAnchorPane  /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "   \u003cTableView fx:id\u003d\"itemTbl\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cplaceholder\u003e\u003cLabel fx:id\u003d\"defaultText\" text\u003d\"No deck selected\" style\u003d\"-fx-text-fill:white\" /\u003e\u003c/placeholder\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "   \u003c/TableView\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 18
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003cGridPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cColumnConstraints percentWidth\u003d\"10\"\u003e\u003c/ColumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cColumnConstraints percentWidth\u003d\"90\"\u003e\u003c/ColumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003cVBox GridPane.columnIndex\u003d\"0\" style\u003d\"-fx-background-color: #4473c5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        \u003cInsets top\u003d\"10\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Enter command:\" style\u003d\"-fx-text-fill:white\"\u003e\u003c/Label\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003cTextField GridPane.columnIndex\u003d\"1\" fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\"   promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 20,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DeckListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003cHBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cLabel fx:id\u003d\"\" text\u003d\"Number of cards: \"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "      \u003cLabel fx:id\u003d\"cardNo\"  /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 8,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/DeckListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "  \u003cListView fx:id\u003d\"deckListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "amrl": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "         title\u003d\"Help\" maximized\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "            \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "         title\u003d\"FlashSpeed\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    \u003cImage url\u003d\"@/images/flashspeed_logo.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" \u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\" \u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\" \u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"  /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "          \u003cVBox fx:id\u003d\"deckList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "            \u003cStackPane fx:id\u003d\"deckListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "          \u003cStackPane fx:id\u003d\"rightPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border-2\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "ncslzh": 1,
      "lacedaemon98": 17,
      "amrl": 3,
      "-": 51
    }
  },
  {
    "path": "src/main/resources/view/PlayPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.collections.FXCollections?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.shape.Rectangle?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003cStackPane style\u003d\"-fx-background-color: #ffffff\"  xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cGridPane \u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cRowConstraints vgrow\u003d\"NEVER\"  percentHeight\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cRowConstraints vgrow\u003d\"NEVER\"  percentHeight\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cRowConstraints vgrow\u003d\"NEVER\"  percentHeight\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cRowConstraints vgrow\u003d\"NEVER\" percentHeight\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "             \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                \u003cColumnConstraints percentWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "             \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cStackPane GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"0\" style\u003d\"-fx-background-color: #f4b184; -fx-border-width: 1 1 0 1;-fx-border-color: black; -fx-padding: 0 0 0 0 ;\" \u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "           \u003cVBox fx:id\u003d\"progressRoot\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cProgressBar style\u003d\"-fx-padding: 20 0 0 0 ;\" fx:id\u003d\"progress\" minWidth\u003d\"800\" \u003e\u003c/ProgressBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "           \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "             \u003cHBox alignment\u003d\"TOP_LEFT\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                \u003cRegion prefWidth\u003d\"20\"\u003e\u003c/Region\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cLabel  text\u003d\"Cards attempted: \" style\u003d\"-fx-text-fill: black; -fx-font-size: 15;\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cLabel  fx:id\u003d\"noAttempted\" text\u003d\"0\" style\u003d\"-fx-text-fill: black; -fx-font-size: 15;\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/HBox\u003e\u003cHBox alignment\u003d\"TOP_RIGHT\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cLabel fx:id\u003d\"stats2\" text\u003d\"Cards remaining: \" style\u003d\"-fx-text-fill: black; -fx-font-size: 15;\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cLabel  fx:id\u003d\"noRemaining\" text\u003d\"0\" style\u003d\"-fx-text-fill: black; -fx-font-size: 15;\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cRegion prefWidth\u003d\"20\"\u003e\u003c/Region\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" fx:id\u003d\"progressPercent\"  style\u003d\"-fx-text-fill: black; -fx-font-size: 15; -fx-padding: 20 0 0 0 ;\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cStackPane GridPane.rowIndex\u003d\"1\" style\u003d\"-fx-background-color: #f4b184; -fx-border-width: 0 1 1 1;-fx-border-color: black; \"  \u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cLabel alignment\u003d\"CENTER\" fx:id\u003d\"instruction\" style\u003d\"-fx-text-fill: black; -fx-font-size: 18;\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cStackPane  GridPane.rowIndex\u003d\"2\" style\u003d\"-fx-background-color: #4473c5; -fx-border-width: 0 1 1 1;-fx-border-color: black; \"  \u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cLabel alignment\u003d\"CENTER\" fx:id\u003d\"front\" style\u003d\"-fx-text-fill: white; -fx-font-size: 50;\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cStackPane GridPane.rowIndex\u003d\"3\" style\u003d\"-fx-background-color: #ff5722; -fx-border-width: 0 1 1 1; -fx-border-color: black\"  \u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" fx:id\u003d\"back\" style\u003d\"-fx-text-fill: white; -fx-font-size: 50;\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lacedaemon98": 71
    }
  },
  {
    "path": "src/main/resources/view/StatisticsPopUp.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Statistics\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "    \u003cImage url\u003d\"@/images/flashspeed_logo.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\" maxWidth\u003d\"800\" maxHeight\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cLabel fx:id\u003d\"stats\" text\u003d\"Label\" style\u003d\"-fx-font-size: 20;\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 1,
      "lacedaemon98": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/flashspeed_logo.png\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.deckcommands.CreateDeckCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.storage.JsonLibraryStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "        JsonLibraryStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "                new JsonLibraryStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "//    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "//        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "//        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "        JsonLibraryStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "                new JsonLibraryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        String addCommand \u003d CreateDeckCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        expectedModel.addPerson(expectedDeck);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "//    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredDeckList().remove(0));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static class JsonLibraryIoExceptionThrowingStub extends JsonLibraryStorage {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amrl"
        },
        "content": "        private JsonLibraryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amrl"
        },
        "content": "        public void saveLibrary(ReadOnlyLibrary addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 8,
      "amrl": 18,
      "-": 135
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        expectedModel.setLibrary(new Library());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 4,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public static final String VALID_NAME_FRENCH \u003d \"French\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    //to be removed"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library expectedLibrary \u003d new Library(actualModel.getLibrary());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        List\u003cDeck\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedLibrary, actualModel.getLibrary());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        final String[] splitName \u003d deck.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 9,
      "lacedaemon98": 2,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateDeckCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.CreateDeckCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CreateDeckCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        expectedModel.addPerson(validDeck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertCommandSuccess(new CreateDeckCommand(validDeck), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                String.format(CreateDeckCommand.MESSAGE_SUCCESS, validDeck), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deckInList \u003d model.getLibrary().getPersonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertCommandFailure(new CreateDeckCommand(deckInList), model, CreateDeckCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 12,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CreateDeckCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.CreateDeckCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CreateDeckCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CreateDeckCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CommandResult commandResult \u003d new CreateDeckCommand(validDeck).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(String.format(CreateDeckCommand.MESSAGE_SUCCESS, validDeck), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(Arrays.asList(validDeck), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck validDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CreateDeckCommand createDeckCommand \u003d new CreateDeckCommand(validDeck);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validDeck);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(CommandException.class, CreateDeckCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e createDeckCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck alice \u003d new DeckBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck bob \u003d new DeckBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CreateDeckCommand addAliceCommand \u003d new CreateDeckCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CreateDeckCommand addBobCommand \u003d new CreateDeckCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CreateDeckCommand addAliceCommandCopy \u003d new CreateDeckCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public void addPerson(Deck deck) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public void setLibrary(ReadOnlyLibrary newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public boolean hasPerson(Deck deck) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public void deletePerson(Deck target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public void setPerson(Deck target, Deck editedDeck) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public ObservableList\u003cDeck\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cDeck\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        private final Deck deck;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ModelStubWithPerson(Deck deck) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            this.deck \u003d deck;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public boolean hasPerson(Deck deck) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            return this.deck.isSameDeck(deck);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        final ArrayList\u003cDeck\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public boolean hasPerson(Deck deck) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            return personsAdded.stream().anyMatch(deck::isSameDeck);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public void addPerson(Deck deck) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            requireNonNull(deck);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            personsAdded.add(deck);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public ReadOnlyLibrary getLibrary() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            return new Library();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 44,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deckToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, deckToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        expectedModel.deletePerson(deckToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deckToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, deckToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        expectedModel.deletePerson(deckToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLibrary().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 12,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedDeck).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedDeck);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck lastDeck \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        DeckBuilder personInList \u003d new DeckBuilder(lastDeck);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck editedDeck \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        expectedModel.setPerson(lastDeck, editedDeck);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck editedDeck \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deckInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck editedDeck \u003d new DeckBuilder(deckInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedDeck);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Library(model.getLibrary()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedDeck);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck firstDeck \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstDeck).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deckInList \u003d model.getLibrary().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                new EditPersonDescriptorBuilder(deckInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getLibrary().getPersonList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 31,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditDeckDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class EditDeckDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 6,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getLibrary(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.dump.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.dump.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 2,
      "-": 150
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CreateDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.CreateDeckCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.parser.dump.AddCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.Address;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.Email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CreateDeckCommandParserTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new CreateDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new CreateDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new CreateDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new CreateDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new CreateDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck expectedDeckMultipleTags \u003d new DeckBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new CreateDeckCommand(expectedDeckMultipleTags));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck expectedDeck \u003d new DeckBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                new CreateDeckCommand(expectedDeck));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateDeckCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 23,
      "ncslzh": 1,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.parser.dump.DeleteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.parser.dump.EditCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.Address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 7,
      "ncslzh": 1,
      "-": 203
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.parser.dump.FindCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 3,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LibraryParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.CreateDeckCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.logic.commands.dump.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.logic.parser.dump.LibraryParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.dump.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class LibraryParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private final LibraryParser parser \u003d new LibraryParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        CreateDeckCommand command \u003d (CreateDeckCommand) parser.parseCommand(PersonUtil.getAddCommand(deck));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(new CreateDeckCommand(deck), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d new DeckBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(deck).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 16,
      "ncslzh": 1,
      "amrl": 1,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ncslzh": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cardparsers/AddCardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.cardcommands.AddCardCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "class AddCardCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private AddCardCommandParser parser \u003d new AddCardCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_noColon_failure() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"front, back\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_valid_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "        Card toAdd \u003d new Card(new FrontFace(\"front value 1\"), new BackFace(\"back value 1\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "        AddCardCommand expectedCommand \u003d new AddCardCommand(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseSuccess(parser, \"front value 1:back value 1\", expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cardparsers/DeleteCardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.cardcommands.DeleteCardCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "class DeleteCardCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private DeleteCardCommandParser parser \u003d new DeleteCardCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_valid_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "        DeleteCardCommand expectedCommand \u003d new DeleteCardCommand(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseSuccess(parser, \"1\", expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/cardparsers/EditCardCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.logic.parser.cardparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.cardcommands.EditCardCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "class EditCardCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCardCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Index idxOneFromOneBased \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff \u003d new FrontFace(\"front\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf \u003d new BackFace(\"back\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace emptyFront \u003d new FrontFace(\"\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace emptyBack \u003d new BackFace(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private EditCardCommandParser parser \u003d new EditCardCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_noIndex_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"front:back\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_noFrontAndBack_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"1 :\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_noColon_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"1 front, back\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_withFrontOnly_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(idxOneFromOneBased, ff, emptyBack);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseSuccess(parser, \"1 front:\", expectedCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_withBackOnly_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(idxOneFromOneBased, emptyFront, bf);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseSuccess(parser, \"1 :back\", expectedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_withFrontAndBack_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "        EditCardCommand expectedCommand \u003d new EditCardCommand(idxOneFromOneBased, ff, bf);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseSuccess(parser, \"1 front:back\", expectedCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deckparsers/CreateDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.deckcommands.CreateDeckCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "class CreateDeckCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private CreateDeckCommandParser parser \u003d new CreateDeckCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_blankName_failure() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"        \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deckparsers/RemoveDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "        import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "        import seedu.address.logic.commands.deckcommands.RemoveDeckCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "        import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "        import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "class RemoveDeckCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemoveDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private RemoveDeckCommandParser parser \u003d new RemoveDeckCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deckparsers/RenameDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.deckcommands.RenameDeckCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "class RenameDeckCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, RenameDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private RenameDeckCommandParser parser \u003d new RenameDeckCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_blankName_failure() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"1  \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/deckparsers/SelectDeckCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.logic.parser.deckparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.deckcommands.SelectDeckCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "class SelectDeckCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private SelectDeckCommandParser parser \u003d new SelectDeckCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/gameparsers/PlayCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.logic.parser.gameparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.logic.commands.gamecommands.PlayCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "class PlayCommandParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, PlayCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private PlayCommandParser parser \u003d new PlayCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/model/GameManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.JAPANESE_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class GameManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private GameManager gameManager \u003d new GameManager(JAPANESE_DECK);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void flip_alreadyFlip_returnsNull() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        gameManager.flip();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        BackFace backFace \u003d gameManager.flip();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(backFace, null);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getBackFace_flip_returnsTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        BackFace backFace \u003d gameManager.flip();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d JAPANESE_DECK.asUnmodifiableObservableList().get(gameManager.getCurrCardIdx());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(backFace, card.getBackFace());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getNextCard_answerYes_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        gameManager.flip();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card nextCard \u003d gameManager.answerYes();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d JAPANESE_DECK.asUnmodifiableObservableList().get(gameManager.getCurrCardIdx());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(nextCard, card);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test void answerYes_finishAllCards_returnsNull() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        gameManager.flip();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        gameManager.answerYes();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        gameManager.flip();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "         gameManager.answerYes();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        gameManager.flip();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card nextCard \u003d gameManager.answerYes();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(nextCard, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getNextCard_answerNo_returnsTrue() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        gameManager.flip();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card nextCard \u003d gameManager.answerNo();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card card \u003d JAPANESE_DECK.asUnmodifiableObservableList().get(gameManager.getCurrCardIdx());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(nextCard, card);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 58,
      "kschiew": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/LibraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class LibraryTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final Library library \u003d new Library();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(Collections.emptyList(), library.getDeckList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e library.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        library.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(newData, library);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck editedAlice \u003d new DeckBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        List\u003cDeck\u003e newDecks \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        LibraryStub newData \u003d new LibraryStub(newDecks);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e library.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e library.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(library.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        library.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(library.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        library.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck editedAlice \u003d new DeckBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertTrue(library.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public void getDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e library.getDeckList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private static class LibraryStub implements ReadOnlyLibrary {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        private final ObservableList\u003cDeck\u003e decks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        LibraryStub(Collection\u003cDeck\u003e decks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            this.decks.setAll(decks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public ObservableList\u003cDeck\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            return decks;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        public ObservableList\u003cDeck\u003e getDeckList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 36,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.JAPANESE_DECK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.MALAY_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.CardUtils.JAP_CARD_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.CardUtils.JAP_CARD_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.CardUtils.JAP_CARD_3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.commands.deckcommands.SelectDeckCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.util.Mode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.testutil.CardBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.testutil.LibraryBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(new Library(), new Library(modelManager.getLibrary()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(Optional.empty(), modelManager.getDeckIndex());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(new SimpleObjectProperty\u003cDeck\u003e(), modelManager.selectedDeckProperty());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(new SimpleObjectProperty\u003cCard\u003e(), modelManager.playingCardProperty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(new SimpleObjectProperty\u003cBoolean\u003e(), modelManager.flippedProperty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(new SimpleObjectProperty\u003cInteger\u003e(), modelManager.cardAttemptedProperty());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(new SimpleObjectProperty\u003cInteger\u003e(), modelManager.cardRemainingProperty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        userPrefs.setLibraryFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        userPrefs.setLibraryFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setLibraryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setLibraryFilePath(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setLibraryFilePath_validPath_setsLibraryPath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.setLibraryFilePath(path);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(path, modelManager.getLibraryFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getFilteredDeckList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredDeckList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasDeck_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasDeck(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasDeck_deckNotInLibrary_returnsFalse() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertFalse(modelManager.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasDeck_deckInLibrary_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertTrue(modelManager.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasDeck_deckNotInLibrary_afterDeleteDeck_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.deleteDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertFalse(modelManager.hasDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getCurrentDeck_returnsNull() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertNull(modelManager.getCurrentDeck());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getCurrentDeck_returnsCurrentDeck() throws ParseException{"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.getCurrentDeck(), JAPANESE_DECK);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }  catch (ParseException pe) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void setSelectedDeck_returnsSelectedDeckValue() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.setSelectedDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        assertEquals(modelManager.selectedDeckProperty().getValue(), JAPANESE_DECK);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasCard_cardInDeck_returnsTrue() throws ParseException{"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            assertTrue(modelManager.hasCard(JAP_CARD_1));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getCard_returnsTrue() throws  ParseException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index deckIndex \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(deckIndex);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index cardIndex \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            assertEquals(modelManager.getCard(cardIndex), JAP_CARD_1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasCard_cardNotINDeck_afterDeleteCard_returnsFalse() throws ParseException {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            modelManager.deleteCard(JAP_CARD_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            assertFalse(modelManager.hasCard(JAP_CARD_1));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasCard_cardNotInDeck_afterReplaceCard_returnsFalse() throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card newCard \u003d new CardBuilder().withFrontFace(new FrontFace(\"newFront1\")).withBackFace(new BackFace(\"newBack1\")).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            modelManager.replaceCard(JAP_CARD_2, newCard);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            assertFalse(modelManager.hasCard(JAP_CARD_2));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void hasCard_cardInDeck_afterReplaceCard_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Card newCard \u003d new CardBuilder().withFrontFace(new FrontFace(\"newFront2\")).withBackFace(new BackFace(\"newBack2\")).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            modelManager.replaceCard(JAP_CARD_3, newCard);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertTrue(modelManager.hasCard(newCard));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void cardReturned_afterPlay_returnsNull() throws ParseException{"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"10\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Card card \u003d modelManager.play(index);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(card, null);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void gameCreated_afterPlay_returnsTrue() throws ParseException{"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Card card \u003d modelManager.play(index);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.getGame(), new GameManager(JAPANESE_DECK));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.getMode(), Mode.PLAY);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.playingCardProperty().getValue(), card);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.flippedProperty().getValue(), false);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getBackFace_afterFlip_returnsTrue() throws ParseException{"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Card card \u003d modelManager.play(index);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            BackFace backFace \u003d modelManager.flip();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.flippedProperty().getValue(), true);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(backFace, card.getBackFace());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getNextCard_afterAnswerYes_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.play(index);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.flip();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Card card \u003d modelManager.answerYes();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.flippedProperty().getValue(), false);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.playingCardProperty().getValue(), card);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public void getNextCard_afterAnswerNo_returnsTrue() throws ParseException {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        modelManager.createDeck(JAPANESE_DECK);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(\"0\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.selectDeck(index);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.play(index);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            modelManager.flip();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            Card card \u003d modelManager.answerNo();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.flippedProperty().getValue(), false);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            assertEquals(modelManager.playingCardProperty().getValue(), card);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectDeckCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        Library library \u003d new LibraryBuilder().withDeck(JAPANESE_DECK).withDeck(MALAY_DECK).build();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library differentLibrary \u003d new Library();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        modelManager \u003d new ModelManager(library, userPrefs);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(library, userPrefs);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentLibrary, userPrefs)));"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        differentUserPrefs.setLibraryFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(library, differentUserPrefs)));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 218,
      "kschiew": 18,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/DeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_FRENCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.CardUtils.getTypicalJapCards;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.JAPANESE_DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.MALAY_DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class DeckTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void isSameDeck() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(JAPANESE_DECK.isSameDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertFalse(JAPANESE_DECK.isSameDeck(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        // rename Japanese to French -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck renamed \u003d new DeckBuilder(JAPANESE_DECK).withName(VALID_NAME_FRENCH).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertFalse(JAPANESE_DECK.isSameDeck(JAPANESE_DECK));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        // new deck with same name, same cards -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck newDeck \u003d new DeckBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                .withName(\"Japanese\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                .withCards(getTypicalJapCards()).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(JAPANESE_DECK.isSameDeck(newDeck));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        // new deck with same name, no cards -\u003e return true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        newDeck \u003d new DeckBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                .withName(\"Japanese\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(JAPANESE_DECK.isSameDeck(newDeck));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck japaneseCopy \u003d new DeckBuilder(JAPANESE_DECK).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(JAPANESE_DECK.equals(japaneseCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(JAPANESE_DECK.equals(JAPANESE_DECK));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(5));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        // different deck -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(MALAY_DECK));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck renamed \u003d new DeckBuilder(JAPANESE_DECK).withName(VALID_NAME_FRENCH).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertFalse(JAPANESE_DECK.equals(renamed));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 6,
      "lacedaemon98": 28,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "lacedaemon98": 3,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/UniqueDeckListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.model.deck;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.CardUtils.getTypicalJapCards;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.JAPANESE_DECK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.MALAY_DECK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.DeckBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class UniqueDeckListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private final UniqueDeckList uniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void contains_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.contains(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void contains_deckNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertFalse(uniqueDeckList.contains(JAPANESE_DECK));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void contains_deckInList_returnsTrue() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(uniqueDeckList.contains(JAPANESE_DECK));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void contains_deckWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        Deck newDeck \u003d new DeckBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                .withName(\"Japanese\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "                .withCards(getTypicalJapCards()).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertTrue(uniqueDeckList.contains(newDeck));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void add_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.add(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void add_duplicateDeck_doNotAdd() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        expectedUniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDeck_editedDeckIsSameDeck_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.setDeck(JAPANESE_DECK, MALAY_DECK);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        expectedUniqueDeckList.add(MALAY_DECK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void remove_nullDeck_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.remove(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void remove_deckDoesNotExist_donotremove() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.remove(MALAY_DECK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        expectedUniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void remove_existingDeck_removesDeck() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.remove(JAPANESE_DECK);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDecks_nullUniqueDeckList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((UniqueDeckList) null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDecks_uniqueDeckList_replacesOwnListWithProvidedUniqueDeckList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        expectedUniqueDeckList.add(MALAY_DECK);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.setDecks(expectedUniqueDeckList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDecks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueDeckList.setDecks((List\u003cDeck\u003e) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public void setDecks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.add(JAPANESE_DECK);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        List\u003cDeck\u003e deckList \u003d Collections.singletonList(MALAY_DECK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        uniqueDeckList.setDecks(deckList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        UniqueDeckList expectedUniqueDeckList \u003d new UniqueDeckList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "        expectedUniqueDeckList.add(MALAY_DECK);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(expectedUniqueDeckList, uniqueDeckList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            -\u003e uniqueDeckList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 21,
      "lacedaemon98": 46,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/card/BackFaceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "        import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "        import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "class BackFaceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf1 \u003d new BackFace(\"back value\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf2 \u003d new BackFace(\"back value\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getValue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(bf1.getValue(), \"back value\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(bf1.toString(), \"back value\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(bf1, bf2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/card/CardTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertSame;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "class CardTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff \u003d new FrontFace(\"front value\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf \u003d new BackFace(\"back value\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card1 \u003d new Card(ff, bf);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card2 \u003d new Card(ff, bf);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getFrontFace() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(card1.getFrontFace(), ff);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getBackFace() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(card1.getBackFace(), bf);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(card1, card2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(card1.toString(), \"front value:back value\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/card/FrontFaceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": "class FrontFaceTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff1 \u003d new FrontFace(\"front value\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff2 \u003d new FrontFace(\"front value\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getValue() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(ff1.getValue(), \"front value\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(ff1.toString(), \"front value\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(ff1, ff2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/deck/card/UniqueCardListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrl"
        },
        "content": "package seedu.address.model.deck.card;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrl"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.exceptions.CardNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrl"
        },
        "content": "import seedu.address.model.deck.exceptions.DuplicateCardException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrl"
        },
        "content": "class UniqueCardListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private UniqueCardList ucl \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private UniqueCardList ucl2 \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private UniqueCardList ucl3 \u003d new UniqueCardList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff1 \u003d new FrontFace(\"front value 1\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private FrontFace ff2 \u003d new FrontFace(\"front value 2\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf1 \u003d new BackFace(\"back value 1\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private BackFace bf2 \u003d new BackFace(\"back value 2\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrl"
        },
        "content": "    Card nonExistentCard \u003d new Card(new FrontFace(\"new front 1\"), new BackFace(\"new back 2\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card1 \u003d new Card(ff1, bf1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card2 \u003d new Card(ff1, bf2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card3 \u003d new Card(ff2, bf1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "    private Card card4 \u003d new Card(ff2, bf2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrl"
        },
        "content": "    UniqueCardListTest() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl.add(card1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl.add(card2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl.add(card3);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl.add(card4);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl2.add(card1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl2.add(card2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl2.add(card3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl2.add(card4);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl3.add(card2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrl"
        },
        "content": "        ucl3.add(card3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void contains() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertTrue(ucl.contains(card1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertTrue(ucl.contains(card2));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertTrue(ucl.contains(card3));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertTrue(ucl.contains(card4));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getSize() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(ucl.getSize(), 4);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void add_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ucl.add(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void add_duplicateCard_throwsDuplicateCardException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e ucl.add(card1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e ucl.add(card2));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e ucl.add(card3));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(DuplicateCardException.class, () -\u003e ucl.add(card4));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getCard_validIndex_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(ucl.getCard(Index.fromZeroBased(0)), card1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(ucl.getCard(Index.fromZeroBased(1)), card2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(ucl.getCard(Index.fromZeroBased(2)), card3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertSame(ucl.getCard(Index.fromZeroBased(3)), card4);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void getCard_invalidIndex_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CardNotFoundException.class, () -\u003e ucl.getCard(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void replace_nonExistentCard_throwsCardNotFoundException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertThrows(CardNotFoundException.class, () -\u003e ucl.replace(nonExistentCard, card1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrl"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertEquals(ucl, ucl2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrl"
        },
        "content": "        assertNotEquals(ucl, ucl3);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "amrl": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedDeckTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrl"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDeck.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.EMPTY_DECK_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.MALAY_DECK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ncslzh"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.CardUtils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class JsonAdaptedDeckTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        JsonAdaptedDeck deck \u003d new JsonAdaptedDeck(MALAY_DECK);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(MALAY_DECK, deck.toModelType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrl"
        },
        "content": "        JsonAdaptedDeck person \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                new JsonAdaptedDeck(EMPTY_DECK_NAME, JAP);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrl"
        },
        "content": "        JsonAdaptedDeck person \u003d new JsonAdaptedDeck(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 7,
      "ncslzh": 1,
      "amrl": 3,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonLibraryStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class JsonLibraryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private java.util.Optional\u003cReadOnlyLibrary\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrl"
        },
        "content": "        return new JsonLibraryStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrl"
        },
        "content": "        JsonLibraryStorage jsonAddressBookStorage \u003d new JsonLibraryStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ReadOnlyLibrary readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(original, new Library(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(original, new Library(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(original, new Library(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private void saveAddressBook(ReadOnlyLibrary addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amrl"
        },
        "content": "            new JsonLibraryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new Library(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 15,
      "amrl": 3,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableLibraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.testutil.DeckUtils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class JsonSerializableLibraryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        JsonSerializableLibrary dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                JsonSerializableLibrary.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library libraryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library typicalPersonsLibrary \u003d DeckUtils.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(libraryFromFile, typicalPersonsLibrary);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        JsonSerializableLibrary dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                JsonSerializableLibrary.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        JsonSerializableLibrary dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "                JsonSerializableLibrary.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableLibrary.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.DeckUtils.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.ReadOnlyLibrary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrl"
        },
        "content": "        JsonLibraryStorage addressBookStorage \u003d new JsonLibraryStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        storageManager.saveLibrary(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        ReadOnlyLibrary retrieved \u003d storageManager.readLibrary().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertEquals(original, new Library(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        assertNotNull(storageManager.getLibraryFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 8,
      "amrl": 1,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrl"
        },
        "content": " * A utility class to help with building Card objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CardBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Japanese\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Deck DEFAULT_DECK \u003d new Deck(new Name(\"Default deck\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private FrontFace frontFace;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private BackFace backFace;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Initializes the CardBuilder with the data of {@code cardToCopy}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CardBuilder(Card cardToCopy) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.frontFace \u003d cardToCopy.getFrontFace();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.backFace \u003d cardToCopy.getBackFace();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Default constructor."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CardBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Sets the front face of the card that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CardBuilder withFrontFace(FrontFace frontFace) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.frontFace \u003d frontFace;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Sets the back face of the card that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public CardBuilder withBackFace(BackFace backFace) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.backFace \u003d backFace;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Builds the card with the intended front face and back face value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return A Card object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Card build() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new Card(frontFace, backFace);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 58,
      "amrl": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CardUtils.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.BackFace;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.FrontFace;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * A utility class containing a list of {@code Card} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class CardUtils {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String EMPTY_FACE \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Card JAP_CARD_1 \u003d new CardBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withFrontFace(new FrontFace(\"Hello\"))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withBackFace(new BackFace(\" こんにちは\"))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Card JAP_CARD_2 \u003d new CardBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withFrontFace(new FrontFace(\"Goodbye\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withBackFace(new BackFace(\" さよなら\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Card JAP_CARD_3 \u003d new CardBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withFrontFace(new FrontFace(\"Thank you\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withBackFace(new BackFace(\" ありがとう\"))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Card MALAY_CARD_1 \u003d new CardBuilder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withFrontFace(new FrontFace(\"I\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withBackFace(new BackFace(\"Saya\"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Card MALAY_CARD_2 \u003d new CardBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withFrontFace(new FrontFace(\"You\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withBackFace(new BackFace(\"Awak\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Card MALAY_CARD_3 \u003d new CardBuilder()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withFrontFace(new FrontFace(\"Chicken\"))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withBackFace(new BackFace(\"Ayam\"))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private CardUtils() {} // prevents instantiation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Gets the Japanese test deck."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static List\u003cCard\u003e JAP_CARDS \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            Arrays.asList(JAP_CARD_1, JAP_CARD_2, JAP_CARD_3));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Gets the Malay test deck."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static List\u003cCard\u003e MALAY_CARDS \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            Arrays.asList(MALAY_CARD_1, MALAY_CARD_2, MALAY_CARD_3));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeckBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.Card;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.card.UniqueCardList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * A utility class to help with building Deck objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class DeckBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Japanese\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Deck DEFAULT_DECK \u003d new Deck(new Name(\"Default deck\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private ArrayList\u003cCard\u003e cards;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Initializes the DeckBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckBuilder(Deck deckToCopy) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        name \u003d deckToCopy.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Sets the {@code Name} of the {@code Deck} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Adds a list of cards to the deck that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckBuilder withCards(List\u003cCard\u003e cards) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (Card card : cards) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            this.cards.add(card);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Adds a card to the deck that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public DeckBuilder withCard(Card card) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kschiew"
        },
        "content": "       cards.add(card);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kschiew"
        },
        "content": "       return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Builds a deck for testing purposes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * @return The deck object built."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public Deck build() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Deck deck \u003d new Deck(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (Card card : cards) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            deck.add(card);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return deck;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DeckUtils.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kschiew"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.CardUtils.JAP_CARDS;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import static seedu.address.testutil.CardUtils.MALAY_CARDS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kschiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kschiew"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kschiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kschiew"
        },
        "content": "public class DeckUtils {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Deck JAPANESE_DECK \u003d new DeckBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withName(\"Japanese\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withCards(JAP_CARDS).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final Deck MALAY_DECK \u003d new DeckBuilder()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withName(\"Malay\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            .withCards(MALAY_CARDS).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String EMPTY_DECK_NAME \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    private DeckUtils() {} // prevents instantiation"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static Deck getTypicalJapDeck() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return JAPANESE_DECK;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static Deck getTypicalMalayDeck() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return MALAY_DECK;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "     * Returns an {@code Libary} with all the typical decks."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lacedaemon98"
        },
        "content": "    public static Library getTypicalLibrary() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        Library library \u003d new Library();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        for (Deck deck : getTypicalDecks()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "            library.addDeck(deck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static List\u003cDeck\u003e getTypicalDecks() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JAPANESE_DECK, MALAY_DECK));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kschiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 52,
      "lacedaemon98": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/LibraryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.Library;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * A utility class to help with building Library objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " *     {@code Library library \u003d new LibraryBuilder().withDeck(\"Japanese\", \"Korean\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "oLiXino"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "public class LibraryBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    private Library library;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public LibraryBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        library \u003d new Library();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public LibraryBuilder(Library library) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        this.library \u003d library;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     * Adds a new {@code Deck} to the {@code Library} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public LibraryBuilder withDeck(Deck deck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        library.createDeck(deck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "oLiXino"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    public Library build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "        return library;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "oLiXino"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "oLiXino": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kschiew"
        },
        "content": "import seedu.address.model.deck.Deck;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the middle index of the deck in the {@code model}\u0027s library."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return Index.fromOneBased(model.getLibrary().getDeckList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the last index of the deck in the {@code model}\u0027s library."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return Index.fromOneBased(model.getLibrary().getDeckList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kschiew"
        },
        "content": "     * Returns the deck in the {@code model}\u0027s library at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kschiew"
        },
        "content": "    public static Deck getDeck(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kschiew"
        },
        "content": "        return model.getLibrary().getDeckList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kschiew": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kschiew"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kschiew": 1,
      "-": 6
    }
  }
]
